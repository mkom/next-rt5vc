{
    "sourceFile": "pages/dashboard/transactions.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 50,
            "patches": [
                {
                    "date": 1722400040456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1722400053653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -246,10 +246,10 @@\n               <Table.Head>\n                 <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 w-3/4'>Keterangan</Table.HeadCell>\n                 <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tanggal</Table.HeadCell>\n                 <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Nominal</Table.HeadCell>\n-                {/* <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Status</Table.HeadCell> */}\n                 <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tipe</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Status</Table.HeadCell>\n                 <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>\n                     <span className=\"sr-only\">Edit</span>\n                 </Table.HeadCell>\n               </Table.Head>\n"
                },
                {
                    "date": 1722400072471,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,359 @@\n+// pages/home.js\n+import { getSession, useSession } from 'next-auth/react';\n+import { useEffect,useState } from 'react';\n+import axios from 'axios';\n+import { useRequireAuth } from '../../utils/authUtils'; \n+import ReactPaginate from 'react-paginate';\n+\n+import Header from '../../components/Header';\n+import SideMenu from '../../components/dashboard/Sidebar';\n+import TransactionDrawer from '../../components/dashboard/TransactionDrawer';\n+import Spinner from '../../components/Spinner';\n+import { Card, Button,TextInput,Drawer,Select, Table,Dropdown, Alert  } from \"flowbite-react\";\n+import { HiOutlineSearch } from \"react-icons/hi\";\n+import {  FaCheckCircle, FaTimesCircle, FaHourglassHalf } from 'react-icons/fa';\n+import { FaRegArrowAltCircleDown } from \"react-icons/fa\";\n+import { FaRegArrowAltCircleUp } from \"react-icons/fa\";\n+import { FaEllipsisH } from \"react-icons/fa\";\n+import { FaExchangeAlt } from \"react-icons/fa\";\n+import FilterTransactions from '../../components/FilterTransactions';\n+import moment from 'moment';\n+import 'moment/locale/id';\n+moment.locale('id');\n+\n+const ITEMS_PER_PAGE = 15;\n+\n+\n+const Transaction = ({ initialTransaction }) =>  {\n+  const { useAuthRedirect } = useRequireAuth(['admin', 'editor', 'superadmin']);\n+  useAuthRedirect();\n+  const [transactions, setTransactions] = useState([initialTransaction]);\n+  const [reTransactions, setReTransactions] = useState([initialTransaction])\n+  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n+  const [loading, setLoading] = useState(true);\n+  const { data: session, status } = useSession();\n+  const [searchTerm, setSearchTerm] = useState('');\n+  const [currentPage, setCurrentPage] = useState(0);\n+\n+  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n+  const [currentTransactionType, setCurrentTransactionType] = useState('');\n+\n+  const [showAlert, setShowAlert] = useState(false);\n+  const [alertMessage, setAlertMessage] = useState('');\n+  const [alertType, setAlertType] = useState('success');\n+  \n+  \n+\n+  const toggleSidebar = () => {\n+    setIsSidebarOpen(!isSidebarOpen);\n+  };\n+\n+  const formatCurrency = (amount) => {\n+    return new Intl.NumberFormat('id-ID', {\n+        style: 'currency',\n+        currency: 'IDR',\n+        minimumFractionDigits: 0,\n+    }).format(amount);\n+  };\n+\n+  const fetchTransactions = async () => {\n+    try {\n+        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n+            headers: {\n+              Authorization: `Bearer ${session.accessToken}`,\n+            },\n+        });\n+        setTransactions(res.data.data);\n+        setReTransactions(res.data.data);\n+        setLoading(false);\n+    } catch (error) {\n+        console.error('Error fetching houses data:', error);\n+        setLoading(false);\n+    }\n+ };\n+\n+  useEffect(() => {\n+    if (session) {\n+        fetchTransactions();\n+    }\n+\n+  }, [session, status]);\n+\n+  const handleSearchChange = (event) => {\n+    setSearchTerm(event.target.value);\n+  };\n+\n+  const filteredTransactions = transactions.filter(transaction => \n+    (transaction.description && transaction.description.toLowerCase().includes(searchTerm.toLowerCase()))\n+  );\n+\n+  const offset = currentPage * ITEMS_PER_PAGE;\n+  const currentPageData = filteredTransactions.slice(offset, offset + ITEMS_PER_PAGE);\n+\n+  const handlePageClick = (data) => {\n+    setCurrentPage(data.selected);\n+  };\n+\n+\n+  const getStatusIcon = (status) => {\n+    switch (status) {\n+      case 'berhasil':\n+        return <FaCheckCircle className=\"text-green-500\" />;\n+      case 'gagal':\n+        return <FaTimesCircle className=\"text-red-500\" />;\n+      case 'sedang dicek':\n+        return <FaHourglassHalf className=\"text-yellow-500\" />;\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const getTypeIcon = (type) => {\n+    switch (type) {\n+      case 'income':\n+        return <FaRegArrowAltCircleDown  className=\"text-blue-700 h-4 w-4 md:h-5 md:w-5 \" />;\n+      case 'expense':\n+        return <FaRegArrowAltCircleUp  className=\"text-red-700 h-4 w-4 md:h-5 md:w-5 \" />;\n+      case 'ipl':\n+        return <FaExchangeAlt  className=\"text-green-700  h-3 w-3 md:h-4 md:w-4 \" />;\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const getTextColor = (type) => {\n+    switch (type) {\n+      case 'income':\n+        return \"text-blue-700\";\n+      case 'expense':\n+        return \"text-red-700\";\n+      case 'ipl':\n+        return \"text-green-700\";\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const handlePaymentClick = () => {\n+    setCurrentTransactionType('ipl');\n+    setIsDrawerOpen(true);\n+  };\n+\n+  const handleIncomeClick = () => {\n+    setCurrentTransactionType('income');\n+    setIsDrawerOpen(true);\n+  };\n+\n+  const handleExpenseClick = () => {\n+    setCurrentTransactionType('expense');\n+    setIsDrawerOpen(true);\n+  };\n+\n+  const handleDrawerSubmit = async (transactionData) => {\n+    try {\n+      const response = await axios.post(\n+        `${process.env.NEXT_PUBLIC_API_URL}/transactions/create`, \n+        transactionData, // Hanya data yang dikirim dalam body\n+        {\n+          headers: {\n+            Authorization: `Bearer ${session.accessToken}`, // Tempatkan headers di opsi konfigurasi\n+            'Content-Type': 'application/json',\n+          },\n+        }\n+      );\n+      setAlertType('success');\n+      setAlertMessage('Transaksi berhasil ditambahkan');\n+      setShowAlert(true);\n+     // alert('Transaksi berhasil ditambahkan');\n+      // Refresh data atau navigasi sesuai kebutuhan\n+      fetchTransactions();\n+    } catch (error) {\n+      setAlertType('failure');\n+      setAlertMessage('Gagal menambahkan transaksi');\n+      setShowAlert(true);\n+      console.error('Error creating transaction:', error);\n+    }\n+  };\n+  \n+  const handleAlertDismiss = () => {\n+    setShowAlert(false);\n+  };\n+\n+  if (loading) {\n+    return <Spinner />;\n+  }\n+\n+ // console.log(transactions)\n+\n+  return (\n+    <>\n+   \n+    <Header toggleSidebar={toggleSidebar}/>\n+    <main className='max-w-screen-xl mx-auto'>\n+      <div className='w-full'>\n+        <SideMenu isOpen={isSidebarOpen}/>\n+        <section className='mt-14 px-5 py-5 md:px-8 sm:ml-64'>\n+        {showAlert && (\n+            <Alert className='' color={alertType === 'success' ? 'success' : 'failure'} onDismiss={handleAlertDismiss}>\n+                <span className=\"font-medium\">{alertMessage}</span>\n+            </Alert>\n+        )}\n+          <h1 className='text-xl mb-4 font-semibold text-gray-900 sm:text-2xl dark:text-white'>Data Transaksi</h1>\n+\n+          <Card className='w-full mb-10'>\n+            <h3 className='font-semibold mb-3'>Buat Transaksi Baru</h3>\n+              <div className='flex flex-wrap gap-2'>\n+              <Button size=\"sm\" color=\"success\" onClick={handlePaymentClick}>\n+                <FaExchangeAlt  className=\"mr-2 h-5 w-5\" />\n+                IPL\n+              </Button>\n+\n+              <Button size=\"sm\" color=\"blue\" onClick={handleIncomeClick}>\n+                <FaRegArrowAltCircleDown  className=\"mr-2 h-5 w-5\" />\n+                Masuk\n+              </Button>\n+              <Button size=\"sm\" color=\"failure\" onClick={handleExpenseClick}>\n+                Keluar\n+                <FaRegArrowAltCircleUp  className=\"ml-2 h-5 w-5\" />\n+              </Button>\n+              </div>\n+          </Card>\n+\n+          <TransactionDrawer\n+            isOpen={isDrawerOpen}\n+            onClose={() => setIsDrawerOpen(false)}\n+            onSubmit={handleDrawerSubmit}\n+            transactionType={currentTransactionType}\n+          />\n+\n+          <div className=\"max-w-md mb-4 flex\">\n+\n+            <TextInput \n+              name=\"name\"\n+              placeholder=\"Cari\"\n+              value={searchTerm}\n+              onChange={handleSearchChange}\n+              className=\"mr-2 w-3/5\"\n+              icon={HiOutlineSearch} \n+            />\n+\n+            <FilterTransactions className=\"w-2/5\" setTransactions={setTransactions} initialTransaction={reTransactions} />\n+\n+          </div>\n+\n+          <div className='overflow-x-auto'>\n+            <Table hoverable>\n+              <Table.Head>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 w-3/4'>Keterangan</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tanggal</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Nominal</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tipe</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Status</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>\n+                    <span className=\"sr-only\">Edit</span>\n+                </Table.HeadCell>\n+              </Table.Head>\n+              <Table.Body className=\"divide-y\">\n+                \n+                {currentPageData.map((transaction, index) => ( \n+                  <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n+                    <Table.Cell className={`py-2 px-2 md:py-3 md:px-3 ${getTextColor(transaction.transaction_type)}`}>\n+                      <span className='flex items-start content-start'>\n+                        <span>{getTypeIcon(transaction.transaction_type)} </span>\n+                        <span className=\"ml-2\">{transaction.description}</span> \n+                      </span>\n+                    </Table.Cell>\n+                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}</Table.Cell>\n+                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{formatCurrency(transaction.amount)}</Table.Cell>\n+                    \n+                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n+                      <span className='flex items-center'>\n+                        {getStatusIcon(transaction.payment_type)} \n+                      </span>\n+                    </Table.Cell>\n+                    <Table.Cell className={`items-start content-center py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n+                      <span className='flex items-center'>\n+                        {getStatusIcon(transaction.status)} \n+                      </span>\n+                    </Table.Cell>\n+                    <Table.Cell className='py-2 px-2 md:py-3 md:px-3 text-xs md:text-base'>\n+                      <Dropdown  className=\"relative z-10\" align=\"right\" label=\"\" renderTrigger={() => <span><FaEllipsisH  className=\"h-4 w-4\" /></span>}>\n+                        <Dropdown.Item>Edit</Dropdown.Item>\n+                        <Dropdown.Item>View</Dropdown.Item>\n+                        <Dropdown.Item>Delete</Dropdown.Item>\n+                      </Dropdown>\n+\n+                    </Table.Cell>\n+                </Table.Row>\n+\n+                ))}\n+              </Table.Body>\n+            </Table>\n+          </div>\n+          <nav className='py-6'>\n+          <ReactPaginate\n+                previousLabel={'Previous'}\n+                nextLabel={'Next'}\n+                breakLabel={'...'}\n+                pageCount={Math.ceil(filteredTransactions.length / ITEMS_PER_PAGE)}\n+                marginPagesDisplayed={2}\n+                pageRangeDisplayed={5}\n+                onPageChange={handlePageClick}\n+                containerClassName={'pagination flex justify-center -space-x-px text-sm'}\n+                pageClassName={'page-item'}\n+                pageLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                previousClassName={'page-item'}\n+                previousLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                nextClassName={'page-item'}\n+                nextLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                breakClassName={'page-item'}\n+                breakLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                activeClassName={'active'}\n+                activeLinkClassName={'bg-gray-300'}\n+            />\n+          </nav>\n+\n+        </section>\n+\n+      </div>\n+      \n+      \n+    </main>\n+    </>\n+  );\n+}\n+\n+export const getServerSideProps = async (context) => {\n+  const session = await getSession(context);\n+  \n+  if (!session) {\n+      return {\n+          redirect: {\n+              destination: '/',\n+              permanent: false,\n+          },\n+      };\n+  }\n+\n+  try {\n+      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n+          headers: {\n+              Authorization: `Bearer ${session.accessToken}`,\n+          },\n+      });\n+      return {\n+          props: {\n+            initialTransaction: res.data,\n+          },\n+      };\n+  } catch (error) {\n+      console.error('Error fetching houses data:', error);\n+      return {\n+          props: {\n+            initialTransaction: [],\n+          },\n+      };\n+  }\n+};\n+\n+export default Transaction;\n"
                },
                {
                    "date": 1722400080903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,359 @@\n+// pages/home.js\n+import { getSession, useSession } from 'next-auth/react';\n+import { useEffect,useState } from 'react';\n+import axios from 'axios';\n+import { useRequireAuth } from '../../utils/authUtils'; \n+import ReactPaginate from 'react-paginate';\n+\n+import Header from '../../components/Header';\n+import SideMenu from '../../components/dashboard/Sidebar';\n+import TransactionDrawer from '../../components/dashboard/TransactionDrawer';\n+import Spinner from '../../components/Spinner';\n+import { Card, Button,TextInput,Drawer,Select, Table,Dropdown, Alert  } from \"flowbite-react\";\n+import { HiOutlineSearch } from \"react-icons/hi\";\n+import {  FaCheckCircle, FaTimesCircle, FaHourglassHalf } from 'react-icons/fa';\n+import { FaRegArrowAltCircleDown } from \"react-icons/fa\";\n+import { FaRegArrowAltCircleUp } from \"react-icons/fa\";\n+import { FaEllipsisH } from \"react-icons/fa\";\n+import { FaExchangeAlt } from \"react-icons/fa\";\n+import FilterTransactions from '../../components/FilterTransactions';\n+import moment from 'moment';\n+import 'moment/locale/id';\n+moment.locale('id');\n+\n+const ITEMS_PER_PAGE = 15;\n+\n+\n+const Transaction = ({ initialTransaction }) =>  {\n+  const { useAuthRedirect } = useRequireAuth(['admin', 'editor', 'superadmin']);\n+  useAuthRedirect();\n+  const [transactions, setTransactions] = useState([initialTransaction]);\n+  const [reTransactions, setReTransactions] = useState([initialTransaction])\n+  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n+  const [loading, setLoading] = useState(true);\n+  const { data: session, status } = useSession();\n+  const [searchTerm, setSearchTerm] = useState('');\n+  const [currentPage, setCurrentPage] = useState(0);\n+\n+  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n+  const [currentTransactionType, setCurrentTransactionType] = useState('');\n+\n+  const [showAlert, setShowAlert] = useState(false);\n+  const [alertMessage, setAlertMessage] = useState('');\n+  const [alertType, setAlertType] = useState('success');\n+  \n+  \n+\n+  const toggleSidebar = () => {\n+    setIsSidebarOpen(!isSidebarOpen);\n+  };\n+\n+  const formatCurrency = (amount) => {\n+    return new Intl.NumberFormat('id-ID', {\n+        style: 'currency',\n+        currency: 'IDR',\n+        minimumFractionDigits: 0,\n+    }).format(amount);\n+  };\n+\n+  const fetchTransactions = async () => {\n+    try {\n+        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n+            headers: {\n+              Authorization: `Bearer ${session.accessToken}`,\n+            },\n+        });\n+        setTransactions(res.data.data);\n+        setReTransactions(res.data.data);\n+        setLoading(false);\n+    } catch (error) {\n+        console.error('Error fetching houses data:', error);\n+        setLoading(false);\n+    }\n+ };\n+\n+  useEffect(() => {\n+    if (session) {\n+        fetchTransactions();\n+    }\n+\n+  }, [session, status]);\n+\n+  const handleSearchChange = (event) => {\n+    setSearchTerm(event.target.value);\n+  };\n+\n+  const filteredTransactions = transactions.filter(transaction => \n+    (transaction.description && transaction.description.toLowerCase().includes(searchTerm.toLowerCase()))\n+  );\n+\n+  const offset = currentPage * ITEMS_PER_PAGE;\n+  const currentPageData = filteredTransactions.slice(offset, offset + ITEMS_PER_PAGE);\n+\n+  const handlePageClick = (data) => {\n+    setCurrentPage(data.selected);\n+  };\n+\n+\n+  const getStatusIcon = (status) => {\n+    switch (status) {\n+      case 'berhasil':\n+        return <FaCheckCircle className=\"text-green-500\" />;\n+      case 'gagal':\n+        return <FaTimesCircle className=\"text-red-500\" />;\n+      case 'sedang dicek':\n+        return <FaHourglassHalf className=\"text-yellow-500\" />;\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const getTypeIcon = (type) => {\n+    switch (type) {\n+      case 'income':\n+        return <FaRegArrowAltCircleDown  className=\"text-blue-700 h-4 w-4 md:h-5 md:w-5 \" />;\n+      case 'expense':\n+        return <FaRegArrowAltCircleUp  className=\"text-red-700 h-4 w-4 md:h-5 md:w-5 \" />;\n+      case 'ipl':\n+        return <FaExchangeAlt  className=\"text-green-700  h-3 w-3 md:h-4 md:w-4 \" />;\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const getTextColor = (type) => {\n+    switch (type) {\n+      case 'income':\n+        return \"text-blue-700\";\n+      case 'expense':\n+        return \"text-red-700\";\n+      case 'ipl':\n+        return \"text-green-700\";\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const handlePaymentClick = () => {\n+    setCurrentTransactionType('ipl');\n+    setIsDrawerOpen(true);\n+  };\n+\n+  const handleIncomeClick = () => {\n+    setCurrentTransactionType('income');\n+    setIsDrawerOpen(true);\n+  };\n+\n+  const handleExpenseClick = () => {\n+    setCurrentTransactionType('expense');\n+    setIsDrawerOpen(true);\n+  };\n+\n+  const handleDrawerSubmit = async (transactionData) => {\n+    try {\n+      const response = await axios.post(\n+        `${process.env.NEXT_PUBLIC_API_URL}/transactions/create`, \n+        transactionData, // Hanya data yang dikirim dalam body\n+        {\n+          headers: {\n+            Authorization: `Bearer ${session.accessToken}`, // Tempatkan headers di opsi konfigurasi\n+            'Content-Type': 'application/json',\n+          },\n+        }\n+      );\n+      setAlertType('success');\n+      setAlertMessage('Transaksi berhasil ditambahkan');\n+      setShowAlert(true);\n+     // alert('Transaksi berhasil ditambahkan');\n+      // Refresh data atau navigasi sesuai kebutuhan\n+      fetchTransactions();\n+    } catch (error) {\n+      setAlertType('failure');\n+      setAlertMessage('Gagal menambahkan transaksi');\n+      setShowAlert(true);\n+      console.error('Error creating transaction:', error);\n+    }\n+  };\n+  \n+  const handleAlertDismiss = () => {\n+    setShowAlert(false);\n+  };\n+\n+  if (loading) {\n+    return <Spinner />;\n+  }\n+\n+ // console.log(transactions)\n+\n+  return (\n+    <>\n+   \n+    <Header toggleSidebar={toggleSidebar}/>\n+    <main className='max-w-screen-xl mx-auto'>\n+      <div className='w-full'>\n+        <SideMenu isOpen={isSidebarOpen}/>\n+        <section className='mt-14 px-5 py-5 md:px-8 sm:ml-64'>\n+        {showAlert && (\n+            <Alert className='' color={alertType === 'success' ? 'success' : 'failure'} onDismiss={handleAlertDismiss}>\n+                <span className=\"font-medium\">{alertMessage}</span>\n+            </Alert>\n+        )}\n+          <h1 className='text-xl mb-4 font-semibold text-gray-900 sm:text-2xl dark:text-white'>Data Transaksi</h1>\n+\n+          <Card className='w-full mb-10'>\n+            <h3 className='font-semibold mb-3'>Buat Transaksi Baru</h3>\n+              <div className='flex flex-wrap gap-2'>\n+              <Button size=\"sm\" color=\"success\" onClick={handlePaymentClick}>\n+                <FaExchangeAlt  className=\"mr-2 h-5 w-5\" />\n+                IPL\n+              </Button>\n+\n+              <Button size=\"sm\" color=\"blue\" onClick={handleIncomeClick}>\n+                <FaRegArrowAltCircleDown  className=\"mr-2 h-5 w-5\" />\n+                Masuk\n+              </Button>\n+              <Button size=\"sm\" color=\"failure\" onClick={handleExpenseClick}>\n+                Keluar\n+                <FaRegArrowAltCircleUp  className=\"ml-2 h-5 w-5\" />\n+              </Button>\n+              </div>\n+          </Card>\n+\n+          <TransactionDrawer\n+            isOpen={isDrawerOpen}\n+            onClose={() => setIsDrawerOpen(false)}\n+            onSubmit={handleDrawerSubmit}\n+            transactionType={currentTransactionType}\n+          />\n+\n+          <div className=\"max-w-md mb-4 flex\">\n+\n+            <TextInput \n+              name=\"name\"\n+              placeholder=\"Cari\"\n+              value={searchTerm}\n+              onChange={handleSearchChange}\n+              className=\"mr-2 w-3/5\"\n+              icon={HiOutlineSearch} \n+            />\n+\n+            <FilterTransactions className=\"w-2/5\" setTransactions={setTransactions} initialTransaction={reTransactions} />\n+\n+          </div>\n+\n+          <div className='overflow-x-auto'>\n+            <Table hoverable>\n+              <Table.Head>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 w-3/4'>Keterangan</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tanggal</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Nominal</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tipe</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Status</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>\n+                    <span className=\"sr-only\">Edit</span>\n+                </Table.HeadCell>\n+              </Table.Head>\n+              <Table.Body className=\"divide-y\">\n+                \n+                {currentPageData.map((transaction, index) => ( \n+                  <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n+                    <Table.Cell className={`py-2 px-2 md:py-3 md:px-3 ${getTextColor(transaction.transaction_type)}`}>\n+                      <span className='flex items-start content-start'>\n+                        <span>{getTypeIcon(transaction.transaction_type)} </span>\n+                        <span className=\"ml-2\">{transaction.description}</span> \n+                      </span>\n+                    </Table.Cell>\n+                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}</Table.Cell>\n+                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{formatCurrency(transaction.amount)}</Table.Cell>\n+                    \n+                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n+                      <span className='flex items-center'>\n+                        {getStatusIcon(transaction.payment_type)} \n+                      </span>\n+                    </Table.Cell>\n+                    <Table.Cell className={`items-center content-center py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n+                      <span className='flex items-center'>\n+                        {getStatusIcon(transaction.status)} \n+                      </span>\n+                    </Table.Cell>\n+                    <Table.Cell className='py-2 px-2 md:py-3 md:px-3 text-xs md:text-base'>\n+                      <Dropdown  className=\"relative z-10\" align=\"right\" label=\"\" renderTrigger={() => <span><FaEllipsisH  className=\"h-4 w-4\" /></span>}>\n+                        <Dropdown.Item>Edit</Dropdown.Item>\n+                        <Dropdown.Item>View</Dropdown.Item>\n+                        <Dropdown.Item>Delete</Dropdown.Item>\n+                      </Dropdown>\n+\n+                    </Table.Cell>\n+                </Table.Row>\n+\n+                ))}\n+              </Table.Body>\n+            </Table>\n+          </div>\n+          <nav className='py-6'>\n+          <ReactPaginate\n+                previousLabel={'Previous'}\n+                nextLabel={'Next'}\n+                breakLabel={'...'}\n+                pageCount={Math.ceil(filteredTransactions.length / ITEMS_PER_PAGE)}\n+                marginPagesDisplayed={2}\n+                pageRangeDisplayed={5}\n+                onPageChange={handlePageClick}\n+                containerClassName={'pagination flex justify-center -space-x-px text-sm'}\n+                pageClassName={'page-item'}\n+                pageLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                previousClassName={'page-item'}\n+                previousLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                nextClassName={'page-item'}\n+                nextLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                breakClassName={'page-item'}\n+                breakLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                activeClassName={'active'}\n+                activeLinkClassName={'bg-gray-300'}\n+            />\n+          </nav>\n+\n+        </section>\n+\n+      </div>\n+      \n+      \n+    </main>\n+    </>\n+  );\n+}\n+\n+export const getServerSideProps = async (context) => {\n+  const session = await getSession(context);\n+  \n+  if (!session) {\n+      return {\n+          redirect: {\n+              destination: '/',\n+              permanent: false,\n+          },\n+      };\n+  }\n+\n+  try {\n+      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n+          headers: {\n+              Authorization: `Bearer ${session.accessToken}`,\n+          },\n+      });\n+      return {\n+          props: {\n+            initialTransaction: res.data,\n+          },\n+      };\n+  } catch (error) {\n+      console.error('Error fetching houses data:', error);\n+      return {\n+          props: {\n+            initialTransaction: [],\n+          },\n+      };\n+  }\n+};\n+\n+export default Transaction;\n"
                },
                {
                    "date": 1722400089853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -270,9 +270,9 @@\n                       <span className='flex items-center'>\n                         {getStatusIcon(transaction.payment_type)} \n                       </span>\n                     </Table.Cell>\n-                    <Table.Cell className={`items-center content-center py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n+                    <Table.Cell className={`items-center flex content-center py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n                       <span className='flex items-center'>\n                         {getStatusIcon(transaction.status)} \n                       </span>\n                     </Table.Cell>\n@@ -356,722 +356,4 @@\n   }\n };\n \n export default Transaction;\n-// pages/home.js\n-import { getSession, useSession } from 'next-auth/react';\n-import { useEffect,useState } from 'react';\n-import axios from 'axios';\n-import { useRequireAuth } from '../../utils/authUtils'; \n-import ReactPaginate from 'react-paginate';\n-\n-import Header from '../../components/Header';\n-import SideMenu from '../../components/dashboard/Sidebar';\n-import TransactionDrawer from '../../components/dashboard/TransactionDrawer';\n-import Spinner from '../../components/Spinner';\n-import { Card, Button,TextInput,Drawer,Select, Table,Dropdown, Alert  } from \"flowbite-react\";\n-import { HiOutlineSearch } from \"react-icons/hi\";\n-import {  FaCheckCircle, FaTimesCircle, FaHourglassHalf } from 'react-icons/fa';\n-import { FaRegArrowAltCircleDown } from \"react-icons/fa\";\n-import { FaRegArrowAltCircleUp } from \"react-icons/fa\";\n-import { FaEllipsisH } from \"react-icons/fa\";\n-import { FaExchangeAlt } from \"react-icons/fa\";\n-import FilterTransactions from '../../components/FilterTransactions';\n-import moment from 'moment';\n-import 'moment/locale/id';\n-moment.locale('id');\n-\n-const ITEMS_PER_PAGE = 15;\n-\n-\n-const Transaction = ({ initialTransaction }) =>  {\n-  const { useAuthRedirect } = useRequireAuth(['admin', 'editor', 'superadmin']);\n-  useAuthRedirect();\n-  const [transactions, setTransactions] = useState([initialTransaction]);\n-  const [reTransactions, setReTransactions] = useState([initialTransaction])\n-  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n-  const [loading, setLoading] = useState(true);\n-  const { data: session, status } = useSession();\n-  const [searchTerm, setSearchTerm] = useState('');\n-  const [currentPage, setCurrentPage] = useState(0);\n-\n-  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n-  const [currentTransactionType, setCurrentTransactionType] = useState('');\n-\n-  const [showAlert, setShowAlert] = useState(false);\n-  const [alertMessage, setAlertMessage] = useState('');\n-  const [alertType, setAlertType] = useState('success');\n-  \n-  \n-\n-  const toggleSidebar = () => {\n-    setIsSidebarOpen(!isSidebarOpen);\n-  };\n-\n-  const formatCurrency = (amount) => {\n-    return new Intl.NumberFormat('id-ID', {\n-        style: 'currency',\n-        currency: 'IDR',\n-        minimumFractionDigits: 0,\n-    }).format(amount);\n-  };\n-\n-  const fetchTransactions = async () => {\n-    try {\n-        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n-            headers: {\n-              Authorization: `Bearer ${session.accessToken}`,\n-            },\n-        });\n-        setTransactions(res.data.data);\n-        setReTransactions(res.data.data);\n-        setLoading(false);\n-    } catch (error) {\n-        console.error('Error fetching houses data:', error);\n-        setLoading(false);\n-    }\n- };\n-\n-  useEffect(() => {\n-    if (session) {\n-        fetchTransactions();\n-    }\n-\n-  }, [session, status]);\n-\n-  const handleSearchChange = (event) => {\n-    setSearchTerm(event.target.value);\n-  };\n-\n-  const filteredTransactions = transactions.filter(transaction => \n-    (transaction.description && transaction.description.toLowerCase().includes(searchTerm.toLowerCase()))\n-  );\n-\n-  const offset = currentPage * ITEMS_PER_PAGE;\n-  const currentPageData = filteredTransactions.slice(offset, offset + ITEMS_PER_PAGE);\n-\n-  const handlePageClick = (data) => {\n-    setCurrentPage(data.selected);\n-  };\n-\n-\n-  const getStatusIcon = (status) => {\n-    switch (status) {\n-      case 'berhasil':\n-        return <FaCheckCircle className=\"text-green-500\" />;\n-      case 'gagal':\n-        return <FaTimesCircle className=\"text-red-500\" />;\n-      case 'sedang dicek':\n-        return <FaHourglassHalf className=\"text-yellow-500\" />;\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const getTypeIcon = (type) => {\n-    switch (type) {\n-      case 'income':\n-        return <FaRegArrowAltCircleDown  className=\"text-blue-700 h-4 w-4 md:h-5 md:w-5 \" />;\n-      case 'expense':\n-        return <FaRegArrowAltCircleUp  className=\"text-red-700 h-4 w-4 md:h-5 md:w-5 \" />;\n-      case 'ipl':\n-        return <FaExchangeAlt  className=\"text-green-700  h-3 w-3 md:h-4 md:w-4 \" />;\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const getTextColor = (type) => {\n-    switch (type) {\n-      case 'income':\n-        return \"text-blue-700\";\n-      case 'expense':\n-        return \"text-red-700\";\n-      case 'ipl':\n-        return \"text-green-700\";\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const handlePaymentClick = () => {\n-    setCurrentTransactionType('ipl');\n-    setIsDrawerOpen(true);\n-  };\n-\n-  const handleIncomeClick = () => {\n-    setCurrentTransactionType('income');\n-    setIsDrawerOpen(true);\n-  };\n-\n-  const handleExpenseClick = () => {\n-    setCurrentTransactionType('expense');\n-    setIsDrawerOpen(true);\n-  };\n-\n-  const handleDrawerSubmit = async (transactionData) => {\n-    try {\n-      const response = await axios.post(\n-        `${process.env.NEXT_PUBLIC_API_URL}/transactions/create`, \n-        transactionData, // Hanya data yang dikirim dalam body\n-        {\n-          headers: {\n-            Authorization: `Bearer ${session.accessToken}`, // Tempatkan headers di opsi konfigurasi\n-            'Content-Type': 'application/json',\n-          },\n-        }\n-      );\n-      setAlertType('success');\n-      setAlertMessage('Transaksi berhasil ditambahkan');\n-      setShowAlert(true);\n-     // alert('Transaksi berhasil ditambahkan');\n-      // Refresh data atau navigasi sesuai kebutuhan\n-      fetchTransactions();\n-    } catch (error) {\n-      setAlertType('failure');\n-      setAlertMessage('Gagal menambahkan transaksi');\n-      setShowAlert(true);\n-      console.error('Error creating transaction:', error);\n-    }\n-  };\n-  \n-  const handleAlertDismiss = () => {\n-    setShowAlert(false);\n-  };\n-\n-  if (loading) {\n-    return <Spinner />;\n-  }\n-\n- // console.log(transactions)\n-\n-  return (\n-    <>\n-   \n-    <Header toggleSidebar={toggleSidebar}/>\n-    <main className='max-w-screen-xl mx-auto'>\n-      <div className='w-full'>\n-        <SideMenu isOpen={isSidebarOpen}/>\n-        <section className='mt-14 px-5 py-5 md:px-8 sm:ml-64'>\n-        {showAlert && (\n-            <Alert className='' color={alertType === 'success' ? 'success' : 'failure'} onDismiss={handleAlertDismiss}>\n-                <span className=\"font-medium\">{alertMessage}</span>\n-            </Alert>\n-        )}\n-          <h1 className='text-xl mb-4 font-semibold text-gray-900 sm:text-2xl dark:text-white'>Data Transaksi</h1>\n-\n-          <Card className='w-full mb-10'>\n-            <h3 className='font-semibold mb-3'>Buat Transaksi Baru</h3>\n-              <div className='flex flex-wrap gap-2'>\n-              <Button size=\"sm\" color=\"success\" onClick={handlePaymentClick}>\n-                <FaExchangeAlt  className=\"mr-2 h-5 w-5\" />\n-                IPL\n-              </Button>\n-\n-              <Button size=\"sm\" color=\"blue\" onClick={handleIncomeClick}>\n-                <FaRegArrowAltCircleDown  className=\"mr-2 h-5 w-5\" />\n-                Masuk\n-              </Button>\n-              <Button size=\"sm\" color=\"failure\" onClick={handleExpenseClick}>\n-                Keluar\n-                <FaRegArrowAltCircleUp  className=\"ml-2 h-5 w-5\" />\n-              </Button>\n-              </div>\n-          </Card>\n-\n-          <TransactionDrawer\n-            isOpen={isDrawerOpen}\n-            onClose={() => setIsDrawerOpen(false)}\n-            onSubmit={handleDrawerSubmit}\n-            transactionType={currentTransactionType}\n-          />\n-\n-          <div className=\"max-w-md mb-4 flex\">\n-\n-            <TextInput \n-              name=\"name\"\n-              placeholder=\"Cari\"\n-              value={searchTerm}\n-              onChange={handleSearchChange}\n-              className=\"mr-2 w-3/5\"\n-              icon={HiOutlineSearch} \n-            />\n-\n-            <FilterTransactions className=\"w-2/5\" setTransactions={setTransactions} initialTransaction={reTransactions} />\n-\n-          </div>\n-\n-          <div className='overflow-x-auto'>\n-            <Table hoverable>\n-              <Table.Head>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 w-3/4'>Keterangan</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tanggal</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Nominal</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tipe</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Status</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>\n-                    <span className=\"sr-only\">Edit</span>\n-                </Table.HeadCell>\n-              </Table.Head>\n-              <Table.Body className=\"divide-y\">\n-                \n-                {currentPageData.map((transaction, index) => ( \n-                  <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-                    <Table.Cell className={`py-2 px-2 md:py-3 md:px-3 ${getTextColor(transaction.transaction_type)}`}>\n-                      <span className='flex items-start content-start'>\n-                        <span>{getTypeIcon(transaction.transaction_type)} </span>\n-                        <span className=\"ml-2\">{transaction.description}</span> \n-                      </span>\n-                    </Table.Cell>\n-                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}</Table.Cell>\n-                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{formatCurrency(transaction.amount)}</Table.Cell>\n-                    \n-                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n-                      <span className='flex items-center'>\n-                        {getStatusIcon(transaction.payment_type)} \n-                      </span>\n-                    </Table.Cell>\n-                    <Table.Cell className={`items-start content-center py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n-                      <span className='flex items-center'>\n-                        {getStatusIcon(transaction.status)} \n-                      </span>\n-                    </Table.Cell>\n-                    <Table.Cell className='py-2 px-2 md:py-3 md:px-3 text-xs md:text-base'>\n-                      <Dropdown  className=\"relative z-10\" align=\"right\" label=\"\" renderTrigger={() => <span><FaEllipsisH  className=\"h-4 w-4\" /></span>}>\n-                        <Dropdown.Item>Edit</Dropdown.Item>\n-                        <Dropdown.Item>View</Dropdown.Item>\n-                        <Dropdown.Item>Delete</Dropdown.Item>\n-                      </Dropdown>\n-\n-                    </Table.Cell>\n-                </Table.Row>\n-\n-                ))}\n-              </Table.Body>\n-            </Table>\n-          </div>\n-          <nav className='py-6'>\n-          <ReactPaginate\n-                previousLabel={'Previous'}\n-                nextLabel={'Next'}\n-                breakLabel={'...'}\n-                pageCount={Math.ceil(filteredTransactions.length / ITEMS_PER_PAGE)}\n-                marginPagesDisplayed={2}\n-                pageRangeDisplayed={5}\n-                onPageChange={handlePageClick}\n-                containerClassName={'pagination flex justify-center -space-x-px text-sm'}\n-                pageClassName={'page-item'}\n-                pageLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                previousClassName={'page-item'}\n-                previousLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                nextClassName={'page-item'}\n-                nextLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                breakClassName={'page-item'}\n-                breakLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                activeClassName={'active'}\n-                activeLinkClassName={'bg-gray-300'}\n-            />\n-          </nav>\n-\n-        </section>\n-\n-      </div>\n-      \n-      \n-    </main>\n-    </>\n-  );\n-}\n-\n-export const getServerSideProps = async (context) => {\n-  const session = await getSession(context);\n-  \n-  if (!session) {\n-      return {\n-          redirect: {\n-              destination: '/',\n-              permanent: false,\n-          },\n-      };\n-  }\n-\n-  try {\n-      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n-          headers: {\n-              Authorization: `Bearer ${session.accessToken}`,\n-          },\n-      });\n-      return {\n-          props: {\n-            initialTransaction: res.data,\n-          },\n-      };\n-  } catch (error) {\n-      console.error('Error fetching houses data:', error);\n-      return {\n-          props: {\n-            initialTransaction: [],\n-          },\n-      };\n-  }\n-};\n-\n-export default Transaction;\n-// pages/home.js\n-import { getSession, useSession } from 'next-auth/react';\n-import { useEffect,useState } from 'react';\n-import axios from 'axios';\n-import { useRequireAuth } from '../../utils/authUtils'; \n-import ReactPaginate from 'react-paginate';\n-\n-import Header from '../../components/Header';\n-import SideMenu from '../../components/dashboard/Sidebar';\n-import TransactionDrawer from '../../components/dashboard/TransactionDrawer';\n-import Spinner from '../../components/Spinner';\n-import { Card, Button,TextInput,Drawer,Select, Table,Dropdown, Alert  } from \"flowbite-react\";\n-import { HiOutlineSearch } from \"react-icons/hi\";\n-import {  FaCheckCircle, FaTimesCircle, FaHourglassHalf } from 'react-icons/fa';\n-import { FaRegArrowAltCircleDown } from \"react-icons/fa\";\n-import { FaRegArrowAltCircleUp } from \"react-icons/fa\";\n-import { FaEllipsisH } from \"react-icons/fa\";\n-import { FaExchangeAlt } from \"react-icons/fa\";\n-import FilterTransactions from '../../components/FilterTransactions';\n-import moment from 'moment';\n-import 'moment/locale/id';\n-moment.locale('id');\n-\n-const ITEMS_PER_PAGE = 15;\n-\n-\n-const Transaction = ({ initialTransaction }) =>  {\n-  const { useAuthRedirect } = useRequireAuth(['admin', 'editor', 'superadmin']);\n-  useAuthRedirect();\n-  const [transactions, setTransactions] = useState([initialTransaction]);\n-  const [reTransactions, setReTransactions] = useState([initialTransaction])\n-  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n-  const [loading, setLoading] = useState(true);\n-  const { data: session, status } = useSession();\n-  const [searchTerm, setSearchTerm] = useState('');\n-  const [currentPage, setCurrentPage] = useState(0);\n-\n-  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n-  const [currentTransactionType, setCurrentTransactionType] = useState('');\n-\n-  const [showAlert, setShowAlert] = useState(false);\n-  const [alertMessage, setAlertMessage] = useState('');\n-  const [alertType, setAlertType] = useState('success');\n-  \n-  \n-\n-  const toggleSidebar = () => {\n-    setIsSidebarOpen(!isSidebarOpen);\n-  };\n-\n-  const formatCurrency = (amount) => {\n-    return new Intl.NumberFormat('id-ID', {\n-        style: 'currency',\n-        currency: 'IDR',\n-        minimumFractionDigits: 0,\n-    }).format(amount);\n-  };\n-\n-  const fetchTransactions = async () => {\n-    try {\n-        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n-            headers: {\n-              Authorization: `Bearer ${session.accessToken}`,\n-            },\n-        });\n-        setTransactions(res.data.data);\n-        setReTransactions(res.data.data);\n-        setLoading(false);\n-    } catch (error) {\n-        console.error('Error fetching houses data:', error);\n-        setLoading(false);\n-    }\n- };\n-\n-  useEffect(() => {\n-    if (session) {\n-        fetchTransactions();\n-    }\n-\n-  }, [session, status]);\n-\n-  const handleSearchChange = (event) => {\n-    setSearchTerm(event.target.value);\n-  };\n-\n-  const filteredTransactions = transactions.filter(transaction => \n-    (transaction.description && transaction.description.toLowerCase().includes(searchTerm.toLowerCase()))\n-  );\n-\n-  const offset = currentPage * ITEMS_PER_PAGE;\n-  const currentPageData = filteredTransactions.slice(offset, offset + ITEMS_PER_PAGE);\n-\n-  const handlePageClick = (data) => {\n-    setCurrentPage(data.selected);\n-  };\n-\n-\n-  const getStatusIcon = (status) => {\n-    switch (status) {\n-      case 'berhasil':\n-        return <FaCheckCircle className=\"text-green-500\" />;\n-      case 'gagal':\n-        return <FaTimesCircle className=\"text-red-500\" />;\n-      case 'sedang dicek':\n-        return <FaHourglassHalf className=\"text-yellow-500\" />;\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const getTypeIcon = (type) => {\n-    switch (type) {\n-      case 'income':\n-        return <FaRegArrowAltCircleDown  className=\"text-blue-700 h-4 w-4 md:h-5 md:w-5 \" />;\n-      case 'expense':\n-        return <FaRegArrowAltCircleUp  className=\"text-red-700 h-4 w-4 md:h-5 md:w-5 \" />;\n-      case 'ipl':\n-        return <FaExchangeAlt  className=\"text-green-700  h-3 w-3 md:h-4 md:w-4 \" />;\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const getTextColor = (type) => {\n-    switch (type) {\n-      case 'income':\n-        return \"text-blue-700\";\n-      case 'expense':\n-        return \"text-red-700\";\n-      case 'ipl':\n-        return \"text-green-700\";\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const handlePaymentClick = () => {\n-    setCurrentTransactionType('ipl');\n-    setIsDrawerOpen(true);\n-  };\n-\n-  const handleIncomeClick = () => {\n-    setCurrentTransactionType('income');\n-    setIsDrawerOpen(true);\n-  };\n-\n-  const handleExpenseClick = () => {\n-    setCurrentTransactionType('expense');\n-    setIsDrawerOpen(true);\n-  };\n-\n-  const handleDrawerSubmit = async (transactionData) => {\n-    try {\n-      const response = await axios.post(\n-        `${process.env.NEXT_PUBLIC_API_URL}/transactions/create`, \n-        transactionData, // Hanya data yang dikirim dalam body\n-        {\n-          headers: {\n-            Authorization: `Bearer ${session.accessToken}`, // Tempatkan headers di opsi konfigurasi\n-            'Content-Type': 'application/json',\n-          },\n-        }\n-      );\n-      setAlertType('success');\n-      setAlertMessage('Transaksi berhasil ditambahkan');\n-      setShowAlert(true);\n-     // alert('Transaksi berhasil ditambahkan');\n-      // Refresh data atau navigasi sesuai kebutuhan\n-      fetchTransactions();\n-    } catch (error) {\n-      setAlertType('failure');\n-      setAlertMessage('Gagal menambahkan transaksi');\n-      setShowAlert(true);\n-      console.error('Error creating transaction:', error);\n-    }\n-  };\n-  \n-  const handleAlertDismiss = () => {\n-    setShowAlert(false);\n-  };\n-\n-  if (loading) {\n-    return <Spinner />;\n-  }\n-\n- // console.log(transactions)\n-\n-  return (\n-    <>\n-   \n-    <Header toggleSidebar={toggleSidebar}/>\n-    <main className='max-w-screen-xl mx-auto'>\n-      <div className='w-full'>\n-        <SideMenu isOpen={isSidebarOpen}/>\n-        <section className='mt-14 px-5 py-5 md:px-8 sm:ml-64'>\n-        {showAlert && (\n-            <Alert className='' color={alertType === 'success' ? 'success' : 'failure'} onDismiss={handleAlertDismiss}>\n-                <span className=\"font-medium\">{alertMessage}</span>\n-            </Alert>\n-        )}\n-          <h1 className='text-xl mb-4 font-semibold text-gray-900 sm:text-2xl dark:text-white'>Data Transaksi</h1>\n-\n-          <Card className='w-full mb-10'>\n-            <h3 className='font-semibold mb-3'>Buat Transaksi Baru</h3>\n-              <div className='flex flex-wrap gap-2'>\n-              <Button size=\"sm\" color=\"success\" onClick={handlePaymentClick}>\n-                <FaExchangeAlt  className=\"mr-2 h-5 w-5\" />\n-                IPL\n-              </Button>\n-\n-              <Button size=\"sm\" color=\"blue\" onClick={handleIncomeClick}>\n-                <FaRegArrowAltCircleDown  className=\"mr-2 h-5 w-5\" />\n-                Masuk\n-              </Button>\n-              <Button size=\"sm\" color=\"failure\" onClick={handleExpenseClick}>\n-                Keluar\n-                <FaRegArrowAltCircleUp  className=\"ml-2 h-5 w-5\" />\n-              </Button>\n-              </div>\n-          </Card>\n-\n-          <TransactionDrawer\n-            isOpen={isDrawerOpen}\n-            onClose={() => setIsDrawerOpen(false)}\n-            onSubmit={handleDrawerSubmit}\n-            transactionType={currentTransactionType}\n-          />\n-\n-          <div className=\"max-w-md mb-4 flex\">\n-\n-            <TextInput \n-              name=\"name\"\n-              placeholder=\"Cari\"\n-              value={searchTerm}\n-              onChange={handleSearchChange}\n-              className=\"mr-2 w-3/5\"\n-              icon={HiOutlineSearch} \n-            />\n-\n-            <FilterTransactions className=\"w-2/5\" setTransactions={setTransactions} initialTransaction={reTransactions} />\n-\n-          </div>\n-\n-          <div className='overflow-x-auto'>\n-            <Table hoverable>\n-              <Table.Head>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 w-3/4'>Keterangan</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tanggal</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Nominal</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tipe</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Status</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>\n-                    <span className=\"sr-only\">Edit</span>\n-                </Table.HeadCell>\n-              </Table.Head>\n-              <Table.Body className=\"divide-y\">\n-                \n-                {currentPageData.map((transaction, index) => ( \n-                  <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-                    <Table.Cell className={`py-2 px-2 md:py-3 md:px-3 ${getTextColor(transaction.transaction_type)}`}>\n-                      <span className='flex items-start content-start'>\n-                        <span>{getTypeIcon(transaction.transaction_type)} </span>\n-                        <span className=\"ml-2\">{transaction.description}</span> \n-                      </span>\n-                    </Table.Cell>\n-                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}</Table.Cell>\n-                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{formatCurrency(transaction.amount)}</Table.Cell>\n-                    \n-                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n-                      <span className='flex items-center'>\n-                        {getStatusIcon(transaction.payment_type)} \n-                      </span>\n-                    </Table.Cell>\n-                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n-                      <span className='flex items-center'>\n-                        {getStatusIcon(transaction.status)} \n-                      </span>\n-                    </Table.Cell>\n-                    <Table.Cell className='py-2 px-2 md:py-3 md:px-3 text-xs md:text-base'>\n-                      <Dropdown  className=\"relative z-10\" align=\"right\" label=\"\" renderTrigger={() => <span><FaEllipsisH  className=\"h-4 w-4\" /></span>}>\n-                        <Dropdown.Item>Edit</Dropdown.Item>\n-                        <Dropdown.Item>View</Dropdown.Item>\n-                        <Dropdown.Item>Delete</Dropdown.Item>\n-                      </Dropdown>\n-\n-                    </Table.Cell>\n-                </Table.Row>\n-\n-                ))}\n-              </Table.Body>\n-            </Table>\n-          </div>\n-          <nav className='py-6'>\n-          <ReactPaginate\n-                previousLabel={'Previous'}\n-                nextLabel={'Next'}\n-                breakLabel={'...'}\n-                pageCount={Math.ceil(filteredTransactions.length / ITEMS_PER_PAGE)}\n-                marginPagesDisplayed={2}\n-                pageRangeDisplayed={5}\n-                onPageChange={handlePageClick}\n-                containerClassName={'pagination flex justify-center -space-x-px text-sm'}\n-                pageClassName={'page-item'}\n-                pageLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                previousClassName={'page-item'}\n-                previousLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                nextClassName={'page-item'}\n-                nextLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                breakClassName={'page-item'}\n-                breakLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                activeClassName={'active'}\n-                activeLinkClassName={'bg-gray-300'}\n-            />\n-          </nav>\n-\n-        </section>\n-\n-      </div>\n-      \n-      \n-    </main>\n-    </>\n-  );\n-}\n-\n-export const getServerSideProps = async (context) => {\n-  const session = await getSession(context);\n-  \n-  if (!session) {\n-      return {\n-          redirect: {\n-              destination: '/',\n-              permanent: false,\n-          },\n-      };\n-  }\n-\n-  try {\n-      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n-          headers: {\n-              Authorization: `Bearer ${session.accessToken}`,\n-          },\n-      });\n-      return {\n-          props: {\n-            initialTransaction: res.data,\n-          },\n-      };\n-  } catch (error) {\n-      console.error('Error fetching houses data:', error);\n-      return {\n-          props: {\n-            initialTransaction: [],\n-          },\n-      };\n-  }\n-};\n-\n-export default Transaction;\n"
                },
                {
                    "date": 1722400130145,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,359 @@\n+// pages/home.js\n+import { getSession, useSession } from 'next-auth/react';\n+import { useEffect,useState } from 'react';\n+import axios from 'axios';\n+import { useRequireAuth } from '../../utils/authUtils'; \n+import ReactPaginate from 'react-paginate';\n+\n+import Header from '../../components/Header';\n+import SideMenu from '../../components/dashboard/Sidebar';\n+import TransactionDrawer from '../../components/dashboard/TransactionDrawer';\n+import Spinner from '../../components/Spinner';\n+import { Card, Button,TextInput,Drawer,Select, Table,Dropdown, Alert  } from \"flowbite-react\";\n+import { HiOutlineSearch } from \"react-icons/hi\";\n+import {  FaCheckCircle, FaTimesCircle, FaHourglassHalf } from 'react-icons/fa';\n+import { FaRegArrowAltCircleDown } from \"react-icons/fa\";\n+import { FaRegArrowAltCircleUp } from \"react-icons/fa\";\n+import { FaEllipsisH } from \"react-icons/fa\";\n+import { FaExchangeAlt } from \"react-icons/fa\";\n+import FilterTransactions from '../../components/FilterTransactions';\n+import moment from 'moment';\n+import 'moment/locale/id';\n+moment.locale('id');\n+\n+const ITEMS_PER_PAGE = 15;\n+\n+\n+const Transaction = ({ initialTransaction }) =>  {\n+  const { useAuthRedirect } = useRequireAuth(['admin', 'editor', 'superadmin']);\n+  useAuthRedirect();\n+  const [transactions, setTransactions] = useState([initialTransaction]);\n+  const [reTransactions, setReTransactions] = useState([initialTransaction])\n+  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n+  const [loading, setLoading] = useState(true);\n+  const { data: session, status } = useSession();\n+  const [searchTerm, setSearchTerm] = useState('');\n+  const [currentPage, setCurrentPage] = useState(0);\n+\n+  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n+  const [currentTransactionType, setCurrentTransactionType] = useState('');\n+\n+  const [showAlert, setShowAlert] = useState(false);\n+  const [alertMessage, setAlertMessage] = useState('');\n+  const [alertType, setAlertType] = useState('success');\n+  \n+  \n+\n+  const toggleSidebar = () => {\n+    setIsSidebarOpen(!isSidebarOpen);\n+  };\n+\n+  const formatCurrency = (amount) => {\n+    return new Intl.NumberFormat('id-ID', {\n+        style: 'currency',\n+        currency: 'IDR',\n+        minimumFractionDigits: 0,\n+    }).format(amount);\n+  };\n+\n+  const fetchTransactions = async () => {\n+    try {\n+        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n+            headers: {\n+              Authorization: `Bearer ${session.accessToken}`,\n+            },\n+        });\n+        setTransactions(res.data.data);\n+        setReTransactions(res.data.data);\n+        setLoading(false);\n+    } catch (error) {\n+        console.error('Error fetching houses data:', error);\n+        setLoading(false);\n+    }\n+ };\n+\n+  useEffect(() => {\n+    if (session) {\n+        fetchTransactions();\n+    }\n+\n+  }, [session, status]);\n+\n+  const handleSearchChange = (event) => {\n+    setSearchTerm(event.target.value);\n+  };\n+\n+  const filteredTransactions = transactions.filter(transaction => \n+    (transaction.description && transaction.description.toLowerCase().includes(searchTerm.toLowerCase()))\n+  );\n+\n+  const offset = currentPage * ITEMS_PER_PAGE;\n+  const currentPageData = filteredTransactions.slice(offset, offset + ITEMS_PER_PAGE);\n+\n+  const handlePageClick = (data) => {\n+    setCurrentPage(data.selected);\n+  };\n+\n+\n+  const getStatusIcon = (status) => {\n+    switch (status) {\n+      case 'berhasil':\n+        return <FaCheckCircle className=\"text-green-500\" />;\n+      case 'gagal':\n+        return <FaTimesCircle className=\"text-red-500\" />;\n+      case 'sedang dicek':\n+        return <FaHourglassHalf className=\"text-yellow-500\" />;\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const getTypeIcon = (type) => {\n+    switch (type) {\n+      case 'income':\n+        return <FaRegArrowAltCircleDown  className=\"text-blue-700 h-4 w-4 md:h-5 md:w-5 \" />;\n+      case 'expense':\n+        return <FaRegArrowAltCircleUp  className=\"text-red-700 h-4 w-4 md:h-5 md:w-5 \" />;\n+      case 'ipl':\n+        return <FaExchangeAlt  className=\"text-green-700  h-3 w-3 md:h-4 md:w-4 \" />;\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const getTextColor = (type) => {\n+    switch (type) {\n+      case 'income':\n+        return \"text-blue-700\";\n+      case 'expense':\n+        return \"text-red-700\";\n+      case 'ipl':\n+        return \"text-green-700\";\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const handlePaymentClick = () => {\n+    setCurrentTransactionType('ipl');\n+    setIsDrawerOpen(true);\n+  };\n+\n+  const handleIncomeClick = () => {\n+    setCurrentTransactionType('income');\n+    setIsDrawerOpen(true);\n+  };\n+\n+  const handleExpenseClick = () => {\n+    setCurrentTransactionType('expense');\n+    setIsDrawerOpen(true);\n+  };\n+\n+  const handleDrawerSubmit = async (transactionData) => {\n+    try {\n+      const response = await axios.post(\n+        `${process.env.NEXT_PUBLIC_API_URL}/transactions/create`, \n+        transactionData, // Hanya data yang dikirim dalam body\n+        {\n+          headers: {\n+            Authorization: `Bearer ${session.accessToken}`, // Tempatkan headers di opsi konfigurasi\n+            'Content-Type': 'application/json',\n+          },\n+        }\n+      );\n+      setAlertType('success');\n+      setAlertMessage('Transaksi berhasil ditambahkan');\n+      setShowAlert(true);\n+     // alert('Transaksi berhasil ditambahkan');\n+      // Refresh data atau navigasi sesuai kebutuhan\n+      fetchTransactions();\n+    } catch (error) {\n+      setAlertType('failure');\n+      setAlertMessage('Gagal menambahkan transaksi');\n+      setShowAlert(true);\n+      console.error('Error creating transaction:', error);\n+    }\n+  };\n+  \n+  const handleAlertDismiss = () => {\n+    setShowAlert(false);\n+  };\n+\n+  if (loading) {\n+    return <Spinner />;\n+  }\n+\n+ // console.log(transactions)\n+\n+  return (\n+    <>\n+   \n+    <Header toggleSidebar={toggleSidebar}/>\n+    <main className='max-w-screen-xl mx-auto'>\n+      <div className='w-full'>\n+        <SideMenu isOpen={isSidebarOpen}/>\n+        <section className='mt-14 px-5 py-5 md:px-8 sm:ml-64'>\n+        {showAlert && (\n+            <Alert className='' color={alertType === 'success' ? 'success' : 'failure'} onDismiss={handleAlertDismiss}>\n+                <span className=\"font-medium\">{alertMessage}</span>\n+            </Alert>\n+        )}\n+          <h1 className='text-xl mb-4 font-semibold text-gray-900 sm:text-2xl dark:text-white'>Data Transaksi</h1>\n+\n+          <Card className='w-full mb-10'>\n+            <h3 className='font-semibold mb-3'>Buat Transaksi Baru</h3>\n+              <div className='flex flex-wrap gap-2'>\n+              <Button size=\"sm\" color=\"success\" onClick={handlePaymentClick}>\n+                <FaExchangeAlt  className=\"mr-2 h-5 w-5\" />\n+                IPL\n+              </Button>\n+\n+              <Button size=\"sm\" color=\"blue\" onClick={handleIncomeClick}>\n+                <FaRegArrowAltCircleDown  className=\"mr-2 h-5 w-5\" />\n+                Masuk\n+              </Button>\n+              <Button size=\"sm\" color=\"failure\" onClick={handleExpenseClick}>\n+                Keluar\n+                <FaRegArrowAltCircleUp  className=\"ml-2 h-5 w-5\" />\n+              </Button>\n+              </div>\n+          </Card>\n+\n+          <TransactionDrawer\n+            isOpen={isDrawerOpen}\n+            onClose={() => setIsDrawerOpen(false)}\n+            onSubmit={handleDrawerSubmit}\n+            transactionType={currentTransactionType}\n+          />\n+\n+          <div className=\"max-w-md mb-4 flex\">\n+\n+            <TextInput \n+              name=\"name\"\n+              placeholder=\"Cari\"\n+              value={searchTerm}\n+              onChange={handleSearchChange}\n+              className=\"mr-2 w-3/5\"\n+              icon={HiOutlineSearch} \n+            />\n+\n+            <FilterTransactions className=\"w-2/5\" setTransactions={setTransactions} initialTransaction={reTransactions} />\n+\n+          </div>\n+\n+          <div className='overflow-x-auto'>\n+            <Table hoverable>\n+              <Table.Head>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 w-3/4'>Keterangan</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tanggal</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Nominal</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tipe</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Status</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>\n+                    <span className=\"sr-only\">Edit</span>\n+                </Table.HeadCell>\n+              </Table.Head>\n+              <Table.Body className=\"divide-y\">\n+                \n+                {currentPageData.map((transaction, index) => ( \n+                  <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n+                    <Table.Cell className={`py-2 px-2 md:py-3 md:px-3 ${getTextColor(transaction.transaction_type)}`}>\n+                      <span className='flex items-start content-start'>\n+                        <span>{getTypeIcon(transaction.transaction_type)} </span>\n+                        <span className=\"ml-2\">{transaction.description}</span> \n+                      </span>\n+                    </Table.Cell>\n+                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}</Table.Cell>\n+                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{formatCurrency(transaction.amount)}</Table.Cell>\n+                    \n+                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n+                      <span className='flex items-center'>\n+                        {getStatusIcon(transaction.payment_type)} \n+                      </span>\n+                    </Table.Cell>\n+                    <Table.Cell className={`items-center flex justify-center content-center py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n+                      <span className='flex items-center'>\n+                        {getStatusIcon(transaction.status)} \n+                      </span>\n+                    </Table.Cell>\n+                    <Table.Cell className='py-2 px-2 md:py-3 md:px-3 text-xs md:text-base'>\n+                      <Dropdown  className=\"relative z-10\" align=\"right\" label=\"\" renderTrigger={() => <span><FaEllipsisH  className=\"h-4 w-4\" /></span>}>\n+                        <Dropdown.Item>Edit</Dropdown.Item>\n+                        <Dropdown.Item>View</Dropdown.Item>\n+                        <Dropdown.Item>Delete</Dropdown.Item>\n+                      </Dropdown>\n+\n+                    </Table.Cell>\n+                </Table.Row>\n+\n+                ))}\n+              </Table.Body>\n+            </Table>\n+          </div>\n+          <nav className='py-6'>\n+          <ReactPaginate\n+                previousLabel={'Previous'}\n+                nextLabel={'Next'}\n+                breakLabel={'...'}\n+                pageCount={Math.ceil(filteredTransactions.length / ITEMS_PER_PAGE)}\n+                marginPagesDisplayed={2}\n+                pageRangeDisplayed={5}\n+                onPageChange={handlePageClick}\n+                containerClassName={'pagination flex justify-center -space-x-px text-sm'}\n+                pageClassName={'page-item'}\n+                pageLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                previousClassName={'page-item'}\n+                previousLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                nextClassName={'page-item'}\n+                nextLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                breakClassName={'page-item'}\n+                breakLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                activeClassName={'active'}\n+                activeLinkClassName={'bg-gray-300'}\n+            />\n+          </nav>\n+\n+        </section>\n+\n+      </div>\n+      \n+      \n+    </main>\n+    </>\n+  );\n+}\n+\n+export const getServerSideProps = async (context) => {\n+  const session = await getSession(context);\n+  \n+  if (!session) {\n+      return {\n+          redirect: {\n+              destination: '/',\n+              permanent: false,\n+          },\n+      };\n+  }\n+\n+  try {\n+      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n+          headers: {\n+              Authorization: `Bearer ${session.accessToken}`,\n+          },\n+      });\n+      return {\n+          props: {\n+            initialTransaction: res.data,\n+          },\n+      };\n+  } catch (error) {\n+      console.error('Error fetching houses data:', error);\n+      return {\n+          props: {\n+            initialTransaction: [],\n+          },\n+      };\n+  }\n+};\n+\n+export default Transaction;\n"
                },
                {
                    "date": 1722400236617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n import TransactionDrawer from '../../components/dashboard/TransactionDrawer';\n import Spinner from '../../components/Spinner';\n import { Card, Button,TextInput,Drawer,Select, Table,Dropdown, Alert  } from \"flowbite-react\";\n import { HiOutlineSearch } from \"react-icons/hi\";\n-import {  FaCheckCircle, FaTimesCircle, FaHourglassHalf } from 'react-icons/fa';\n+import {  FaCheckCircle, FaTimesCircle, FaHourglassHalf,FaRegEdit } from 'react-icons/fa';\n import { FaRegArrowAltCircleDown } from \"react-icons/fa\";\n import { FaRegArrowAltCircleUp } from \"react-icons/fa\";\n import { FaEllipsisH } from \"react-icons/fa\";\n import { FaExchangeAlt } from \"react-icons/fa\";\n@@ -356,363 +356,4 @@\n   }\n };\n \n export default Transaction;\n-// pages/home.js\n-import { getSession, useSession } from 'next-auth/react';\n-import { useEffect,useState } from 'react';\n-import axios from 'axios';\n-import { useRequireAuth } from '../../utils/authUtils'; \n-import ReactPaginate from 'react-paginate';\n-\n-import Header from '../../components/Header';\n-import SideMenu from '../../components/dashboard/Sidebar';\n-import TransactionDrawer from '../../components/dashboard/TransactionDrawer';\n-import Spinner from '../../components/Spinner';\n-import { Card, Button,TextInput,Drawer,Select, Table,Dropdown, Alert  } from \"flowbite-react\";\n-import { HiOutlineSearch } from \"react-icons/hi\";\n-import {  FaCheckCircle, FaTimesCircle, FaHourglassHalf } from 'react-icons/fa';\n-import { FaRegArrowAltCircleDown } from \"react-icons/fa\";\n-import { FaRegArrowAltCircleUp } from \"react-icons/fa\";\n-import { FaEllipsisH } from \"react-icons/fa\";\n-import { FaExchangeAlt } from \"react-icons/fa\";\n-import FilterTransactions from '../../components/FilterTransactions';\n-import moment from 'moment';\n-import 'moment/locale/id';\n-moment.locale('id');\n-\n-const ITEMS_PER_PAGE = 15;\n-\n-\n-const Transaction = ({ initialTransaction }) =>  {\n-  const { useAuthRedirect } = useRequireAuth(['admin', 'editor', 'superadmin']);\n-  useAuthRedirect();\n-  const [transactions, setTransactions] = useState([initialTransaction]);\n-  const [reTransactions, setReTransactions] = useState([initialTransaction])\n-  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n-  const [loading, setLoading] = useState(true);\n-  const { data: session, status } = useSession();\n-  const [searchTerm, setSearchTerm] = useState('');\n-  const [currentPage, setCurrentPage] = useState(0);\n-\n-  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n-  const [currentTransactionType, setCurrentTransactionType] = useState('');\n-\n-  const [showAlert, setShowAlert] = useState(false);\n-  const [alertMessage, setAlertMessage] = useState('');\n-  const [alertType, setAlertType] = useState('success');\n-  \n-  \n-\n-  const toggleSidebar = () => {\n-    setIsSidebarOpen(!isSidebarOpen);\n-  };\n-\n-  const formatCurrency = (amount) => {\n-    return new Intl.NumberFormat('id-ID', {\n-        style: 'currency',\n-        currency: 'IDR',\n-        minimumFractionDigits: 0,\n-    }).format(amount);\n-  };\n-\n-  const fetchTransactions = async () => {\n-    try {\n-        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n-            headers: {\n-              Authorization: `Bearer ${session.accessToken}`,\n-            },\n-        });\n-        setTransactions(res.data.data);\n-        setReTransactions(res.data.data);\n-        setLoading(false);\n-    } catch (error) {\n-        console.error('Error fetching houses data:', error);\n-        setLoading(false);\n-    }\n- };\n-\n-  useEffect(() => {\n-    if (session) {\n-        fetchTransactions();\n-    }\n-\n-  }, [session, status]);\n-\n-  const handleSearchChange = (event) => {\n-    setSearchTerm(event.target.value);\n-  };\n-\n-  const filteredTransactions = transactions.filter(transaction => \n-    (transaction.description && transaction.description.toLowerCase().includes(searchTerm.toLowerCase()))\n-  );\n-\n-  const offset = currentPage * ITEMS_PER_PAGE;\n-  const currentPageData = filteredTransactions.slice(offset, offset + ITEMS_PER_PAGE);\n-\n-  const handlePageClick = (data) => {\n-    setCurrentPage(data.selected);\n-  };\n-\n-\n-  const getStatusIcon = (status) => {\n-    switch (status) {\n-      case 'berhasil':\n-        return <FaCheckCircle className=\"text-green-500\" />;\n-      case 'gagal':\n-        return <FaTimesCircle className=\"text-red-500\" />;\n-      case 'sedang dicek':\n-        return <FaHourglassHalf className=\"text-yellow-500\" />;\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const getTypeIcon = (type) => {\n-    switch (type) {\n-      case 'income':\n-        return <FaRegArrowAltCircleDown  className=\"text-blue-700 h-4 w-4 md:h-5 md:w-5 \" />;\n-      case 'expense':\n-        return <FaRegArrowAltCircleUp  className=\"text-red-700 h-4 w-4 md:h-5 md:w-5 \" />;\n-      case 'ipl':\n-        return <FaExchangeAlt  className=\"text-green-700  h-3 w-3 md:h-4 md:w-4 \" />;\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const getTextColor = (type) => {\n-    switch (type) {\n-      case 'income':\n-        return \"text-blue-700\";\n-      case 'expense':\n-        return \"text-red-700\";\n-      case 'ipl':\n-        return \"text-green-700\";\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const handlePaymentClick = () => {\n-    setCurrentTransactionType('ipl');\n-    setIsDrawerOpen(true);\n-  };\n-\n-  const handleIncomeClick = () => {\n-    setCurrentTransactionType('income');\n-    setIsDrawerOpen(true);\n-  };\n-\n-  const handleExpenseClick = () => {\n-    setCurrentTransactionType('expense');\n-    setIsDrawerOpen(true);\n-  };\n-\n-  const handleDrawerSubmit = async (transactionData) => {\n-    try {\n-      const response = await axios.post(\n-        `${process.env.NEXT_PUBLIC_API_URL}/transactions/create`, \n-        transactionData, // Hanya data yang dikirim dalam body\n-        {\n-          headers: {\n-            Authorization: `Bearer ${session.accessToken}`, // Tempatkan headers di opsi konfigurasi\n-            'Content-Type': 'application/json',\n-          },\n-        }\n-      );\n-      setAlertType('success');\n-      setAlertMessage('Transaksi berhasil ditambahkan');\n-      setShowAlert(true);\n-     // alert('Transaksi berhasil ditambahkan');\n-      // Refresh data atau navigasi sesuai kebutuhan\n-      fetchTransactions();\n-    } catch (error) {\n-      setAlertType('failure');\n-      setAlertMessage('Gagal menambahkan transaksi');\n-      setShowAlert(true);\n-      console.error('Error creating transaction:', error);\n-    }\n-  };\n-  \n-  const handleAlertDismiss = () => {\n-    setShowAlert(false);\n-  };\n-\n-  if (loading) {\n-    return <Spinner />;\n-  }\n-\n- // console.log(transactions)\n-\n-  return (\n-    <>\n-   \n-    <Header toggleSidebar={toggleSidebar}/>\n-    <main className='max-w-screen-xl mx-auto'>\n-      <div className='w-full'>\n-        <SideMenu isOpen={isSidebarOpen}/>\n-        <section className='mt-14 px-5 py-5 md:px-8 sm:ml-64'>\n-        {showAlert && (\n-            <Alert className='' color={alertType === 'success' ? 'success' : 'failure'} onDismiss={handleAlertDismiss}>\n-                <span className=\"font-medium\">{alertMessage}</span>\n-            </Alert>\n-        )}\n-          <h1 className='text-xl mb-4 font-semibold text-gray-900 sm:text-2xl dark:text-white'>Data Transaksi</h1>\n-\n-          <Card className='w-full mb-10'>\n-            <h3 className='font-semibold mb-3'>Buat Transaksi Baru</h3>\n-              <div className='flex flex-wrap gap-2'>\n-              <Button size=\"sm\" color=\"success\" onClick={handlePaymentClick}>\n-                <FaExchangeAlt  className=\"mr-2 h-5 w-5\" />\n-                IPL\n-              </Button>\n-\n-              <Button size=\"sm\" color=\"blue\" onClick={handleIncomeClick}>\n-                <FaRegArrowAltCircleDown  className=\"mr-2 h-5 w-5\" />\n-                Masuk\n-              </Button>\n-              <Button size=\"sm\" color=\"failure\" onClick={handleExpenseClick}>\n-                Keluar\n-                <FaRegArrowAltCircleUp  className=\"ml-2 h-5 w-5\" />\n-              </Button>\n-              </div>\n-          </Card>\n-\n-          <TransactionDrawer\n-            isOpen={isDrawerOpen}\n-            onClose={() => setIsDrawerOpen(false)}\n-            onSubmit={handleDrawerSubmit}\n-            transactionType={currentTransactionType}\n-          />\n-\n-          <div className=\"max-w-md mb-4 flex\">\n-\n-            <TextInput \n-              name=\"name\"\n-              placeholder=\"Cari\"\n-              value={searchTerm}\n-              onChange={handleSearchChange}\n-              className=\"mr-2 w-3/5\"\n-              icon={HiOutlineSearch} \n-            />\n-\n-            <FilterTransactions className=\"w-2/5\" setTransactions={setTransactions} initialTransaction={reTransactions} />\n-\n-          </div>\n-\n-          <div className='overflow-x-auto'>\n-            <Table hoverable>\n-              <Table.Head>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 w-3/4'>Keterangan</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tanggal</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Nominal</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tipe</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Status</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>\n-                    <span className=\"sr-only\">Edit</span>\n-                </Table.HeadCell>\n-              </Table.Head>\n-              <Table.Body className=\"divide-y\">\n-                \n-                {currentPageData.map((transaction, index) => ( \n-                  <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-                    <Table.Cell className={`py-2 px-2 md:py-3 md:px-3 ${getTextColor(transaction.transaction_type)}`}>\n-                      <span className='flex items-start content-start'>\n-                        <span>{getTypeIcon(transaction.transaction_type)} </span>\n-                        <span className=\"ml-2\">{transaction.description}</span> \n-                      </span>\n-                    </Table.Cell>\n-                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}</Table.Cell>\n-                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{formatCurrency(transaction.amount)}</Table.Cell>\n-                    \n-                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n-                      <span className='flex items-center'>\n-                        {getStatusIcon(transaction.payment_type)} \n-                      </span>\n-                    </Table.Cell>\n-                    <Table.Cell className={`items-center flex content-center py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n-                      <span className='flex items-center'>\n-                        {getStatusIcon(transaction.status)} \n-                      </span>\n-                    </Table.Cell>\n-                    <Table.Cell className='py-2 px-2 md:py-3 md:px-3 text-xs md:text-base'>\n-                      <Dropdown  className=\"relative z-10\" align=\"right\" label=\"\" renderTrigger={() => <span><FaEllipsisH  className=\"h-4 w-4\" /></span>}>\n-                        <Dropdown.Item>Edit</Dropdown.Item>\n-                        <Dropdown.Item>View</Dropdown.Item>\n-                        <Dropdown.Item>Delete</Dropdown.Item>\n-                      </Dropdown>\n-\n-                    </Table.Cell>\n-                </Table.Row>\n-\n-                ))}\n-              </Table.Body>\n-            </Table>\n-          </div>\n-          <nav className='py-6'>\n-          <ReactPaginate\n-                previousLabel={'Previous'}\n-                nextLabel={'Next'}\n-                breakLabel={'...'}\n-                pageCount={Math.ceil(filteredTransactions.length / ITEMS_PER_PAGE)}\n-                marginPagesDisplayed={2}\n-                pageRangeDisplayed={5}\n-                onPageChange={handlePageClick}\n-                containerClassName={'pagination flex justify-center -space-x-px text-sm'}\n-                pageClassName={'page-item'}\n-                pageLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                previousClassName={'page-item'}\n-                previousLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                nextClassName={'page-item'}\n-                nextLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                breakClassName={'page-item'}\n-                breakLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                activeClassName={'active'}\n-                activeLinkClassName={'bg-gray-300'}\n-            />\n-          </nav>\n-\n-        </section>\n-\n-      </div>\n-      \n-      \n-    </main>\n-    </>\n-  );\n-}\n-\n-export const getServerSideProps = async (context) => {\n-  const session = await getSession(context);\n-  \n-  if (!session) {\n-      return {\n-          redirect: {\n-              destination: '/',\n-              permanent: false,\n-          },\n-      };\n-  }\n-\n-  try {\n-      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n-          headers: {\n-              Authorization: `Bearer ${session.accessToken}`,\n-          },\n-      });\n-      return {\n-          props: {\n-            initialTransaction: res.data,\n-          },\n-      };\n-  } catch (error) {\n-      console.error('Error fetching houses data:', error);\n-      return {\n-          props: {\n-            initialTransaction: [],\n-          },\n-      };\n-  }\n-};\n-\n-export default Transaction;\n"
                },
                {
                    "date": 1722400249749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -277,9 +277,9 @@\n                       </span>\n                     </Table.Cell>\n                     <Table.Cell className='py-2 px-2 md:py-3 md:px-3 text-xs md:text-base'>\n                       <Dropdown  className=\"relative z-10\" align=\"right\" label=\"\" renderTrigger={() => <span><FaEllipsisH  className=\"h-4 w-4\" /></span>}>\n-                        <Dropdown.Item>Edit</Dropdown.Item>\n+                        <Dropdown.Item><FaRegEdit />Edit</Dropdown.Item>\n                         <Dropdown.Item>View</Dropdown.Item>\n                         <Dropdown.Item>Delete</Dropdown.Item>\n                       </Dropdown>\n \n"
                },
                {
                    "date": 1722400269994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -277,9 +277,9 @@\n                       </span>\n                     </Table.Cell>\n                     <Table.Cell className='py-2 px-2 md:py-3 md:px-3 text-xs md:text-base'>\n                       <Dropdown  className=\"relative z-10\" align=\"right\" label=\"\" renderTrigger={() => <span><FaEllipsisH  className=\"h-4 w-4\" /></span>}>\n-                        <Dropdown.Item><FaRegEdit />Edit</Dropdown.Item>\n+                        <Dropdown.Item><span><FaRegEdit /></span><span>Edit</span></Dropdown.Item>\n                         <Dropdown.Item>View</Dropdown.Item>\n                         <Dropdown.Item>Delete</Dropdown.Item>\n                       </Dropdown>\n \n"
                },
                {
                    "date": 1722400284696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -277,9 +277,9 @@\n                       </span>\n                     </Table.Cell>\n                     <Table.Cell className='py-2 px-2 md:py-3 md:px-3 text-xs md:text-base'>\n                       <Dropdown  className=\"relative z-10\" align=\"right\" label=\"\" renderTrigger={() => <span><FaEllipsisH  className=\"h-4 w-4\" /></span>}>\n-                        <Dropdown.Item><span><FaRegEdit /></span><span>Edit</span></Dropdown.Item>\n+                        <Dropdown.Item><FaRegEdit className='mr-2'/><span>Edit</span></Dropdown.Item>\n                         <Dropdown.Item>View</Dropdown.Item>\n                         <Dropdown.Item>Delete</Dropdown.Item>\n                       </Dropdown>\n \n"
                },
                {
                    "date": 1722400291791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,359 @@\n+// pages/home.js\n+import { getSession, useSession } from 'next-auth/react';\n+import { useEffect,useState } from 'react';\n+import axios from 'axios';\n+import { useRequireAuth } from '../../utils/authUtils'; \n+import ReactPaginate from 'react-paginate';\n+\n+import Header from '../../components/Header';\n+import SideMenu from '../../components/dashboard/Sidebar';\n+import TransactionDrawer from '../../components/dashboard/TransactionDrawer';\n+import Spinner from '../../components/Spinner';\n+import { Card, Button,TextInput,Drawer,Select, Table,Dropdown, Alert  } from \"flowbite-react\";\n+import { HiOutlineSearch } from \"react-icons/hi\";\n+import {  FaCheckCircle, FaTimesCircle, FaHourglassHalf,FaRegEdit } from 'react-icons/fa';\n+import { FaRegArrowAltCircleDown } from \"react-icons/fa\";\n+import { FaRegArrowAltCircleUp } from \"react-icons/fa\";\n+import { FaEllipsisH } from \"react-icons/fa\";\n+import { FaExchangeAlt } from \"react-icons/fa\";\n+import FilterTransactions from '../../components/FilterTransactions';\n+import moment from 'moment';\n+import 'moment/locale/id';\n+moment.locale('id');\n+\n+const ITEMS_PER_PAGE = 15;\n+\n+\n+const Transaction = ({ initialTransaction }) =>  {\n+  const { useAuthRedirect } = useRequireAuth(['admin', 'editor', 'superadmin']);\n+  useAuthRedirect();\n+  const [transactions, setTransactions] = useState([initialTransaction]);\n+  const [reTransactions, setReTransactions] = useState([initialTransaction])\n+  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n+  const [loading, setLoading] = useState(true);\n+  const { data: session, status } = useSession();\n+  const [searchTerm, setSearchTerm] = useState('');\n+  const [currentPage, setCurrentPage] = useState(0);\n+\n+  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n+  const [currentTransactionType, setCurrentTransactionType] = useState('');\n+\n+  const [showAlert, setShowAlert] = useState(false);\n+  const [alertMessage, setAlertMessage] = useState('');\n+  const [alertType, setAlertType] = useState('success');\n+  \n+  \n+\n+  const toggleSidebar = () => {\n+    setIsSidebarOpen(!isSidebarOpen);\n+  };\n+\n+  const formatCurrency = (amount) => {\n+    return new Intl.NumberFormat('id-ID', {\n+        style: 'currency',\n+        currency: 'IDR',\n+        minimumFractionDigits: 0,\n+    }).format(amount);\n+  };\n+\n+  const fetchTransactions = async () => {\n+    try {\n+        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n+            headers: {\n+              Authorization: `Bearer ${session.accessToken}`,\n+            },\n+        });\n+        setTransactions(res.data.data);\n+        setReTransactions(res.data.data);\n+        setLoading(false);\n+    } catch (error) {\n+        console.error('Error fetching houses data:', error);\n+        setLoading(false);\n+    }\n+ };\n+\n+  useEffect(() => {\n+    if (session) {\n+        fetchTransactions();\n+    }\n+\n+  }, [session, status]);\n+\n+  const handleSearchChange = (event) => {\n+    setSearchTerm(event.target.value);\n+  };\n+\n+  const filteredTransactions = transactions.filter(transaction => \n+    (transaction.description && transaction.description.toLowerCase().includes(searchTerm.toLowerCase()))\n+  );\n+\n+  const offset = currentPage * ITEMS_PER_PAGE;\n+  const currentPageData = filteredTransactions.slice(offset, offset + ITEMS_PER_PAGE);\n+\n+  const handlePageClick = (data) => {\n+    setCurrentPage(data.selected);\n+  };\n+\n+\n+  const getStatusIcon = (status) => {\n+    switch (status) {\n+      case 'berhasil':\n+        return <FaCheckCircle className=\"text-green-500\" />;\n+      case 'gagal':\n+        return <FaTimesCircle className=\"text-red-500\" />;\n+      case 'sedang dicek':\n+        return <FaHourglassHalf className=\"text-yellow-500\" />;\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const getTypeIcon = (type) => {\n+    switch (type) {\n+      case 'income':\n+        return <FaRegArrowAltCircleDown  className=\"text-blue-700 h-4 w-4 md:h-5 md:w-5 \" />;\n+      case 'expense':\n+        return <FaRegArrowAltCircleUp  className=\"text-red-700 h-4 w-4 md:h-5 md:w-5 \" />;\n+      case 'ipl':\n+        return <FaExchangeAlt  className=\"text-green-700  h-3 w-3 md:h-4 md:w-4 \" />;\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const getTextColor = (type) => {\n+    switch (type) {\n+      case 'income':\n+        return \"text-blue-700\";\n+      case 'expense':\n+        return \"text-red-700\";\n+      case 'ipl':\n+        return \"text-green-700\";\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const handlePaymentClick = () => {\n+    setCurrentTransactionType('ipl');\n+    setIsDrawerOpen(true);\n+  };\n+\n+  const handleIncomeClick = () => {\n+    setCurrentTransactionType('income');\n+    setIsDrawerOpen(true);\n+  };\n+\n+  const handleExpenseClick = () => {\n+    setCurrentTransactionType('expense');\n+    setIsDrawerOpen(true);\n+  };\n+\n+  const handleDrawerSubmit = async (transactionData) => {\n+    try {\n+      const response = await axios.post(\n+        `${process.env.NEXT_PUBLIC_API_URL}/transactions/create`, \n+        transactionData, // Hanya data yang dikirim dalam body\n+        {\n+          headers: {\n+            Authorization: `Bearer ${session.accessToken}`, // Tempatkan headers di opsi konfigurasi\n+            'Content-Type': 'application/json',\n+          },\n+        }\n+      );\n+      setAlertType('success');\n+      setAlertMessage('Transaksi berhasil ditambahkan');\n+      setShowAlert(true);\n+     // alert('Transaksi berhasil ditambahkan');\n+      // Refresh data atau navigasi sesuai kebutuhan\n+      fetchTransactions();\n+    } catch (error) {\n+      setAlertType('failure');\n+      setAlertMessage('Gagal menambahkan transaksi');\n+      setShowAlert(true);\n+      console.error('Error creating transaction:', error);\n+    }\n+  };\n+  \n+  const handleAlertDismiss = () => {\n+    setShowAlert(false);\n+  };\n+\n+  if (loading) {\n+    return <Spinner />;\n+  }\n+\n+ // console.log(transactions)\n+\n+  return (\n+    <>\n+   \n+    <Header toggleSidebar={toggleSidebar}/>\n+    <main className='max-w-screen-xl mx-auto'>\n+      <div className='w-full'>\n+        <SideMenu isOpen={isSidebarOpen}/>\n+        <section className='mt-14 px-5 py-5 md:px-8 sm:ml-64'>\n+        {showAlert && (\n+            <Alert className='' color={alertType === 'success' ? 'success' : 'failure'} onDismiss={handleAlertDismiss}>\n+                <span className=\"font-medium\">{alertMessage}</span>\n+            </Alert>\n+        )}\n+          <h1 className='text-xl mb-4 font-semibold text-gray-900 sm:text-2xl dark:text-white'>Data Transaksi</h1>\n+\n+          <Card className='w-full mb-10'>\n+            <h3 className='font-semibold mb-3'>Buat Transaksi Baru</h3>\n+              <div className='flex flex-wrap gap-2'>\n+              <Button size=\"sm\" color=\"success\" onClick={handlePaymentClick}>\n+                <FaExchangeAlt  className=\"mr-2 h-5 w-5\" />\n+                IPL\n+              </Button>\n+\n+              <Button size=\"sm\" color=\"blue\" onClick={handleIncomeClick}>\n+                <FaRegArrowAltCircleDown  className=\"mr-2 h-5 w-5\" />\n+                Masuk\n+              </Button>\n+              <Button size=\"sm\" color=\"failure\" onClick={handleExpenseClick}>\n+                Keluar\n+                <FaRegArrowAltCircleUp  className=\"ml-2 h-5 w-5\" />\n+              </Button>\n+              </div>\n+          </Card>\n+\n+          <TransactionDrawer\n+            isOpen={isDrawerOpen}\n+            onClose={() => setIsDrawerOpen(false)}\n+            onSubmit={handleDrawerSubmit}\n+            transactionType={currentTransactionType}\n+          />\n+\n+          <div className=\"max-w-md mb-4 flex\">\n+\n+            <TextInput \n+              name=\"name\"\n+              placeholder=\"Cari\"\n+              value={searchTerm}\n+              onChange={handleSearchChange}\n+              className=\"mr-2 w-3/5\"\n+              icon={HiOutlineSearch} \n+            />\n+\n+            <FilterTransactions className=\"w-2/5\" setTransactions={setTransactions} initialTransaction={reTransactions} />\n+\n+          </div>\n+\n+          <div className='overflow-x-auto'>\n+            <Table hoverable>\n+              <Table.Head>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 w-3/4'>Keterangan</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tanggal</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Nominal</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tipe</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Status</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>\n+                    <span className=\"sr-only\">Edit</span>\n+                </Table.HeadCell>\n+              </Table.Head>\n+              <Table.Body className=\"divide-y\">\n+                \n+                {currentPageData.map((transaction, index) => ( \n+                  <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n+                    <Table.Cell className={`py-2 px-2 md:py-3 md:px-3 ${getTextColor(transaction.transaction_type)}`}>\n+                      <span className='flex items-start content-start'>\n+                        <span>{getTypeIcon(transaction.transaction_type)} </span>\n+                        <span className=\"ml-2\">{transaction.description}</span> \n+                      </span>\n+                    </Table.Cell>\n+                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}</Table.Cell>\n+                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{formatCurrency(transaction.amount)}</Table.Cell>\n+                    \n+                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n+                      <span className='flex items-center'>\n+                        {getStatusIcon(transaction.payment_type)} \n+                      </span>\n+                    </Table.Cell>\n+                    <Table.Cell className={`items-center flex justify-center content-center py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n+                      <span className='flex items-center'>\n+                        {getStatusIcon(transaction.status)} \n+                      </span>\n+                    </Table.Cell>\n+                    <Table.Cell className='py-2 px-2 md:py-3 md:px-3 text-xs md:text-base'>\n+                      <Dropdown  className=\"relative z-10\" align=\"right\" label=\"\" renderTrigger={() => <span><FaEllipsisH  className=\"h-4 w-4\" /></span>}>\n+                        <Dropdown.Item><FaRegEdit className='mr-1'/><span>Edit</span></Dropdown.Item>\n+                        <Dropdown.Item>View</Dropdown.Item>\n+                        <Dropdown.Item>Delete</Dropdown.Item>\n+                      </Dropdown>\n+\n+                    </Table.Cell>\n+                </Table.Row>\n+\n+                ))}\n+              </Table.Body>\n+            </Table>\n+          </div>\n+          <nav className='py-6'>\n+          <ReactPaginate\n+                previousLabel={'Previous'}\n+                nextLabel={'Next'}\n+                breakLabel={'...'}\n+                pageCount={Math.ceil(filteredTransactions.length / ITEMS_PER_PAGE)}\n+                marginPagesDisplayed={2}\n+                pageRangeDisplayed={5}\n+                onPageChange={handlePageClick}\n+                containerClassName={'pagination flex justify-center -space-x-px text-sm'}\n+                pageClassName={'page-item'}\n+                pageLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                previousClassName={'page-item'}\n+                previousLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                nextClassName={'page-item'}\n+                nextLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                breakClassName={'page-item'}\n+                breakLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                activeClassName={'active'}\n+                activeLinkClassName={'bg-gray-300'}\n+            />\n+          </nav>\n+\n+        </section>\n+\n+      </div>\n+      \n+      \n+    </main>\n+    </>\n+  );\n+}\n+\n+export const getServerSideProps = async (context) => {\n+  const session = await getSession(context);\n+  \n+  if (!session) {\n+      return {\n+          redirect: {\n+              destination: '/',\n+              permanent: false,\n+          },\n+      };\n+  }\n+\n+  try {\n+      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n+          headers: {\n+              Authorization: `Bearer ${session.accessToken}`,\n+          },\n+      });\n+      return {\n+          props: {\n+            initialTransaction: res.data,\n+          },\n+      };\n+  } catch (error) {\n+      console.error('Error fetching houses data:', error);\n+      return {\n+          props: {\n+            initialTransaction: [],\n+          },\n+      };\n+  }\n+};\n+\n+export default Transaction;\n"
                },
                {
                    "date": 1722400336536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,359 @@\n+// pages/home.js\n+import { getSession, useSession } from 'next-auth/react';\n+import { useEffect,useState } from 'react';\n+import axios from 'axios';\n+import { useRequireAuth } from '../../utils/authUtils'; \n+import ReactPaginate from 'react-paginate';\n+\n+import Header from '../../components/Header';\n+import SideMenu from '../../components/dashboard/Sidebar';\n+import TransactionDrawer from '../../components/dashboard/TransactionDrawer';\n+import Spinner from '../../components/Spinner';\n+import { Card, Button,TextInput,Drawer,Select, Table,Dropdown, Alert  } from \"flowbite-react\";\n+import { HiOutlineSearch } from \"react-icons/hi\";\n+import {  FaCheckCircle, FaTimesCircle, FaHourglassHalf,FaRegEdit,FaEye } from 'react-icons/fa';\n+import { FaRegArrowAltCircleDown } from \"react-icons/fa\";\n+import { FaRegArrowAltCircleUp } from \"react-icons/fa\";\n+import { FaEllipsisH } from \"react-icons/fa\";\n+import { FaExchangeAlt } from \"react-icons/fa\";\n+import FilterTransactions from '../../components/FilterTransactions';\n+import moment from 'moment';\n+import 'moment/locale/id';\n+moment.locale('id');\n+\n+const ITEMS_PER_PAGE = 15;\n+\n+\n+const Transaction = ({ initialTransaction }) =>  {\n+  const { useAuthRedirect } = useRequireAuth(['admin', 'editor', 'superadmin']);\n+  useAuthRedirect();\n+  const [transactions, setTransactions] = useState([initialTransaction]);\n+  const [reTransactions, setReTransactions] = useState([initialTransaction])\n+  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n+  const [loading, setLoading] = useState(true);\n+  const { data: session, status } = useSession();\n+  const [searchTerm, setSearchTerm] = useState('');\n+  const [currentPage, setCurrentPage] = useState(0);\n+\n+  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n+  const [currentTransactionType, setCurrentTransactionType] = useState('');\n+\n+  const [showAlert, setShowAlert] = useState(false);\n+  const [alertMessage, setAlertMessage] = useState('');\n+  const [alertType, setAlertType] = useState('success');\n+  \n+  \n+\n+  const toggleSidebar = () => {\n+    setIsSidebarOpen(!isSidebarOpen);\n+  };\n+\n+  const formatCurrency = (amount) => {\n+    return new Intl.NumberFormat('id-ID', {\n+        style: 'currency',\n+        currency: 'IDR',\n+        minimumFractionDigits: 0,\n+    }).format(amount);\n+  };\n+\n+  const fetchTransactions = async () => {\n+    try {\n+        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n+            headers: {\n+              Authorization: `Bearer ${session.accessToken}`,\n+            },\n+        });\n+        setTransactions(res.data.data);\n+        setReTransactions(res.data.data);\n+        setLoading(false);\n+    } catch (error) {\n+        console.error('Error fetching houses data:', error);\n+        setLoading(false);\n+    }\n+ };\n+\n+  useEffect(() => {\n+    if (session) {\n+        fetchTransactions();\n+    }\n+\n+  }, [session, status]);\n+\n+  const handleSearchChange = (event) => {\n+    setSearchTerm(event.target.value);\n+  };\n+\n+  const filteredTransactions = transactions.filter(transaction => \n+    (transaction.description && transaction.description.toLowerCase().includes(searchTerm.toLowerCase()))\n+  );\n+\n+  const offset = currentPage * ITEMS_PER_PAGE;\n+  const currentPageData = filteredTransactions.slice(offset, offset + ITEMS_PER_PAGE);\n+\n+  const handlePageClick = (data) => {\n+    setCurrentPage(data.selected);\n+  };\n+\n+\n+  const getStatusIcon = (status) => {\n+    switch (status) {\n+      case 'berhasil':\n+        return <FaCheckCircle className=\"text-green-500\" />;\n+      case 'gagal':\n+        return <FaTimesCircle className=\"text-red-500\" />;\n+      case 'sedang dicek':\n+        return <FaHourglassHalf className=\"text-yellow-500\" />;\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const getTypeIcon = (type) => {\n+    switch (type) {\n+      case 'income':\n+        return <FaRegArrowAltCircleDown  className=\"text-blue-700 h-4 w-4 md:h-5 md:w-5 \" />;\n+      case 'expense':\n+        return <FaRegArrowAltCircleUp  className=\"text-red-700 h-4 w-4 md:h-5 md:w-5 \" />;\n+      case 'ipl':\n+        return <FaExchangeAlt  className=\"text-green-700  h-3 w-3 md:h-4 md:w-4 \" />;\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const getTextColor = (type) => {\n+    switch (type) {\n+      case 'income':\n+        return \"text-blue-700\";\n+      case 'expense':\n+        return \"text-red-700\";\n+      case 'ipl':\n+        return \"text-green-700\";\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const handlePaymentClick = () => {\n+    setCurrentTransactionType('ipl');\n+    setIsDrawerOpen(true);\n+  };\n+\n+  const handleIncomeClick = () => {\n+    setCurrentTransactionType('income');\n+    setIsDrawerOpen(true);\n+  };\n+\n+  const handleExpenseClick = () => {\n+    setCurrentTransactionType('expense');\n+    setIsDrawerOpen(true);\n+  };\n+\n+  const handleDrawerSubmit = async (transactionData) => {\n+    try {\n+      const response = await axios.post(\n+        `${process.env.NEXT_PUBLIC_API_URL}/transactions/create`, \n+        transactionData, // Hanya data yang dikirim dalam body\n+        {\n+          headers: {\n+            Authorization: `Bearer ${session.accessToken}`, // Tempatkan headers di opsi konfigurasi\n+            'Content-Type': 'application/json',\n+          },\n+        }\n+      );\n+      setAlertType('success');\n+      setAlertMessage('Transaksi berhasil ditambahkan');\n+      setShowAlert(true);\n+     // alert('Transaksi berhasil ditambahkan');\n+      // Refresh data atau navigasi sesuai kebutuhan\n+      fetchTransactions();\n+    } catch (error) {\n+      setAlertType('failure');\n+      setAlertMessage('Gagal menambahkan transaksi');\n+      setShowAlert(true);\n+      console.error('Error creating transaction:', error);\n+    }\n+  };\n+  \n+  const handleAlertDismiss = () => {\n+    setShowAlert(false);\n+  };\n+\n+  if (loading) {\n+    return <Spinner />;\n+  }\n+\n+ // console.log(transactions)\n+\n+  return (\n+    <>\n+   \n+    <Header toggleSidebar={toggleSidebar}/>\n+    <main className='max-w-screen-xl mx-auto'>\n+      <div className='w-full'>\n+        <SideMenu isOpen={isSidebarOpen}/>\n+        <section className='mt-14 px-5 py-5 md:px-8 sm:ml-64'>\n+        {showAlert && (\n+            <Alert className='' color={alertType === 'success' ? 'success' : 'failure'} onDismiss={handleAlertDismiss}>\n+                <span className=\"font-medium\">{alertMessage}</span>\n+            </Alert>\n+        )}\n+          <h1 className='text-xl mb-4 font-semibold text-gray-900 sm:text-2xl dark:text-white'>Data Transaksi</h1>\n+\n+          <Card className='w-full mb-10'>\n+            <h3 className='font-semibold mb-3'>Buat Transaksi Baru</h3>\n+              <div className='flex flex-wrap gap-2'>\n+              <Button size=\"sm\" color=\"success\" onClick={handlePaymentClick}>\n+                <FaExchangeAlt  className=\"mr-2 h-5 w-5\" />\n+                IPL\n+              </Button>\n+\n+              <Button size=\"sm\" color=\"blue\" onClick={handleIncomeClick}>\n+                <FaRegArrowAltCircleDown  className=\"mr-2 h-5 w-5\" />\n+                Masuk\n+              </Button>\n+              <Button size=\"sm\" color=\"failure\" onClick={handleExpenseClick}>\n+                Keluar\n+                <FaRegArrowAltCircleUp  className=\"ml-2 h-5 w-5\" />\n+              </Button>\n+              </div>\n+          </Card>\n+\n+          <TransactionDrawer\n+            isOpen={isDrawerOpen}\n+            onClose={() => setIsDrawerOpen(false)}\n+            onSubmit={handleDrawerSubmit}\n+            transactionType={currentTransactionType}\n+          />\n+\n+          <div className=\"max-w-md mb-4 flex\">\n+\n+            <TextInput \n+              name=\"name\"\n+              placeholder=\"Cari\"\n+              value={searchTerm}\n+              onChange={handleSearchChange}\n+              className=\"mr-2 w-3/5\"\n+              icon={HiOutlineSearch} \n+            />\n+\n+            <FilterTransactions className=\"w-2/5\" setTransactions={setTransactions} initialTransaction={reTransactions} />\n+\n+          </div>\n+\n+          <div className='overflow-x-auto'>\n+            <Table hoverable>\n+              <Table.Head>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 w-3/4'>Keterangan</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tanggal</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Nominal</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tipe</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Status</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>\n+                    <span className=\"sr-only\">Edit</span>\n+                </Table.HeadCell>\n+              </Table.Head>\n+              <Table.Body className=\"divide-y\">\n+                \n+                {currentPageData.map((transaction, index) => ( \n+                  <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n+                    <Table.Cell className={`py-2 px-2 md:py-3 md:px-3 ${getTextColor(transaction.transaction_type)}`}>\n+                      <span className='flex items-start content-start'>\n+                        <span>{getTypeIcon(transaction.transaction_type)} </span>\n+                        <span className=\"ml-2\">{transaction.description}</span> \n+                      </span>\n+                    </Table.Cell>\n+                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}</Table.Cell>\n+                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{formatCurrency(transaction.amount)}</Table.Cell>\n+                    \n+                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n+                      <span className='flex items-center'>\n+                        {getStatusIcon(transaction.payment_type)} \n+                      </span>\n+                    </Table.Cell>\n+                    <Table.Cell className={`items-center flex justify-center content-center py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n+                      <span className='flex items-center'>\n+                        {getStatusIcon(transaction.status)} \n+                      </span>\n+                    </Table.Cell>\n+                    <Table.Cell className='py-2 px-2 md:py-3 md:px-3 text-xs md:text-base'>\n+                      <Dropdown  className=\"relative z-10\" align=\"right\" label=\"\" renderTrigger={() => <span><FaEllipsisH  className=\"h-4 w-4\" /></span>}>\n+                        <Dropdown.Item><FaRegEdit className='mr-1'/><span>Edit</span></Dropdown.Item>\n+                        <Dropdown.Item>View</Dropdown.Item>\n+                        <Dropdown.Item>Delete</Dropdown.Item>\n+                      </Dropdown>\n+\n+                    </Table.Cell>\n+                </Table.Row>\n+\n+                ))}\n+              </Table.Body>\n+            </Table>\n+          </div>\n+          <nav className='py-6'>\n+          <ReactPaginate\n+                previousLabel={'Previous'}\n+                nextLabel={'Next'}\n+                breakLabel={'...'}\n+                pageCount={Math.ceil(filteredTransactions.length / ITEMS_PER_PAGE)}\n+                marginPagesDisplayed={2}\n+                pageRangeDisplayed={5}\n+                onPageChange={handlePageClick}\n+                containerClassName={'pagination flex justify-center -space-x-px text-sm'}\n+                pageClassName={'page-item'}\n+                pageLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                previousClassName={'page-item'}\n+                previousLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                nextClassName={'page-item'}\n+                nextLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                breakClassName={'page-item'}\n+                breakLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                activeClassName={'active'}\n+                activeLinkClassName={'bg-gray-300'}\n+            />\n+          </nav>\n+\n+        </section>\n+\n+      </div>\n+      \n+      \n+    </main>\n+    </>\n+  );\n+}\n+\n+export const getServerSideProps = async (context) => {\n+  const session = await getSession(context);\n+  \n+  if (!session) {\n+      return {\n+          redirect: {\n+              destination: '/',\n+              permanent: false,\n+          },\n+      };\n+  }\n+\n+  try {\n+      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n+          headers: {\n+              Authorization: `Bearer ${session.accessToken}`,\n+          },\n+      });\n+      return {\n+          props: {\n+            initialTransaction: res.data,\n+          },\n+      };\n+  } catch (error) {\n+      console.error('Error fetching houses data:', error);\n+      return {\n+          props: {\n+            initialTransaction: [],\n+          },\n+      };\n+  }\n+};\n+\n+export default Transaction;\n"
                },
                {
                    "date": 1722400377541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,359 @@\n+// pages/home.js\n+import { getSession, useSession } from 'next-auth/react';\n+import { useEffect,useState } from 'react';\n+import axios from 'axios';\n+import { useRequireAuth } from '../../utils/authUtils'; \n+import ReactPaginate from 'react-paginate';\n+\n+import Header from '../../components/Header';\n+import SideMenu from '../../components/dashboard/Sidebar';\n+import TransactionDrawer from '../../components/dashboard/TransactionDrawer';\n+import Spinner from '../../components/Spinner';\n+import { Card, Button,TextInput,Drawer,Select, Table,Dropdown, Alert  } from \"flowbite-react\";\n+import { HiOutlineSearch } from \"react-icons/hi\";\n+import {  FaCheckCircle, FaTimesCircle, FaHourglassHalf,FaRegEdit,FaEye } from 'react-icons/fa';\n+import { FaRegArrowAltCircleDown } from \"react-icons/fa\";\n+import { FaRegArrowAltCircleUp } from \"react-icons/fa\";\n+import { FaEllipsisH } from \"react-icons/fa\";\n+import { FaExchangeAlt } from \"react-icons/fa\";\n+import FilterTransactions from '../../components/FilterTransactions';\n+import moment from 'moment';\n+import 'moment/locale/id';\n+moment.locale('id');\n+\n+const ITEMS_PER_PAGE = 15;\n+\n+\n+const Transaction = ({ initialTransaction }) =>  {\n+  const { useAuthRedirect } = useRequireAuth(['admin', 'editor', 'superadmin']);\n+  useAuthRedirect();\n+  const [transactions, setTransactions] = useState([initialTransaction]);\n+  const [reTransactions, setReTransactions] = useState([initialTransaction])\n+  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n+  const [loading, setLoading] = useState(true);\n+  const { data: session, status } = useSession();\n+  const [searchTerm, setSearchTerm] = useState('');\n+  const [currentPage, setCurrentPage] = useState(0);\n+\n+  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n+  const [currentTransactionType, setCurrentTransactionType] = useState('');\n+\n+  const [showAlert, setShowAlert] = useState(false);\n+  const [alertMessage, setAlertMessage] = useState('');\n+  const [alertType, setAlertType] = useState('success');\n+  \n+  \n+\n+  const toggleSidebar = () => {\n+    setIsSidebarOpen(!isSidebarOpen);\n+  };\n+\n+  const formatCurrency = (amount) => {\n+    return new Intl.NumberFormat('id-ID', {\n+        style: 'currency',\n+        currency: 'IDR',\n+        minimumFractionDigits: 0,\n+    }).format(amount);\n+  };\n+\n+  const fetchTransactions = async () => {\n+    try {\n+        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n+            headers: {\n+              Authorization: `Bearer ${session.accessToken}`,\n+            },\n+        });\n+        setTransactions(res.data.data);\n+        setReTransactions(res.data.data);\n+        setLoading(false);\n+    } catch (error) {\n+        console.error('Error fetching houses data:', error);\n+        setLoading(false);\n+    }\n+ };\n+\n+  useEffect(() => {\n+    if (session) {\n+        fetchTransactions();\n+    }\n+\n+  }, [session, status]);\n+\n+  const handleSearchChange = (event) => {\n+    setSearchTerm(event.target.value);\n+  };\n+\n+  const filteredTransactions = transactions.filter(transaction => \n+    (transaction.description && transaction.description.toLowerCase().includes(searchTerm.toLowerCase()))\n+  );\n+\n+  const offset = currentPage * ITEMS_PER_PAGE;\n+  const currentPageData = filteredTransactions.slice(offset, offset + ITEMS_PER_PAGE);\n+\n+  const handlePageClick = (data) => {\n+    setCurrentPage(data.selected);\n+  };\n+\n+\n+  const getStatusIcon = (status) => {\n+    switch (status) {\n+      case 'berhasil':\n+        return <FaCheckCircle className=\"text-green-500\" />;\n+      case 'gagal':\n+        return <FaTimesCircle className=\"text-red-500\" />;\n+      case 'sedang dicek':\n+        return <FaHourglassHalf className=\"text-yellow-500\" />;\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const getTypeIcon = (type) => {\n+    switch (type) {\n+      case 'income':\n+        return <FaRegArrowAltCircleDown  className=\"text-blue-700 h-4 w-4 md:h-5 md:w-5 \" />;\n+      case 'expense':\n+        return <FaRegArrowAltCircleUp  className=\"text-red-700 h-4 w-4 md:h-5 md:w-5 \" />;\n+      case 'ipl':\n+        return <FaExchangeAlt  className=\"text-green-700  h-3 w-3 md:h-4 md:w-4 \" />;\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const getTextColor = (type) => {\n+    switch (type) {\n+      case 'income':\n+        return \"text-blue-700\";\n+      case 'expense':\n+        return \"text-red-700\";\n+      case 'ipl':\n+        return \"text-green-700\";\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const handlePaymentClick = () => {\n+    setCurrentTransactionType('ipl');\n+    setIsDrawerOpen(true);\n+  };\n+\n+  const handleIncomeClick = () => {\n+    setCurrentTransactionType('income');\n+    setIsDrawerOpen(true);\n+  };\n+\n+  const handleExpenseClick = () => {\n+    setCurrentTransactionType('expense');\n+    setIsDrawerOpen(true);\n+  };\n+\n+  const handleDrawerSubmit = async (transactionData) => {\n+    try {\n+      const response = await axios.post(\n+        `${process.env.NEXT_PUBLIC_API_URL}/transactions/create`, \n+        transactionData, // Hanya data yang dikirim dalam body\n+        {\n+          headers: {\n+            Authorization: `Bearer ${session.accessToken}`, // Tempatkan headers di opsi konfigurasi\n+            'Content-Type': 'application/json',\n+          },\n+        }\n+      );\n+      setAlertType('success');\n+      setAlertMessage('Transaksi berhasil ditambahkan');\n+      setShowAlert(true);\n+     // alert('Transaksi berhasil ditambahkan');\n+      // Refresh data atau navigasi sesuai kebutuhan\n+      fetchTransactions();\n+    } catch (error) {\n+      setAlertType('failure');\n+      setAlertMessage('Gagal menambahkan transaksi');\n+      setShowAlert(true);\n+      console.error('Error creating transaction:', error);\n+    }\n+  };\n+  \n+  const handleAlertDismiss = () => {\n+    setShowAlert(false);\n+  };\n+\n+  if (loading) {\n+    return <Spinner />;\n+  }\n+\n+ // console.log(transactions)\n+\n+  return (\n+    <>\n+   \n+    <Header toggleSidebar={toggleSidebar}/>\n+    <main className='max-w-screen-xl mx-auto'>\n+      <div className='w-full'>\n+        <SideMenu isOpen={isSidebarOpen}/>\n+        <section className='mt-14 px-5 py-5 md:px-8 sm:ml-64'>\n+        {showAlert && (\n+            <Alert className='' color={alertType === 'success' ? 'success' : 'failure'} onDismiss={handleAlertDismiss}>\n+                <span className=\"font-medium\">{alertMessage}</span>\n+            </Alert>\n+        )}\n+          <h1 className='text-xl mb-4 font-semibold text-gray-900 sm:text-2xl dark:text-white'>Data Transaksi</h1>\n+\n+          <Card className='w-full mb-10'>\n+            <h3 className='font-semibold mb-3'>Buat Transaksi Baru</h3>\n+              <div className='flex flex-wrap gap-2'>\n+              <Button size=\"sm\" color=\"success\" onClick={handlePaymentClick}>\n+                <FaExchangeAlt  className=\"mr-2 h-5 w-5\" />\n+                IPL\n+              </Button>\n+\n+              <Button size=\"sm\" color=\"blue\" onClick={handleIncomeClick}>\n+                <FaRegArrowAltCircleDown  className=\"mr-2 h-5 w-5\" />\n+                Masuk\n+              </Button>\n+              <Button size=\"sm\" color=\"failure\" onClick={handleExpenseClick}>\n+                Keluar\n+                <FaRegArrowAltCircleUp  className=\"ml-2 h-5 w-5\" />\n+              </Button>\n+              </div>\n+          </Card>\n+\n+          <TransactionDrawer\n+            isOpen={isDrawerOpen}\n+            onClose={() => setIsDrawerOpen(false)}\n+            onSubmit={handleDrawerSubmit}\n+            transactionType={currentTransactionType}\n+          />\n+\n+          <div className=\"max-w-md mb-4 flex\">\n+\n+            <TextInput \n+              name=\"name\"\n+              placeholder=\"Cari\"\n+              value={searchTerm}\n+              onChange={handleSearchChange}\n+              className=\"mr-2 w-3/5\"\n+              icon={HiOutlineSearch} \n+            />\n+\n+            <FilterTransactions className=\"w-2/5\" setTransactions={setTransactions} initialTransaction={reTransactions} />\n+\n+          </div>\n+\n+          <div className='overflow-x-auto'>\n+            <Table hoverable>\n+              <Table.Head>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 w-3/4'>Keterangan</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tanggal</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Nominal</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tipe</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Status</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>\n+                    <span className=\"sr-only\">Edit</span>\n+                </Table.HeadCell>\n+              </Table.Head>\n+              <Table.Body className=\"divide-y\">\n+                \n+                {currentPageData.map((transaction, index) => ( \n+                  <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n+                    <Table.Cell className={`py-2 px-2 md:py-3 md:px-3 ${getTextColor(transaction.transaction_type)}`}>\n+                      <span className='flex items-start content-start'>\n+                        <span>{getTypeIcon(transaction.transaction_type)} </span>\n+                        <span className=\"ml-2\">{transaction.description}</span> \n+                      </span>\n+                    </Table.Cell>\n+                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}</Table.Cell>\n+                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{formatCurrency(transaction.amount)}</Table.Cell>\n+                    \n+                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n+                      <span className='flex items-center'>\n+                        {getStatusIcon(transaction.payment_type)} \n+                      </span>\n+                    </Table.Cell>\n+                    <Table.Cell className={`items-center flex justify-center content-center py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n+                      <span className='flex items-center'>\n+                        {getStatusIcon(transaction.status)} \n+                      </span>\n+                    </Table.Cell>\n+                    <Table.Cell className='py-2 px-2 md:py-3 md:px-3 text-xs md:text-base'>\n+                      <Dropdown  className=\"relative z-10\" align=\"right\" label=\"\" renderTrigger={() => <span><FaEllipsisH  className=\"h-4 w-4\" /></span>}>\n+                        <Dropdown.Item><FaRegEdit className='mr-1'/><span>Edit</span></Dropdown.Item>\n+                        <Dropdown.Item><FaEye className='mr-1'/><span>View</span></Dropdown.Item>\n+                        <Dropdown.Item>Delete</Dropdown.Item>\n+                      </Dropdown>\n+\n+                    </Table.Cell>\n+                </Table.Row>\n+\n+                ))}\n+              </Table.Body>\n+            </Table>\n+          </div>\n+          <nav className='py-6'>\n+          <ReactPaginate\n+                previousLabel={'Previous'}\n+                nextLabel={'Next'}\n+                breakLabel={'...'}\n+                pageCount={Math.ceil(filteredTransactions.length / ITEMS_PER_PAGE)}\n+                marginPagesDisplayed={2}\n+                pageRangeDisplayed={5}\n+                onPageChange={handlePageClick}\n+                containerClassName={'pagination flex justify-center -space-x-px text-sm'}\n+                pageClassName={'page-item'}\n+                pageLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                previousClassName={'page-item'}\n+                previousLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                nextClassName={'page-item'}\n+                nextLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                breakClassName={'page-item'}\n+                breakLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                activeClassName={'active'}\n+                activeLinkClassName={'bg-gray-300'}\n+            />\n+          </nav>\n+\n+        </section>\n+\n+      </div>\n+      \n+      \n+    </main>\n+    </>\n+  );\n+}\n+\n+export const getServerSideProps = async (context) => {\n+  const session = await getSession(context);\n+  \n+  if (!session) {\n+      return {\n+          redirect: {\n+              destination: '/',\n+              permanent: false,\n+          },\n+      };\n+  }\n+\n+  try {\n+      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n+          headers: {\n+              Authorization: `Bearer ${session.accessToken}`,\n+          },\n+      });\n+      return {\n+          props: {\n+            initialTransaction: res.data,\n+          },\n+      };\n+  } catch (error) {\n+      console.error('Error fetching houses data:', error);\n+      return {\n+          props: {\n+            initialTransaction: [],\n+          },\n+      };\n+  }\n+};\n+\n+export default Transaction;\n"
                },
                {
                    "date": 1722400558664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,359 @@\n+// pages/home.js\n+import { getSession, useSession } from 'next-auth/react';\n+import { useEffect,useState } from 'react';\n+import axios from 'axios';\n+import { useRequireAuth } from '../../utils/authUtils'; \n+import ReactPaginate from 'react-paginate';\n+\n+import Header from '../../components/Header';\n+import SideMenu from '../../components/dashboard/Sidebar';\n+import TransactionDrawer from '../../components/dashboard/TransactionDrawer';\n+import Spinner from '../../components/Spinner';\n+import { Card, Button,TextInput,Drawer,Select, Table,Dropdown, Alert  } from \"flowbite-react\";\n+import { HiOutlineSearch } from \"react-icons/hi\";\n+import {  FaCheckCircle, FaTimesCircle, FaHourglassHalf,FaRegEdit,FaEye,FaRegTrashAlt } from 'react-icons/fa';\n+import { FaRegArrowAltCircleDown } from \"react-icons/fa\";\n+import { FaRegArrowAltCircleUp } from \"react-icons/fa\";\n+import { FaEllipsisH } from \"react-icons/fa\";\n+import { FaExchangeAlt } from \"react-icons/fa\";\n+import FilterTransactions from '../../components/FilterTransactions';\n+import moment from 'moment';\n+import 'moment/locale/id';\n+moment.locale('id');\n+\n+const ITEMS_PER_PAGE = 15;\n+\n+\n+const Transaction = ({ initialTransaction }) =>  {\n+  const { useAuthRedirect } = useRequireAuth(['admin', 'editor', 'superadmin']);\n+  useAuthRedirect();\n+  const [transactions, setTransactions] = useState([initialTransaction]);\n+  const [reTransactions, setReTransactions] = useState([initialTransaction])\n+  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n+  const [loading, setLoading] = useState(true);\n+  const { data: session, status } = useSession();\n+  const [searchTerm, setSearchTerm] = useState('');\n+  const [currentPage, setCurrentPage] = useState(0);\n+\n+  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n+  const [currentTransactionType, setCurrentTransactionType] = useState('');\n+\n+  const [showAlert, setShowAlert] = useState(false);\n+  const [alertMessage, setAlertMessage] = useState('');\n+  const [alertType, setAlertType] = useState('success');\n+  \n+  \n+\n+  const toggleSidebar = () => {\n+    setIsSidebarOpen(!isSidebarOpen);\n+  };\n+\n+  const formatCurrency = (amount) => {\n+    return new Intl.NumberFormat('id-ID', {\n+        style: 'currency',\n+        currency: 'IDR',\n+        minimumFractionDigits: 0,\n+    }).format(amount);\n+  };\n+\n+  const fetchTransactions = async () => {\n+    try {\n+        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n+            headers: {\n+              Authorization: `Bearer ${session.accessToken}`,\n+            },\n+        });\n+        setTransactions(res.data.data);\n+        setReTransactions(res.data.data);\n+        setLoading(false);\n+    } catch (error) {\n+        console.error('Error fetching houses data:', error);\n+        setLoading(false);\n+    }\n+ };\n+\n+  useEffect(() => {\n+    if (session) {\n+        fetchTransactions();\n+    }\n+\n+  }, [session, status]);\n+\n+  const handleSearchChange = (event) => {\n+    setSearchTerm(event.target.value);\n+  };\n+\n+  const filteredTransactions = transactions.filter(transaction => \n+    (transaction.description && transaction.description.toLowerCase().includes(searchTerm.toLowerCase()))\n+  );\n+\n+  const offset = currentPage * ITEMS_PER_PAGE;\n+  const currentPageData = filteredTransactions.slice(offset, offset + ITEMS_PER_PAGE);\n+\n+  const handlePageClick = (data) => {\n+    setCurrentPage(data.selected);\n+  };\n+\n+\n+  const getStatusIcon = (status) => {\n+    switch (status) {\n+      case 'berhasil':\n+        return <FaCheckCircle className=\"text-green-500\" />;\n+      case 'gagal':\n+        return <FaTimesCircle className=\"text-red-500\" />;\n+      case 'sedang dicek':\n+        return <FaHourglassHalf className=\"text-yellow-500\" />;\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const getTypeIcon = (type) => {\n+    switch (type) {\n+      case 'income':\n+        return <FaRegArrowAltCircleDown  className=\"text-blue-700 h-4 w-4 md:h-5 md:w-5 \" />;\n+      case 'expense':\n+        return <FaRegArrowAltCircleUp  className=\"text-red-700 h-4 w-4 md:h-5 md:w-5 \" />;\n+      case 'ipl':\n+        return <FaExchangeAlt  className=\"text-green-700  h-3 w-3 md:h-4 md:w-4 \" />;\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const getTextColor = (type) => {\n+    switch (type) {\n+      case 'income':\n+        return \"text-blue-700\";\n+      case 'expense':\n+        return \"text-red-700\";\n+      case 'ipl':\n+        return \"text-green-700\";\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const handlePaymentClick = () => {\n+    setCurrentTransactionType('ipl');\n+    setIsDrawerOpen(true);\n+  };\n+\n+  const handleIncomeClick = () => {\n+    setCurrentTransactionType('income');\n+    setIsDrawerOpen(true);\n+  };\n+\n+  const handleExpenseClick = () => {\n+    setCurrentTransactionType('expense');\n+    setIsDrawerOpen(true);\n+  };\n+\n+  const handleDrawerSubmit = async (transactionData) => {\n+    try {\n+      const response = await axios.post(\n+        `${process.env.NEXT_PUBLIC_API_URL}/transactions/create`, \n+        transactionData, // Hanya data yang dikirim dalam body\n+        {\n+          headers: {\n+            Authorization: `Bearer ${session.accessToken}`, // Tempatkan headers di opsi konfigurasi\n+            'Content-Type': 'application/json',\n+          },\n+        }\n+      );\n+      setAlertType('success');\n+      setAlertMessage('Transaksi berhasil ditambahkan');\n+      setShowAlert(true);\n+     // alert('Transaksi berhasil ditambahkan');\n+      // Refresh data atau navigasi sesuai kebutuhan\n+      fetchTransactions();\n+    } catch (error) {\n+      setAlertType('failure');\n+      setAlertMessage('Gagal menambahkan transaksi');\n+      setShowAlert(true);\n+      console.error('Error creating transaction:', error);\n+    }\n+  };\n+  \n+  const handleAlertDismiss = () => {\n+    setShowAlert(false);\n+  };\n+\n+  if (loading) {\n+    return <Spinner />;\n+  }\n+\n+ // console.log(transactions)\n+\n+  return (\n+    <>\n+   \n+    <Header toggleSidebar={toggleSidebar}/>\n+    <main className='max-w-screen-xl mx-auto'>\n+      <div className='w-full'>\n+        <SideMenu isOpen={isSidebarOpen}/>\n+        <section className='mt-14 px-5 py-5 md:px-8 sm:ml-64'>\n+        {showAlert && (\n+            <Alert className='' color={alertType === 'success' ? 'success' : 'failure'} onDismiss={handleAlertDismiss}>\n+                <span className=\"font-medium\">{alertMessage}</span>\n+            </Alert>\n+        )}\n+          <h1 className='text-xl mb-4 font-semibold text-gray-900 sm:text-2xl dark:text-white'>Data Transaksi</h1>\n+\n+          <Card className='w-full mb-10'>\n+            <h3 className='font-semibold mb-3'>Buat Transaksi Baru</h3>\n+              <div className='flex flex-wrap gap-2'>\n+              <Button size=\"sm\" color=\"success\" onClick={handlePaymentClick}>\n+                <FaExchangeAlt  className=\"mr-2 h-5 w-5\" />\n+                IPL\n+              </Button>\n+\n+              <Button size=\"sm\" color=\"blue\" onClick={handleIncomeClick}>\n+                <FaRegArrowAltCircleDown  className=\"mr-2 h-5 w-5\" />\n+                Masuk\n+              </Button>\n+              <Button size=\"sm\" color=\"failure\" onClick={handleExpenseClick}>\n+                Keluar\n+                <FaRegArrowAltCircleUp  className=\"ml-2 h-5 w-5\" />\n+              </Button>\n+              </div>\n+          </Card>\n+\n+          <TransactionDrawer\n+            isOpen={isDrawerOpen}\n+            onClose={() => setIsDrawerOpen(false)}\n+            onSubmit={handleDrawerSubmit}\n+            transactionType={currentTransactionType}\n+          />\n+\n+          <div className=\"max-w-md mb-4 flex\">\n+\n+            <TextInput \n+              name=\"name\"\n+              placeholder=\"Cari\"\n+              value={searchTerm}\n+              onChange={handleSearchChange}\n+              className=\"mr-2 w-3/5\"\n+              icon={HiOutlineSearch} \n+            />\n+\n+            <FilterTransactions className=\"w-2/5\" setTransactions={setTransactions} initialTransaction={reTransactions} />\n+\n+          </div>\n+\n+          <div className='overflow-x-auto'>\n+            <Table hoverable>\n+              <Table.Head>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 w-3/4'>Keterangan</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tanggal</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Nominal</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tipe</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Status</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>\n+                    <span className=\"sr-only\">Edit</span>\n+                </Table.HeadCell>\n+              </Table.Head>\n+              <Table.Body className=\"divide-y\">\n+                \n+                {currentPageData.map((transaction, index) => ( \n+                  <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n+                    <Table.Cell className={`py-2 px-2 md:py-3 md:px-3 ${getTextColor(transaction.transaction_type)}`}>\n+                      <span className='flex items-start content-start'>\n+                        <span>{getTypeIcon(transaction.transaction_type)} </span>\n+                        <span className=\"ml-2\">{transaction.description}</span> \n+                      </span>\n+                    </Table.Cell>\n+                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}</Table.Cell>\n+                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{formatCurrency(transaction.amount)}</Table.Cell>\n+                    \n+                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n+                      <span className='flex items-center'>\n+                        {getStatusIcon(transaction.payment_type)} \n+                      </span>\n+                    </Table.Cell>\n+                    <Table.Cell className={`items-center flex justify-center content-center py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n+                      <span className='flex items-center'>\n+                        {getStatusIcon(transaction.status)} \n+                      </span>\n+                    </Table.Cell>\n+                    <Table.Cell className='py-2 px-2 md:py-3 md:px-3 text-xs md:text-base'>\n+                      <Dropdown  className=\"relative z-10\" align=\"right\" label=\"\" renderTrigger={() => <span><FaEllipsisH  className=\"h-4 w-4\" /></span>}>\n+                        <Dropdown.Item><FaRegEdit className='mr-1'/><span>Edit</span></Dropdown.Item>\n+                        <Dropdown.Item><FaEye className='mr-1'/><span>View</span></Dropdown.Item>\n+                        <Dropdown.Item>Delete</Dropdown.Item>\n+                      </Dropdown>\n+\n+                    </Table.Cell>\n+                </Table.Row>\n+\n+                ))}\n+              </Table.Body>\n+            </Table>\n+          </div>\n+          <nav className='py-6'>\n+          <ReactPaginate\n+                previousLabel={'Previous'}\n+                nextLabel={'Next'}\n+                breakLabel={'...'}\n+                pageCount={Math.ceil(filteredTransactions.length / ITEMS_PER_PAGE)}\n+                marginPagesDisplayed={2}\n+                pageRangeDisplayed={5}\n+                onPageChange={handlePageClick}\n+                containerClassName={'pagination flex justify-center -space-x-px text-sm'}\n+                pageClassName={'page-item'}\n+                pageLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                previousClassName={'page-item'}\n+                previousLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                nextClassName={'page-item'}\n+                nextLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                breakClassName={'page-item'}\n+                breakLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                activeClassName={'active'}\n+                activeLinkClassName={'bg-gray-300'}\n+            />\n+          </nav>\n+\n+        </section>\n+\n+      </div>\n+      \n+      \n+    </main>\n+    </>\n+  );\n+}\n+\n+export const getServerSideProps = async (context) => {\n+  const session = await getSession(context);\n+  \n+  if (!session) {\n+      return {\n+          redirect: {\n+              destination: '/',\n+              permanent: false,\n+          },\n+      };\n+  }\n+\n+  try {\n+      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n+          headers: {\n+              Authorization: `Bearer ${session.accessToken}`,\n+          },\n+      });\n+      return {\n+          props: {\n+            initialTransaction: res.data,\n+          },\n+      };\n+  } catch (error) {\n+      console.error('Error fetching houses data:', error);\n+      return {\n+          props: {\n+            initialTransaction: [],\n+          },\n+      };\n+  }\n+};\n+\n+export default Transaction;\n"
                },
                {
                    "date": 1722400574848,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -279,9 +279,9 @@\n                     <Table.Cell className='py-2 px-2 md:py-3 md:px-3 text-xs md:text-base'>\n                       <Dropdown  className=\"relative z-10\" align=\"right\" label=\"\" renderTrigger={() => <span><FaEllipsisH  className=\"h-4 w-4\" /></span>}>\n                         <Dropdown.Item><FaRegEdit className='mr-1'/><span>Edit</span></Dropdown.Item>\n                         <Dropdown.Item><FaEye className='mr-1'/><span>View</span></Dropdown.Item>\n-                        <Dropdown.Item>Delete</Dropdown.Item>\n+                        <Dropdown.Item><FaRegTrashAlt className='mr-1' />Delete</Dropdown.Item>\n                       </Dropdown>\n \n                     </Table.Cell>\n                 </Table.Row>\n@@ -356,1440 +356,4 @@\n   }\n };\n \n export default Transaction;\n-// pages/home.js\n-import { getSession, useSession } from 'next-auth/react';\n-import { useEffect,useState } from 'react';\n-import axios from 'axios';\n-import { useRequireAuth } from '../../utils/authUtils'; \n-import ReactPaginate from 'react-paginate';\n-\n-import Header from '../../components/Header';\n-import SideMenu from '../../components/dashboard/Sidebar';\n-import TransactionDrawer from '../../components/dashboard/TransactionDrawer';\n-import Spinner from '../../components/Spinner';\n-import { Card, Button,TextInput,Drawer,Select, Table,Dropdown, Alert  } from \"flowbite-react\";\n-import { HiOutlineSearch } from \"react-icons/hi\";\n-import {  FaCheckCircle, FaTimesCircle, FaHourglassHalf,FaRegEdit,FaEye } from 'react-icons/fa';\n-import { FaRegArrowAltCircleDown } from \"react-icons/fa\";\n-import { FaRegArrowAltCircleUp } from \"react-icons/fa\";\n-import { FaEllipsisH } from \"react-icons/fa\";\n-import { FaExchangeAlt } from \"react-icons/fa\";\n-import FilterTransactions from '../../components/FilterTransactions';\n-import moment from 'moment';\n-import 'moment/locale/id';\n-moment.locale('id');\n-\n-const ITEMS_PER_PAGE = 15;\n-\n-\n-const Transaction = ({ initialTransaction }) =>  {\n-  const { useAuthRedirect } = useRequireAuth(['admin', 'editor', 'superadmin']);\n-  useAuthRedirect();\n-  const [transactions, setTransactions] = useState([initialTransaction]);\n-  const [reTransactions, setReTransactions] = useState([initialTransaction])\n-  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n-  const [loading, setLoading] = useState(true);\n-  const { data: session, status } = useSession();\n-  const [searchTerm, setSearchTerm] = useState('');\n-  const [currentPage, setCurrentPage] = useState(0);\n-\n-  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n-  const [currentTransactionType, setCurrentTransactionType] = useState('');\n-\n-  const [showAlert, setShowAlert] = useState(false);\n-  const [alertMessage, setAlertMessage] = useState('');\n-  const [alertType, setAlertType] = useState('success');\n-  \n-  \n-\n-  const toggleSidebar = () => {\n-    setIsSidebarOpen(!isSidebarOpen);\n-  };\n-\n-  const formatCurrency = (amount) => {\n-    return new Intl.NumberFormat('id-ID', {\n-        style: 'currency',\n-        currency: 'IDR',\n-        minimumFractionDigits: 0,\n-    }).format(amount);\n-  };\n-\n-  const fetchTransactions = async () => {\n-    try {\n-        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n-            headers: {\n-              Authorization: `Bearer ${session.accessToken}`,\n-            },\n-        });\n-        setTransactions(res.data.data);\n-        setReTransactions(res.data.data);\n-        setLoading(false);\n-    } catch (error) {\n-        console.error('Error fetching houses data:', error);\n-        setLoading(false);\n-    }\n- };\n-\n-  useEffect(() => {\n-    if (session) {\n-        fetchTransactions();\n-    }\n-\n-  }, [session, status]);\n-\n-  const handleSearchChange = (event) => {\n-    setSearchTerm(event.target.value);\n-  };\n-\n-  const filteredTransactions = transactions.filter(transaction => \n-    (transaction.description && transaction.description.toLowerCase().includes(searchTerm.toLowerCase()))\n-  );\n-\n-  const offset = currentPage * ITEMS_PER_PAGE;\n-  const currentPageData = filteredTransactions.slice(offset, offset + ITEMS_PER_PAGE);\n-\n-  const handlePageClick = (data) => {\n-    setCurrentPage(data.selected);\n-  };\n-\n-\n-  const getStatusIcon = (status) => {\n-    switch (status) {\n-      case 'berhasil':\n-        return <FaCheckCircle className=\"text-green-500\" />;\n-      case 'gagal':\n-        return <FaTimesCircle className=\"text-red-500\" />;\n-      case 'sedang dicek':\n-        return <FaHourglassHalf className=\"text-yellow-500\" />;\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const getTypeIcon = (type) => {\n-    switch (type) {\n-      case 'income':\n-        return <FaRegArrowAltCircleDown  className=\"text-blue-700 h-4 w-4 md:h-5 md:w-5 \" />;\n-      case 'expense':\n-        return <FaRegArrowAltCircleUp  className=\"text-red-700 h-4 w-4 md:h-5 md:w-5 \" />;\n-      case 'ipl':\n-        return <FaExchangeAlt  className=\"text-green-700  h-3 w-3 md:h-4 md:w-4 \" />;\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const getTextColor = (type) => {\n-    switch (type) {\n-      case 'income':\n-        return \"text-blue-700\";\n-      case 'expense':\n-        return \"text-red-700\";\n-      case 'ipl':\n-        return \"text-green-700\";\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const handlePaymentClick = () => {\n-    setCurrentTransactionType('ipl');\n-    setIsDrawerOpen(true);\n-  };\n-\n-  const handleIncomeClick = () => {\n-    setCurrentTransactionType('income');\n-    setIsDrawerOpen(true);\n-  };\n-\n-  const handleExpenseClick = () => {\n-    setCurrentTransactionType('expense');\n-    setIsDrawerOpen(true);\n-  };\n-\n-  const handleDrawerSubmit = async (transactionData) => {\n-    try {\n-      const response = await axios.post(\n-        `${process.env.NEXT_PUBLIC_API_URL}/transactions/create`, \n-        transactionData, // Hanya data yang dikirim dalam body\n-        {\n-          headers: {\n-            Authorization: `Bearer ${session.accessToken}`, // Tempatkan headers di opsi konfigurasi\n-            'Content-Type': 'application/json',\n-          },\n-        }\n-      );\n-      setAlertType('success');\n-      setAlertMessage('Transaksi berhasil ditambahkan');\n-      setShowAlert(true);\n-     // alert('Transaksi berhasil ditambahkan');\n-      // Refresh data atau navigasi sesuai kebutuhan\n-      fetchTransactions();\n-    } catch (error) {\n-      setAlertType('failure');\n-      setAlertMessage('Gagal menambahkan transaksi');\n-      setShowAlert(true);\n-      console.error('Error creating transaction:', error);\n-    }\n-  };\n-  \n-  const handleAlertDismiss = () => {\n-    setShowAlert(false);\n-  };\n-\n-  if (loading) {\n-    return <Spinner />;\n-  }\n-\n- // console.log(transactions)\n-\n-  return (\n-    <>\n-   \n-    <Header toggleSidebar={toggleSidebar}/>\n-    <main className='max-w-screen-xl mx-auto'>\n-      <div className='w-full'>\n-        <SideMenu isOpen={isSidebarOpen}/>\n-        <section className='mt-14 px-5 py-5 md:px-8 sm:ml-64'>\n-        {showAlert && (\n-            <Alert className='' color={alertType === 'success' ? 'success' : 'failure'} onDismiss={handleAlertDismiss}>\n-                <span className=\"font-medium\">{alertMessage}</span>\n-            </Alert>\n-        )}\n-          <h1 className='text-xl mb-4 font-semibold text-gray-900 sm:text-2xl dark:text-white'>Data Transaksi</h1>\n-\n-          <Card className='w-full mb-10'>\n-            <h3 className='font-semibold mb-3'>Buat Transaksi Baru</h3>\n-              <div className='flex flex-wrap gap-2'>\n-              <Button size=\"sm\" color=\"success\" onClick={handlePaymentClick}>\n-                <FaExchangeAlt  className=\"mr-2 h-5 w-5\" />\n-                IPL\n-              </Button>\n-\n-              <Button size=\"sm\" color=\"blue\" onClick={handleIncomeClick}>\n-                <FaRegArrowAltCircleDown  className=\"mr-2 h-5 w-5\" />\n-                Masuk\n-              </Button>\n-              <Button size=\"sm\" color=\"failure\" onClick={handleExpenseClick}>\n-                Keluar\n-                <FaRegArrowAltCircleUp  className=\"ml-2 h-5 w-5\" />\n-              </Button>\n-              </div>\n-          </Card>\n-\n-          <TransactionDrawer\n-            isOpen={isDrawerOpen}\n-            onClose={() => setIsDrawerOpen(false)}\n-            onSubmit={handleDrawerSubmit}\n-            transactionType={currentTransactionType}\n-          />\n-\n-          <div className=\"max-w-md mb-4 flex\">\n-\n-            <TextInput \n-              name=\"name\"\n-              placeholder=\"Cari\"\n-              value={searchTerm}\n-              onChange={handleSearchChange}\n-              className=\"mr-2 w-3/5\"\n-              icon={HiOutlineSearch} \n-            />\n-\n-            <FilterTransactions className=\"w-2/5\" setTransactions={setTransactions} initialTransaction={reTransactions} />\n-\n-          </div>\n-\n-          <div className='overflow-x-auto'>\n-            <Table hoverable>\n-              <Table.Head>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 w-3/4'>Keterangan</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tanggal</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Nominal</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tipe</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Status</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>\n-                    <span className=\"sr-only\">Edit</span>\n-                </Table.HeadCell>\n-              </Table.Head>\n-              <Table.Body className=\"divide-y\">\n-                \n-                {currentPageData.map((transaction, index) => ( \n-                  <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-                    <Table.Cell className={`py-2 px-2 md:py-3 md:px-3 ${getTextColor(transaction.transaction_type)}`}>\n-                      <span className='flex items-start content-start'>\n-                        <span>{getTypeIcon(transaction.transaction_type)} </span>\n-                        <span className=\"ml-2\">{transaction.description}</span> \n-                      </span>\n-                    </Table.Cell>\n-                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}</Table.Cell>\n-                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{formatCurrency(transaction.amount)}</Table.Cell>\n-                    \n-                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n-                      <span className='flex items-center'>\n-                        {getStatusIcon(transaction.payment_type)} \n-                      </span>\n-                    </Table.Cell>\n-                    <Table.Cell className={`items-center flex justify-center content-center py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n-                      <span className='flex items-center'>\n-                        {getStatusIcon(transaction.status)} \n-                      </span>\n-                    </Table.Cell>\n-                    <Table.Cell className='py-2 px-2 md:py-3 md:px-3 text-xs md:text-base'>\n-                      <Dropdown  className=\"relative z-10\" align=\"right\" label=\"\" renderTrigger={() => <span><FaEllipsisH  className=\"h-4 w-4\" /></span>}>\n-                        <Dropdown.Item><FaRegEdit className='mr-1'/><span>Edit</span></Dropdown.Item>\n-                        <Dropdown.Item><FaEye className='mr-1'/><span>View</span></Dropdown.Item>\n-                        <Dropdown.Item>Delete</Dropdown.Item>\n-                      </Dropdown>\n-\n-                    </Table.Cell>\n-                </Table.Row>\n-\n-                ))}\n-              </Table.Body>\n-            </Table>\n-          </div>\n-          <nav className='py-6'>\n-          <ReactPaginate\n-                previousLabel={'Previous'}\n-                nextLabel={'Next'}\n-                breakLabel={'...'}\n-                pageCount={Math.ceil(filteredTransactions.length / ITEMS_PER_PAGE)}\n-                marginPagesDisplayed={2}\n-                pageRangeDisplayed={5}\n-                onPageChange={handlePageClick}\n-                containerClassName={'pagination flex justify-center -space-x-px text-sm'}\n-                pageClassName={'page-item'}\n-                pageLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                previousClassName={'page-item'}\n-                previousLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                nextClassName={'page-item'}\n-                nextLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                breakClassName={'page-item'}\n-                breakLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                activeClassName={'active'}\n-                activeLinkClassName={'bg-gray-300'}\n-            />\n-          </nav>\n-\n-        </section>\n-\n-      </div>\n-      \n-      \n-    </main>\n-    </>\n-  );\n-}\n-\n-export const getServerSideProps = async (context) => {\n-  const session = await getSession(context);\n-  \n-  if (!session) {\n-      return {\n-          redirect: {\n-              destination: '/',\n-              permanent: false,\n-          },\n-      };\n-  }\n-\n-  try {\n-      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n-          headers: {\n-              Authorization: `Bearer ${session.accessToken}`,\n-          },\n-      });\n-      return {\n-          props: {\n-            initialTransaction: res.data,\n-          },\n-      };\n-  } catch (error) {\n-      console.error('Error fetching houses data:', error);\n-      return {\n-          props: {\n-            initialTransaction: [],\n-          },\n-      };\n-  }\n-};\n-\n-export default Transaction;\n-// pages/home.js\n-import { getSession, useSession } from 'next-auth/react';\n-import { useEffect,useState } from 'react';\n-import axios from 'axios';\n-import { useRequireAuth } from '../../utils/authUtils'; \n-import ReactPaginate from 'react-paginate';\n-\n-import Header from '../../components/Header';\n-import SideMenu from '../../components/dashboard/Sidebar';\n-import TransactionDrawer from '../../components/dashboard/TransactionDrawer';\n-import Spinner from '../../components/Spinner';\n-import { Card, Button,TextInput,Drawer,Select, Table,Dropdown, Alert  } from \"flowbite-react\";\n-import { HiOutlineSearch } from \"react-icons/hi\";\n-import {  FaCheckCircle, FaTimesCircle, FaHourglassHalf,FaRegEdit,FaEye } from 'react-icons/fa';\n-import { FaRegArrowAltCircleDown } from \"react-icons/fa\";\n-import { FaRegArrowAltCircleUp } from \"react-icons/fa\";\n-import { FaEllipsisH } from \"react-icons/fa\";\n-import { FaExchangeAlt } from \"react-icons/fa\";\n-import FilterTransactions from '../../components/FilterTransactions';\n-import moment from 'moment';\n-import 'moment/locale/id';\n-moment.locale('id');\n-\n-const ITEMS_PER_PAGE = 15;\n-\n-\n-const Transaction = ({ initialTransaction }) =>  {\n-  const { useAuthRedirect } = useRequireAuth(['admin', 'editor', 'superadmin']);\n-  useAuthRedirect();\n-  const [transactions, setTransactions] = useState([initialTransaction]);\n-  const [reTransactions, setReTransactions] = useState([initialTransaction])\n-  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n-  const [loading, setLoading] = useState(true);\n-  const { data: session, status } = useSession();\n-  const [searchTerm, setSearchTerm] = useState('');\n-  const [currentPage, setCurrentPage] = useState(0);\n-\n-  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n-  const [currentTransactionType, setCurrentTransactionType] = useState('');\n-\n-  const [showAlert, setShowAlert] = useState(false);\n-  const [alertMessage, setAlertMessage] = useState('');\n-  const [alertType, setAlertType] = useState('success');\n-  \n-  \n-\n-  const toggleSidebar = () => {\n-    setIsSidebarOpen(!isSidebarOpen);\n-  };\n-\n-  const formatCurrency = (amount) => {\n-    return new Intl.NumberFormat('id-ID', {\n-        style: 'currency',\n-        currency: 'IDR',\n-        minimumFractionDigits: 0,\n-    }).format(amount);\n-  };\n-\n-  const fetchTransactions = async () => {\n-    try {\n-        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n-            headers: {\n-              Authorization: `Bearer ${session.accessToken}`,\n-            },\n-        });\n-        setTransactions(res.data.data);\n-        setReTransactions(res.data.data);\n-        setLoading(false);\n-    } catch (error) {\n-        console.error('Error fetching houses data:', error);\n-        setLoading(false);\n-    }\n- };\n-\n-  useEffect(() => {\n-    if (session) {\n-        fetchTransactions();\n-    }\n-\n-  }, [session, status]);\n-\n-  const handleSearchChange = (event) => {\n-    setSearchTerm(event.target.value);\n-  };\n-\n-  const filteredTransactions = transactions.filter(transaction => \n-    (transaction.description && transaction.description.toLowerCase().includes(searchTerm.toLowerCase()))\n-  );\n-\n-  const offset = currentPage * ITEMS_PER_PAGE;\n-  const currentPageData = filteredTransactions.slice(offset, offset + ITEMS_PER_PAGE);\n-\n-  const handlePageClick = (data) => {\n-    setCurrentPage(data.selected);\n-  };\n-\n-\n-  const getStatusIcon = (status) => {\n-    switch (status) {\n-      case 'berhasil':\n-        return <FaCheckCircle className=\"text-green-500\" />;\n-      case 'gagal':\n-        return <FaTimesCircle className=\"text-red-500\" />;\n-      case 'sedang dicek':\n-        return <FaHourglassHalf className=\"text-yellow-500\" />;\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const getTypeIcon = (type) => {\n-    switch (type) {\n-      case 'income':\n-        return <FaRegArrowAltCircleDown  className=\"text-blue-700 h-4 w-4 md:h-5 md:w-5 \" />;\n-      case 'expense':\n-        return <FaRegArrowAltCircleUp  className=\"text-red-700 h-4 w-4 md:h-5 md:w-5 \" />;\n-      case 'ipl':\n-        return <FaExchangeAlt  className=\"text-green-700  h-3 w-3 md:h-4 md:w-4 \" />;\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const getTextColor = (type) => {\n-    switch (type) {\n-      case 'income':\n-        return \"text-blue-700\";\n-      case 'expense':\n-        return \"text-red-700\";\n-      case 'ipl':\n-        return \"text-green-700\";\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const handlePaymentClick = () => {\n-    setCurrentTransactionType('ipl');\n-    setIsDrawerOpen(true);\n-  };\n-\n-  const handleIncomeClick = () => {\n-    setCurrentTransactionType('income');\n-    setIsDrawerOpen(true);\n-  };\n-\n-  const handleExpenseClick = () => {\n-    setCurrentTransactionType('expense');\n-    setIsDrawerOpen(true);\n-  };\n-\n-  const handleDrawerSubmit = async (transactionData) => {\n-    try {\n-      const response = await axios.post(\n-        `${process.env.NEXT_PUBLIC_API_URL}/transactions/create`, \n-        transactionData, // Hanya data yang dikirim dalam body\n-        {\n-          headers: {\n-            Authorization: `Bearer ${session.accessToken}`, // Tempatkan headers di opsi konfigurasi\n-            'Content-Type': 'application/json',\n-          },\n-        }\n-      );\n-      setAlertType('success');\n-      setAlertMessage('Transaksi berhasil ditambahkan');\n-      setShowAlert(true);\n-     // alert('Transaksi berhasil ditambahkan');\n-      // Refresh data atau navigasi sesuai kebutuhan\n-      fetchTransactions();\n-    } catch (error) {\n-      setAlertType('failure');\n-      setAlertMessage('Gagal menambahkan transaksi');\n-      setShowAlert(true);\n-      console.error('Error creating transaction:', error);\n-    }\n-  };\n-  \n-  const handleAlertDismiss = () => {\n-    setShowAlert(false);\n-  };\n-\n-  if (loading) {\n-    return <Spinner />;\n-  }\n-\n- // console.log(transactions)\n-\n-  return (\n-    <>\n-   \n-    <Header toggleSidebar={toggleSidebar}/>\n-    <main className='max-w-screen-xl mx-auto'>\n-      <div className='w-full'>\n-        <SideMenu isOpen={isSidebarOpen}/>\n-        <section className='mt-14 px-5 py-5 md:px-8 sm:ml-64'>\n-        {showAlert && (\n-            <Alert className='' color={alertType === 'success' ? 'success' : 'failure'} onDismiss={handleAlertDismiss}>\n-                <span className=\"font-medium\">{alertMessage}</span>\n-            </Alert>\n-        )}\n-          <h1 className='text-xl mb-4 font-semibold text-gray-900 sm:text-2xl dark:text-white'>Data Transaksi</h1>\n-\n-          <Card className='w-full mb-10'>\n-            <h3 className='font-semibold mb-3'>Buat Transaksi Baru</h3>\n-              <div className='flex flex-wrap gap-2'>\n-              <Button size=\"sm\" color=\"success\" onClick={handlePaymentClick}>\n-                <FaExchangeAlt  className=\"mr-2 h-5 w-5\" />\n-                IPL\n-              </Button>\n-\n-              <Button size=\"sm\" color=\"blue\" onClick={handleIncomeClick}>\n-                <FaRegArrowAltCircleDown  className=\"mr-2 h-5 w-5\" />\n-                Masuk\n-              </Button>\n-              <Button size=\"sm\" color=\"failure\" onClick={handleExpenseClick}>\n-                Keluar\n-                <FaRegArrowAltCircleUp  className=\"ml-2 h-5 w-5\" />\n-              </Button>\n-              </div>\n-          </Card>\n-\n-          <TransactionDrawer\n-            isOpen={isDrawerOpen}\n-            onClose={() => setIsDrawerOpen(false)}\n-            onSubmit={handleDrawerSubmit}\n-            transactionType={currentTransactionType}\n-          />\n-\n-          <div className=\"max-w-md mb-4 flex\">\n-\n-            <TextInput \n-              name=\"name\"\n-              placeholder=\"Cari\"\n-              value={searchTerm}\n-              onChange={handleSearchChange}\n-              className=\"mr-2 w-3/5\"\n-              icon={HiOutlineSearch} \n-            />\n-\n-            <FilterTransactions className=\"w-2/5\" setTransactions={setTransactions} initialTransaction={reTransactions} />\n-\n-          </div>\n-\n-          <div className='overflow-x-auto'>\n-            <Table hoverable>\n-              <Table.Head>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 w-3/4'>Keterangan</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tanggal</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Nominal</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tipe</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Status</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>\n-                    <span className=\"sr-only\">Edit</span>\n-                </Table.HeadCell>\n-              </Table.Head>\n-              <Table.Body className=\"divide-y\">\n-                \n-                {currentPageData.map((transaction, index) => ( \n-                  <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-                    <Table.Cell className={`py-2 px-2 md:py-3 md:px-3 ${getTextColor(transaction.transaction_type)}`}>\n-                      <span className='flex items-start content-start'>\n-                        <span>{getTypeIcon(transaction.transaction_type)} </span>\n-                        <span className=\"ml-2\">{transaction.description}</span> \n-                      </span>\n-                    </Table.Cell>\n-                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}</Table.Cell>\n-                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{formatCurrency(transaction.amount)}</Table.Cell>\n-                    \n-                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n-                      <span className='flex items-center'>\n-                        {getStatusIcon(transaction.payment_type)} \n-                      </span>\n-                    </Table.Cell>\n-                    <Table.Cell className={`items-center flex justify-center content-center py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n-                      <span className='flex items-center'>\n-                        {getStatusIcon(transaction.status)} \n-                      </span>\n-                    </Table.Cell>\n-                    <Table.Cell className='py-2 px-2 md:py-3 md:px-3 text-xs md:text-base'>\n-                      <Dropdown  className=\"relative z-10\" align=\"right\" label=\"\" renderTrigger={() => <span><FaEllipsisH  className=\"h-4 w-4\" /></span>}>\n-                        <Dropdown.Item><FaRegEdit className='mr-1'/><span>Edit</span></Dropdown.Item>\n-                        <Dropdown.Item>View</Dropdown.Item>\n-                        <Dropdown.Item>Delete</Dropdown.Item>\n-                      </Dropdown>\n-\n-                    </Table.Cell>\n-                </Table.Row>\n-\n-                ))}\n-              </Table.Body>\n-            </Table>\n-          </div>\n-          <nav className='py-6'>\n-          <ReactPaginate\n-                previousLabel={'Previous'}\n-                nextLabel={'Next'}\n-                breakLabel={'...'}\n-                pageCount={Math.ceil(filteredTransactions.length / ITEMS_PER_PAGE)}\n-                marginPagesDisplayed={2}\n-                pageRangeDisplayed={5}\n-                onPageChange={handlePageClick}\n-                containerClassName={'pagination flex justify-center -space-x-px text-sm'}\n-                pageClassName={'page-item'}\n-                pageLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                previousClassName={'page-item'}\n-                previousLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                nextClassName={'page-item'}\n-                nextLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                breakClassName={'page-item'}\n-                breakLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                activeClassName={'active'}\n-                activeLinkClassName={'bg-gray-300'}\n-            />\n-          </nav>\n-\n-        </section>\n-\n-      </div>\n-      \n-      \n-    </main>\n-    </>\n-  );\n-}\n-\n-export const getServerSideProps = async (context) => {\n-  const session = await getSession(context);\n-  \n-  if (!session) {\n-      return {\n-          redirect: {\n-              destination: '/',\n-              permanent: false,\n-          },\n-      };\n-  }\n-\n-  try {\n-      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n-          headers: {\n-              Authorization: `Bearer ${session.accessToken}`,\n-          },\n-      });\n-      return {\n-          props: {\n-            initialTransaction: res.data,\n-          },\n-      };\n-  } catch (error) {\n-      console.error('Error fetching houses data:', error);\n-      return {\n-          props: {\n-            initialTransaction: [],\n-          },\n-      };\n-  }\n-};\n-\n-export default Transaction;\n-// pages/home.js\n-import { getSession, useSession } from 'next-auth/react';\n-import { useEffect,useState } from 'react';\n-import axios from 'axios';\n-import { useRequireAuth } from '../../utils/authUtils'; \n-import ReactPaginate from 'react-paginate';\n-\n-import Header from '../../components/Header';\n-import SideMenu from '../../components/dashboard/Sidebar';\n-import TransactionDrawer from '../../components/dashboard/TransactionDrawer';\n-import Spinner from '../../components/Spinner';\n-import { Card, Button,TextInput,Drawer,Select, Table,Dropdown, Alert  } from \"flowbite-react\";\n-import { HiOutlineSearch } from \"react-icons/hi\";\n-import {  FaCheckCircle, FaTimesCircle, FaHourglassHalf,FaRegEdit } from 'react-icons/fa';\n-import { FaRegArrowAltCircleDown } from \"react-icons/fa\";\n-import { FaRegArrowAltCircleUp } from \"react-icons/fa\";\n-import { FaEllipsisH } from \"react-icons/fa\";\n-import { FaExchangeAlt } from \"react-icons/fa\";\n-import FilterTransactions from '../../components/FilterTransactions';\n-import moment from 'moment';\n-import 'moment/locale/id';\n-moment.locale('id');\n-\n-const ITEMS_PER_PAGE = 15;\n-\n-\n-const Transaction = ({ initialTransaction }) =>  {\n-  const { useAuthRedirect } = useRequireAuth(['admin', 'editor', 'superadmin']);\n-  useAuthRedirect();\n-  const [transactions, setTransactions] = useState([initialTransaction]);\n-  const [reTransactions, setReTransactions] = useState([initialTransaction])\n-  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n-  const [loading, setLoading] = useState(true);\n-  const { data: session, status } = useSession();\n-  const [searchTerm, setSearchTerm] = useState('');\n-  const [currentPage, setCurrentPage] = useState(0);\n-\n-  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n-  const [currentTransactionType, setCurrentTransactionType] = useState('');\n-\n-  const [showAlert, setShowAlert] = useState(false);\n-  const [alertMessage, setAlertMessage] = useState('');\n-  const [alertType, setAlertType] = useState('success');\n-  \n-  \n-\n-  const toggleSidebar = () => {\n-    setIsSidebarOpen(!isSidebarOpen);\n-  };\n-\n-  const formatCurrency = (amount) => {\n-    return new Intl.NumberFormat('id-ID', {\n-        style: 'currency',\n-        currency: 'IDR',\n-        minimumFractionDigits: 0,\n-    }).format(amount);\n-  };\n-\n-  const fetchTransactions = async () => {\n-    try {\n-        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n-            headers: {\n-              Authorization: `Bearer ${session.accessToken}`,\n-            },\n-        });\n-        setTransactions(res.data.data);\n-        setReTransactions(res.data.data);\n-        setLoading(false);\n-    } catch (error) {\n-        console.error('Error fetching houses data:', error);\n-        setLoading(false);\n-    }\n- };\n-\n-  useEffect(() => {\n-    if (session) {\n-        fetchTransactions();\n-    }\n-\n-  }, [session, status]);\n-\n-  const handleSearchChange = (event) => {\n-    setSearchTerm(event.target.value);\n-  };\n-\n-  const filteredTransactions = transactions.filter(transaction => \n-    (transaction.description && transaction.description.toLowerCase().includes(searchTerm.toLowerCase()))\n-  );\n-\n-  const offset = currentPage * ITEMS_PER_PAGE;\n-  const currentPageData = filteredTransactions.slice(offset, offset + ITEMS_PER_PAGE);\n-\n-  const handlePageClick = (data) => {\n-    setCurrentPage(data.selected);\n-  };\n-\n-\n-  const getStatusIcon = (status) => {\n-    switch (status) {\n-      case 'berhasil':\n-        return <FaCheckCircle className=\"text-green-500\" />;\n-      case 'gagal':\n-        return <FaTimesCircle className=\"text-red-500\" />;\n-      case 'sedang dicek':\n-        return <FaHourglassHalf className=\"text-yellow-500\" />;\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const getTypeIcon = (type) => {\n-    switch (type) {\n-      case 'income':\n-        return <FaRegArrowAltCircleDown  className=\"text-blue-700 h-4 w-4 md:h-5 md:w-5 \" />;\n-      case 'expense':\n-        return <FaRegArrowAltCircleUp  className=\"text-red-700 h-4 w-4 md:h-5 md:w-5 \" />;\n-      case 'ipl':\n-        return <FaExchangeAlt  className=\"text-green-700  h-3 w-3 md:h-4 md:w-4 \" />;\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const getTextColor = (type) => {\n-    switch (type) {\n-      case 'income':\n-        return \"text-blue-700\";\n-      case 'expense':\n-        return \"text-red-700\";\n-      case 'ipl':\n-        return \"text-green-700\";\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const handlePaymentClick = () => {\n-    setCurrentTransactionType('ipl');\n-    setIsDrawerOpen(true);\n-  };\n-\n-  const handleIncomeClick = () => {\n-    setCurrentTransactionType('income');\n-    setIsDrawerOpen(true);\n-  };\n-\n-  const handleExpenseClick = () => {\n-    setCurrentTransactionType('expense');\n-    setIsDrawerOpen(true);\n-  };\n-\n-  const handleDrawerSubmit = async (transactionData) => {\n-    try {\n-      const response = await axios.post(\n-        `${process.env.NEXT_PUBLIC_API_URL}/transactions/create`, \n-        transactionData, // Hanya data yang dikirim dalam body\n-        {\n-          headers: {\n-            Authorization: `Bearer ${session.accessToken}`, // Tempatkan headers di opsi konfigurasi\n-            'Content-Type': 'application/json',\n-          },\n-        }\n-      );\n-      setAlertType('success');\n-      setAlertMessage('Transaksi berhasil ditambahkan');\n-      setShowAlert(true);\n-     // alert('Transaksi berhasil ditambahkan');\n-      // Refresh data atau navigasi sesuai kebutuhan\n-      fetchTransactions();\n-    } catch (error) {\n-      setAlertType('failure');\n-      setAlertMessage('Gagal menambahkan transaksi');\n-      setShowAlert(true);\n-      console.error('Error creating transaction:', error);\n-    }\n-  };\n-  \n-  const handleAlertDismiss = () => {\n-    setShowAlert(false);\n-  };\n-\n-  if (loading) {\n-    return <Spinner />;\n-  }\n-\n- // console.log(transactions)\n-\n-  return (\n-    <>\n-   \n-    <Header toggleSidebar={toggleSidebar}/>\n-    <main className='max-w-screen-xl mx-auto'>\n-      <div className='w-full'>\n-        <SideMenu isOpen={isSidebarOpen}/>\n-        <section className='mt-14 px-5 py-5 md:px-8 sm:ml-64'>\n-        {showAlert && (\n-            <Alert className='' color={alertType === 'success' ? 'success' : 'failure'} onDismiss={handleAlertDismiss}>\n-                <span className=\"font-medium\">{alertMessage}</span>\n-            </Alert>\n-        )}\n-          <h1 className='text-xl mb-4 font-semibold text-gray-900 sm:text-2xl dark:text-white'>Data Transaksi</h1>\n-\n-          <Card className='w-full mb-10'>\n-            <h3 className='font-semibold mb-3'>Buat Transaksi Baru</h3>\n-              <div className='flex flex-wrap gap-2'>\n-              <Button size=\"sm\" color=\"success\" onClick={handlePaymentClick}>\n-                <FaExchangeAlt  className=\"mr-2 h-5 w-5\" />\n-                IPL\n-              </Button>\n-\n-              <Button size=\"sm\" color=\"blue\" onClick={handleIncomeClick}>\n-                <FaRegArrowAltCircleDown  className=\"mr-2 h-5 w-5\" />\n-                Masuk\n-              </Button>\n-              <Button size=\"sm\" color=\"failure\" onClick={handleExpenseClick}>\n-                Keluar\n-                <FaRegArrowAltCircleUp  className=\"ml-2 h-5 w-5\" />\n-              </Button>\n-              </div>\n-          </Card>\n-\n-          <TransactionDrawer\n-            isOpen={isDrawerOpen}\n-            onClose={() => setIsDrawerOpen(false)}\n-            onSubmit={handleDrawerSubmit}\n-            transactionType={currentTransactionType}\n-          />\n-\n-          <div className=\"max-w-md mb-4 flex\">\n-\n-            <TextInput \n-              name=\"name\"\n-              placeholder=\"Cari\"\n-              value={searchTerm}\n-              onChange={handleSearchChange}\n-              className=\"mr-2 w-3/5\"\n-              icon={HiOutlineSearch} \n-            />\n-\n-            <FilterTransactions className=\"w-2/5\" setTransactions={setTransactions} initialTransaction={reTransactions} />\n-\n-          </div>\n-\n-          <div className='overflow-x-auto'>\n-            <Table hoverable>\n-              <Table.Head>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 w-3/4'>Keterangan</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tanggal</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Nominal</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tipe</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Status</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>\n-                    <span className=\"sr-only\">Edit</span>\n-                </Table.HeadCell>\n-              </Table.Head>\n-              <Table.Body className=\"divide-y\">\n-                \n-                {currentPageData.map((transaction, index) => ( \n-                  <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-                    <Table.Cell className={`py-2 px-2 md:py-3 md:px-3 ${getTextColor(transaction.transaction_type)}`}>\n-                      <span className='flex items-start content-start'>\n-                        <span>{getTypeIcon(transaction.transaction_type)} </span>\n-                        <span className=\"ml-2\">{transaction.description}</span> \n-                      </span>\n-                    </Table.Cell>\n-                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}</Table.Cell>\n-                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{formatCurrency(transaction.amount)}</Table.Cell>\n-                    \n-                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n-                      <span className='flex items-center'>\n-                        {getStatusIcon(transaction.payment_type)} \n-                      </span>\n-                    </Table.Cell>\n-                    <Table.Cell className={`items-center flex justify-center content-center py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n-                      <span className='flex items-center'>\n-                        {getStatusIcon(transaction.status)} \n-                      </span>\n-                    </Table.Cell>\n-                    <Table.Cell className='py-2 px-2 md:py-3 md:px-3 text-xs md:text-base'>\n-                      <Dropdown  className=\"relative z-10\" align=\"right\" label=\"\" renderTrigger={() => <span><FaEllipsisH  className=\"h-4 w-4\" /></span>}>\n-                        <Dropdown.Item><FaRegEdit className='mr-1'/><span>Edit</span></Dropdown.Item>\n-                        <Dropdown.Item>View</Dropdown.Item>\n-                        <Dropdown.Item>Delete</Dropdown.Item>\n-                      </Dropdown>\n-\n-                    </Table.Cell>\n-                </Table.Row>\n-\n-                ))}\n-              </Table.Body>\n-            </Table>\n-          </div>\n-          <nav className='py-6'>\n-          <ReactPaginate\n-                previousLabel={'Previous'}\n-                nextLabel={'Next'}\n-                breakLabel={'...'}\n-                pageCount={Math.ceil(filteredTransactions.length / ITEMS_PER_PAGE)}\n-                marginPagesDisplayed={2}\n-                pageRangeDisplayed={5}\n-                onPageChange={handlePageClick}\n-                containerClassName={'pagination flex justify-center -space-x-px text-sm'}\n-                pageClassName={'page-item'}\n-                pageLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                previousClassName={'page-item'}\n-                previousLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                nextClassName={'page-item'}\n-                nextLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                breakClassName={'page-item'}\n-                breakLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                activeClassName={'active'}\n-                activeLinkClassName={'bg-gray-300'}\n-            />\n-          </nav>\n-\n-        </section>\n-\n-      </div>\n-      \n-      \n-    </main>\n-    </>\n-  );\n-}\n-\n-export const getServerSideProps = async (context) => {\n-  const session = await getSession(context);\n-  \n-  if (!session) {\n-      return {\n-          redirect: {\n-              destination: '/',\n-              permanent: false,\n-          },\n-      };\n-  }\n-\n-  try {\n-      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n-          headers: {\n-              Authorization: `Bearer ${session.accessToken}`,\n-          },\n-      });\n-      return {\n-          props: {\n-            initialTransaction: res.data,\n-          },\n-      };\n-  } catch (error) {\n-      console.error('Error fetching houses data:', error);\n-      return {\n-          props: {\n-            initialTransaction: [],\n-          },\n-      };\n-  }\n-};\n-\n-export default Transaction;\n-// pages/home.js\n-import { getSession, useSession } from 'next-auth/react';\n-import { useEffect,useState } from 'react';\n-import axios from 'axios';\n-import { useRequireAuth } from '../../utils/authUtils'; \n-import ReactPaginate from 'react-paginate';\n-\n-import Header from '../../components/Header';\n-import SideMenu from '../../components/dashboard/Sidebar';\n-import TransactionDrawer from '../../components/dashboard/TransactionDrawer';\n-import Spinner from '../../components/Spinner';\n-import { Card, Button,TextInput,Drawer,Select, Table,Dropdown, Alert  } from \"flowbite-react\";\n-import { HiOutlineSearch } from \"react-icons/hi\";\n-import {  FaCheckCircle, FaTimesCircle, FaHourglassHalf,FaRegEdit } from 'react-icons/fa';\n-import { FaRegArrowAltCircleDown } from \"react-icons/fa\";\n-import { FaRegArrowAltCircleUp } from \"react-icons/fa\";\n-import { FaEllipsisH } from \"react-icons/fa\";\n-import { FaExchangeAlt } from \"react-icons/fa\";\n-import FilterTransactions from '../../components/FilterTransactions';\n-import moment from 'moment';\n-import 'moment/locale/id';\n-moment.locale('id');\n-\n-const ITEMS_PER_PAGE = 15;\n-\n-\n-const Transaction = ({ initialTransaction }) =>  {\n-  const { useAuthRedirect } = useRequireAuth(['admin', 'editor', 'superadmin']);\n-  useAuthRedirect();\n-  const [transactions, setTransactions] = useState([initialTransaction]);\n-  const [reTransactions, setReTransactions] = useState([initialTransaction])\n-  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n-  const [loading, setLoading] = useState(true);\n-  const { data: session, status } = useSession();\n-  const [searchTerm, setSearchTerm] = useState('');\n-  const [currentPage, setCurrentPage] = useState(0);\n-\n-  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n-  const [currentTransactionType, setCurrentTransactionType] = useState('');\n-\n-  const [showAlert, setShowAlert] = useState(false);\n-  const [alertMessage, setAlertMessage] = useState('');\n-  const [alertType, setAlertType] = useState('success');\n-  \n-  \n-\n-  const toggleSidebar = () => {\n-    setIsSidebarOpen(!isSidebarOpen);\n-  };\n-\n-  const formatCurrency = (amount) => {\n-    return new Intl.NumberFormat('id-ID', {\n-        style: 'currency',\n-        currency: 'IDR',\n-        minimumFractionDigits: 0,\n-    }).format(amount);\n-  };\n-\n-  const fetchTransactions = async () => {\n-    try {\n-        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n-            headers: {\n-              Authorization: `Bearer ${session.accessToken}`,\n-            },\n-        });\n-        setTransactions(res.data.data);\n-        setReTransactions(res.data.data);\n-        setLoading(false);\n-    } catch (error) {\n-        console.error('Error fetching houses data:', error);\n-        setLoading(false);\n-    }\n- };\n-\n-  useEffect(() => {\n-    if (session) {\n-        fetchTransactions();\n-    }\n-\n-  }, [session, status]);\n-\n-  const handleSearchChange = (event) => {\n-    setSearchTerm(event.target.value);\n-  };\n-\n-  const filteredTransactions = transactions.filter(transaction => \n-    (transaction.description && transaction.description.toLowerCase().includes(searchTerm.toLowerCase()))\n-  );\n-\n-  const offset = currentPage * ITEMS_PER_PAGE;\n-  const currentPageData = filteredTransactions.slice(offset, offset + ITEMS_PER_PAGE);\n-\n-  const handlePageClick = (data) => {\n-    setCurrentPage(data.selected);\n-  };\n-\n-\n-  const getStatusIcon = (status) => {\n-    switch (status) {\n-      case 'berhasil':\n-        return <FaCheckCircle className=\"text-green-500\" />;\n-      case 'gagal':\n-        return <FaTimesCircle className=\"text-red-500\" />;\n-      case 'sedang dicek':\n-        return <FaHourglassHalf className=\"text-yellow-500\" />;\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const getTypeIcon = (type) => {\n-    switch (type) {\n-      case 'income':\n-        return <FaRegArrowAltCircleDown  className=\"text-blue-700 h-4 w-4 md:h-5 md:w-5 \" />;\n-      case 'expense':\n-        return <FaRegArrowAltCircleUp  className=\"text-red-700 h-4 w-4 md:h-5 md:w-5 \" />;\n-      case 'ipl':\n-        return <FaExchangeAlt  className=\"text-green-700  h-3 w-3 md:h-4 md:w-4 \" />;\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const getTextColor = (type) => {\n-    switch (type) {\n-      case 'income':\n-        return \"text-blue-700\";\n-      case 'expense':\n-        return \"text-red-700\";\n-      case 'ipl':\n-        return \"text-green-700\";\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const handlePaymentClick = () => {\n-    setCurrentTransactionType('ipl');\n-    setIsDrawerOpen(true);\n-  };\n-\n-  const handleIncomeClick = () => {\n-    setCurrentTransactionType('income');\n-    setIsDrawerOpen(true);\n-  };\n-\n-  const handleExpenseClick = () => {\n-    setCurrentTransactionType('expense');\n-    setIsDrawerOpen(true);\n-  };\n-\n-  const handleDrawerSubmit = async (transactionData) => {\n-    try {\n-      const response = await axios.post(\n-        `${process.env.NEXT_PUBLIC_API_URL}/transactions/create`, \n-        transactionData, // Hanya data yang dikirim dalam body\n-        {\n-          headers: {\n-            Authorization: `Bearer ${session.accessToken}`, // Tempatkan headers di opsi konfigurasi\n-            'Content-Type': 'application/json',\n-          },\n-        }\n-      );\n-      setAlertType('success');\n-      setAlertMessage('Transaksi berhasil ditambahkan');\n-      setShowAlert(true);\n-     // alert('Transaksi berhasil ditambahkan');\n-      // Refresh data atau navigasi sesuai kebutuhan\n-      fetchTransactions();\n-    } catch (error) {\n-      setAlertType('failure');\n-      setAlertMessage('Gagal menambahkan transaksi');\n-      setShowAlert(true);\n-      console.error('Error creating transaction:', error);\n-    }\n-  };\n-  \n-  const handleAlertDismiss = () => {\n-    setShowAlert(false);\n-  };\n-\n-  if (loading) {\n-    return <Spinner />;\n-  }\n-\n- // console.log(transactions)\n-\n-  return (\n-    <>\n-   \n-    <Header toggleSidebar={toggleSidebar}/>\n-    <main className='max-w-screen-xl mx-auto'>\n-      <div className='w-full'>\n-        <SideMenu isOpen={isSidebarOpen}/>\n-        <section className='mt-14 px-5 py-5 md:px-8 sm:ml-64'>\n-        {showAlert && (\n-            <Alert className='' color={alertType === 'success' ? 'success' : 'failure'} onDismiss={handleAlertDismiss}>\n-                <span className=\"font-medium\">{alertMessage}</span>\n-            </Alert>\n-        )}\n-          <h1 className='text-xl mb-4 font-semibold text-gray-900 sm:text-2xl dark:text-white'>Data Transaksi</h1>\n-\n-          <Card className='w-full mb-10'>\n-            <h3 className='font-semibold mb-3'>Buat Transaksi Baru</h3>\n-              <div className='flex flex-wrap gap-2'>\n-              <Button size=\"sm\" color=\"success\" onClick={handlePaymentClick}>\n-                <FaExchangeAlt  className=\"mr-2 h-5 w-5\" />\n-                IPL\n-              </Button>\n-\n-              <Button size=\"sm\" color=\"blue\" onClick={handleIncomeClick}>\n-                <FaRegArrowAltCircleDown  className=\"mr-2 h-5 w-5\" />\n-                Masuk\n-              </Button>\n-              <Button size=\"sm\" color=\"failure\" onClick={handleExpenseClick}>\n-                Keluar\n-                <FaRegArrowAltCircleUp  className=\"ml-2 h-5 w-5\" />\n-              </Button>\n-              </div>\n-          </Card>\n-\n-          <TransactionDrawer\n-            isOpen={isDrawerOpen}\n-            onClose={() => setIsDrawerOpen(false)}\n-            onSubmit={handleDrawerSubmit}\n-            transactionType={currentTransactionType}\n-          />\n-\n-          <div className=\"max-w-md mb-4 flex\">\n-\n-            <TextInput \n-              name=\"name\"\n-              placeholder=\"Cari\"\n-              value={searchTerm}\n-              onChange={handleSearchChange}\n-              className=\"mr-2 w-3/5\"\n-              icon={HiOutlineSearch} \n-            />\n-\n-            <FilterTransactions className=\"w-2/5\" setTransactions={setTransactions} initialTransaction={reTransactions} />\n-\n-          </div>\n-\n-          <div className='overflow-x-auto'>\n-            <Table hoverable>\n-              <Table.Head>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 w-3/4'>Keterangan</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tanggal</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Nominal</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tipe</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Status</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>\n-                    <span className=\"sr-only\">Edit</span>\n-                </Table.HeadCell>\n-              </Table.Head>\n-              <Table.Body className=\"divide-y\">\n-                \n-                {currentPageData.map((transaction, index) => ( \n-                  <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-                    <Table.Cell className={`py-2 px-2 md:py-3 md:px-3 ${getTextColor(transaction.transaction_type)}`}>\n-                      <span className='flex items-start content-start'>\n-                        <span>{getTypeIcon(transaction.transaction_type)} </span>\n-                        <span className=\"ml-2\">{transaction.description}</span> \n-                      </span>\n-                    </Table.Cell>\n-                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}</Table.Cell>\n-                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{formatCurrency(transaction.amount)}</Table.Cell>\n-                    \n-                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n-                      <span className='flex items-center'>\n-                        {getStatusIcon(transaction.payment_type)} \n-                      </span>\n-                    </Table.Cell>\n-                    <Table.Cell className={`items-center flex justify-center content-center py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n-                      <span className='flex items-center'>\n-                        {getStatusIcon(transaction.status)} \n-                      </span>\n-                    </Table.Cell>\n-                    <Table.Cell className='py-2 px-2 md:py-3 md:px-3 text-xs md:text-base'>\n-                      <Dropdown  className=\"relative z-10\" align=\"right\" label=\"\" renderTrigger={() => <span><FaEllipsisH  className=\"h-4 w-4\" /></span>}>\n-                        <Dropdown.Item><FaRegEdit className='mr-2'/><span>Edit</span></Dropdown.Item>\n-                        <Dropdown.Item>View</Dropdown.Item>\n-                        <Dropdown.Item>Delete</Dropdown.Item>\n-                      </Dropdown>\n-\n-                    </Table.Cell>\n-                </Table.Row>\n-\n-                ))}\n-              </Table.Body>\n-            </Table>\n-          </div>\n-          <nav className='py-6'>\n-          <ReactPaginate\n-                previousLabel={'Previous'}\n-                nextLabel={'Next'}\n-                breakLabel={'...'}\n-                pageCount={Math.ceil(filteredTransactions.length / ITEMS_PER_PAGE)}\n-                marginPagesDisplayed={2}\n-                pageRangeDisplayed={5}\n-                onPageChange={handlePageClick}\n-                containerClassName={'pagination flex justify-center -space-x-px text-sm'}\n-                pageClassName={'page-item'}\n-                pageLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                previousClassName={'page-item'}\n-                previousLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                nextClassName={'page-item'}\n-                nextLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                breakClassName={'page-item'}\n-                breakLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                activeClassName={'active'}\n-                activeLinkClassName={'bg-gray-300'}\n-            />\n-          </nav>\n-\n-        </section>\n-\n-      </div>\n-      \n-      \n-    </main>\n-    </>\n-  );\n-}\n-\n-export const getServerSideProps = async (context) => {\n-  const session = await getSession(context);\n-  \n-  if (!session) {\n-      return {\n-          redirect: {\n-              destination: '/',\n-              permanent: false,\n-          },\n-      };\n-  }\n-\n-  try {\n-      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n-          headers: {\n-              Authorization: `Bearer ${session.accessToken}`,\n-          },\n-      });\n-      return {\n-          props: {\n-            initialTransaction: res.data,\n-          },\n-      };\n-  } catch (error) {\n-      console.error('Error fetching houses data:', error);\n-      return {\n-          props: {\n-            initialTransaction: [],\n-          },\n-      };\n-  }\n-};\n-\n-export default Transaction;\n"
                },
                {
                    "date": 1722400582672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -279,9 +279,9 @@\n                     <Table.Cell className='py-2 px-2 md:py-3 md:px-3 text-xs md:text-base'>\n                       <Dropdown  className=\"relative z-10\" align=\"right\" label=\"\" renderTrigger={() => <span><FaEllipsisH  className=\"h-4 w-4\" /></span>}>\n                         <Dropdown.Item><FaRegEdit className='mr-1'/><span>Edit</span></Dropdown.Item>\n                         <Dropdown.Item><FaEye className='mr-1'/><span>View</span></Dropdown.Item>\n-                        <Dropdown.Item><FaRegTrashAlt className='mr-1' />Delete</Dropdown.Item>\n+                        <Dropdown.Item><FaRegTrashAlt className='mr-1' /><span>Delete</span></Dropdown.Item>\n                       </Dropdown>\n \n                     </Table.Cell>\n                 </Table.Row>\n"
                },
                {
                    "date": 1722402727959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -267,9 +267,9 @@\n                     <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{formatCurrency(transaction.amount)}</Table.Cell>\n                     \n                     <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n                       <span className='flex items-center'>\n-                        {getStatusIcon(transaction.payment_type)} \n+                        {transaction.payment_type} \n                       </span>\n                     </Table.Cell>\n                     <Table.Cell className={`items-center flex justify-center content-center py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n                       <span className='flex items-center'>\n"
                },
                {
                    "date": 1722412207881,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -276,9 +276,9 @@\n                         {getStatusIcon(transaction.status)} \n                       </span>\n                     </Table.Cell>\n                     <Table.Cell className='py-2 px-2 md:py-3 md:px-3 text-xs md:text-base'>\n-                      <Dropdown  className=\"relative z-10\" align=\"right\" label=\"\" renderTrigger={() => <span><FaEllipsisH  className=\"h-4 w-4\" /></span>}>\n+                      <Dropdown  className=\"relative z-50 cursor-pointer\" align=\"right\" label=\"\" renderTrigger={() => <span><FaEllipsisH  className=\"h-4 w-4\" /></span>}>\n                         <Dropdown.Item><FaRegEdit className='mr-1'/><span>Edit</span></Dropdown.Item>\n                         <Dropdown.Item><FaEye className='mr-1'/><span>View</span></Dropdown.Item>\n                         <Dropdown.Item><FaRegTrashAlt className='mr-1' /><span>Delete</span></Dropdown.Item>\n                       </Dropdown>\n"
                },
                {
                    "date": 1722412363602,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,8 +173,12 @@\n       setShowAlert(true);\n       console.error('Error creating transaction:', error);\n     }\n   };\n+\n+  const handleDeleteTransaction = async(transactionId) => {\n+\n+  }\n   \n   const handleAlertDismiss = () => {\n     setShowAlert(false);\n   };\n"
                },
                {
                    "date": 1722412476766,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,10 @@\n import Header from '../../components/Header';\n import SideMenu from '../../components/dashboard/Sidebar';\n import TransactionDrawer from '../../components/dashboard/TransactionDrawer';\n import Spinner from '../../components/Spinner';\n-import { Card, Button,TextInput,Drawer,Select, Table,Dropdown, Alert  } from \"flowbite-react\";\n+                house.monthly_fees[feeIndex].status = 'Belum Bayar';\n+import { Card, Button,TextInput,Drawer,Select, Table,Dropdown, Alert,Modal } from \"flowbite-react\";\n import { HiOutlineSearch } from \"react-icons/hi\";\n import {  FaCheckCircle, FaTimesCircle, FaHourglassHalf,FaRegEdit,FaEye,FaRegTrashAlt } from 'react-icons/fa';\n import { FaRegArrowAltCircleDown } from \"react-icons/fa\";\n import { FaRegArrowAltCircleUp } from \"react-icons/fa\";\n"
                },
                {
                    "date": 1722412506736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,360 @@\n+// pages/home.js\n+import { getSession, useSession } from 'next-auth/react';\n+import { useEffect,useState } from 'react';\n+import axios from 'axios';\n+import { useRequireAuth } from '../../utils/authUtils'; \n+import ReactPaginate from 'react-paginate';\n+\n+import Header from '../../components/Header';\n+import SideMenu from '../../components/dashboard/Sidebar';\n+import TransactionDrawer from '../../components/dashboard/TransactionDrawer';\n+import Spinner from '../../components/Spinner';\n+                house.monthly_fees[feeIndex].status = 'Belum Bayar';\n+import { Card, Button,TextInput,Drawer,Select, Table,Dropdown, Alert,Modal } from \"flowbite-react\";\n+import { HiOutlineSearch } from \"react-icons/hi\";\n+import {  FaCheckCircle, FaTimesCircle, FaHourglassHalf,FaRegEdit,FaEye,FaRegTrashAlt } from 'react-icons/fa';\n+import { FaRegArrowAltCircleDown } from \"react-icons/fa\";\n+import { FaRegArrowAltCircleUp } from \"react-icons/fa\";\n+import { FaEllipsisH } from \"react-icons/fa\";\n+import { FaExchangeAlt } from \"react-icons/fa\";\n+import FilterTransactions from '../../components/FilterTransactions';\n+import moment from 'moment';\n+import 'moment/locale/id';\n+moment.locale('id');\n+\n+const ITEMS_PER_PAGE = 15;\n+\n+\n+const Transaction = ({ initialTransaction }) =>  {\n+  const { useAuthRedirect } = useRequireAuth(['admin', 'editor', 'superadmin']);\n+  useAuthRedirect();\n+  const [transactions, setTransactions] = useState([initialTransaction]);\n+  const [reTransactions, setReTransactions] = useState([initialTransaction])\n+  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n+  const [loading, setLoading] = useState(true);\n+  const { data: session, status } = useSession();\n+  const [searchTerm, setSearchTerm] = useState('');\n+  const [currentPage, setCurrentPage] = useState(0);\n+\n+  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n+  const [currentTransactionType, setCurrentTransactionType] = useState('');\n+\n+  const [showAlert, setShowAlert] = useState(false);\n+  const [alertMessage, setAlertMessage] = useState('');\n+  const [alertType, setAlertType] = useState('success');\n+  \n+  \n+\n+  const toggleSidebar = () => {\n+    setIsSidebarOpen(!isSidebarOpen);\n+  };\n+\n+  const formatCurrency = (amount) => {\n+    return new Intl.NumberFormat('id-ID', {\n+        style: 'currency',\n+        currency: 'IDR',\n+        minimumFractionDigits: 0,\n+    }).format(amount);\n+  };\n+\n+  const fetchTransactions = async () => {\n+    try {\n+        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n+            headers: {\n+              Authorization: `Bearer ${session.accessToken}`,\n+            },\n+        });\n+        setTransactions(res.data.data);\n+        setReTransactions(res.data.data);\n+        setLoading(false);\n+    } catch (error) {\n+        console.error('Error fetching houses data:', error);\n+        setLoading(false);\n+    }\n+ };\n+\n+  useEffect(() => {\n+    if (session) {\n+        fetchTransactions();\n+    }\n+\n+  }, [session, status]);\n+\n+  const handleSearchChange = (event) => {\n+    setSearchTerm(event.target.value);\n+  };\n+\n+  const filteredTransactions = transactions.filter(transaction => \n+    (transaction.description && transaction.description.toLowerCase().includes(searchTerm.toLowerCase()))\n+  );\n+\n+  const offset = currentPage * ITEMS_PER_PAGE;\n+  const currentPageData = filteredTransactions.slice(offset, offset + ITEMS_PER_PAGE);\n+\n+  const handlePageClick = (data) => {\n+    setCurrentPage(data.selected);\n+  };\n+\n+\n+  const getStatusIcon = (status) => {\n+    switch (status) {\n+      case 'berhasil':\n+        return <FaCheckCircle className=\"text-green-500\" />;\n+      case 'gagal':\n+        return <FaTimesCircle className=\"text-red-500\" />;\n+      case 'sedang dicek':\n+        return <FaHourglassHalf className=\"text-yellow-500\" />;\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const getTypeIcon = (type) => {\n+    switch (type) {\n+      case 'income':\n+        return <FaRegArrowAltCircleDown  className=\"text-blue-700 h-4 w-4 md:h-5 md:w-5 \" />;\n+      case 'expense':\n+        return <FaRegArrowAltCircleUp  className=\"text-red-700 h-4 w-4 md:h-5 md:w-5 \" />;\n+      case 'ipl':\n+        return <FaExchangeAlt  className=\"text-green-700  h-3 w-3 md:h-4 md:w-4 \" />;\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const getTextColor = (type) => {\n+    switch (type) {\n+      case 'income':\n+        return \"text-blue-700\";\n+      case 'expense':\n+        return \"text-red-700\";\n+      case 'ipl':\n+        return \"text-green-700\";\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const handlePaymentClick = () => {\n+    setCurrentTransactionType('ipl');\n+    setIsDrawerOpen(true);\n+  };\n+\n+  const handleIncomeClick = () => {\n+    setCurrentTransactionType('income');\n+    setIsDrawerOpen(true);\n+  };\n+\n+  const handleExpenseClick = () => {\n+    setCurrentTransactionType('expense');\n+    setIsDrawerOpen(true);\n+  };\n+\n+  const handleDrawerSubmit = async (transactionData) => {\n+    try {\n+      const response = await axios.post(\n+        `${process.env.NEXT_PUBLIC_API_URL}/transactions/create`, \n+        transactionData, // Hanya data yang dikirim dalam body\n+        {\n+          headers: {\n+            Authorization: `Bearer ${session.accessToken}`, // Tempatkan headers di opsi konfigurasi\n+            'Content-Type': 'application/json',\n+          },\n+        }\n+      );\n+      setAlertType('success');\n+      setAlertMessage('Transaksi berhasil ditambahkan');\n+      setShowAlert(true);\n+     // alert('Transaksi berhasil ditambahkan');\n+      // Refresh data atau navigasi sesuai kebutuhan\n+      fetchTransactions();\n+    } catch (error) {\n+      setAlertType('failure');\n+      setAlertMessage('Gagal menambahkan transaksi');\n+      setShowAlert(true);\n+      console.error('Error creating transaction:', error);\n+    }\n+  };\n+  \n+  const handleAlertDismiss = () => {\n+    setShowAlert(false);\n+  };\n+\n+  if (loading) {\n+    return <Spinner />;\n+  }\n+\n+ // console.log(transactions)\n+\n+  return (\n+    <>\n+   \n+    <Header toggleSidebar={toggleSidebar}/>\n+    <main className='max-w-screen-xl mx-auto'>\n+      <div className='w-full'>\n+        <SideMenu isOpen={isSidebarOpen}/>\n+        <section className='mt-14 px-5 py-5 md:px-8 sm:ml-64'>\n+        {showAlert && (\n+            <Alert className='' color={alertType === 'success' ? 'success' : 'failure'} onDismiss={handleAlertDismiss}>\n+                <span className=\"font-medium\">{alertMessage}</span>\n+            </Alert>\n+        )}\n+          <h1 className='text-xl mb-4 font-semibold text-gray-900 sm:text-2xl dark:text-white'>Data Transaksi</h1>\n+\n+          <Card className='w-full mb-10'>\n+            <h3 className='font-semibold mb-3'>Buat Transaksi Baru</h3>\n+              <div className='flex flex-wrap gap-2'>\n+              <Button size=\"sm\" color=\"success\" onClick={handlePaymentClick}>\n+                <FaExchangeAlt  className=\"mr-2 h-5 w-5\" />\n+                IPL\n+              </Button>\n+\n+              <Button size=\"sm\" color=\"blue\" onClick={handleIncomeClick}>\n+                <FaRegArrowAltCircleDown  className=\"mr-2 h-5 w-5\" />\n+                Masuk\n+              </Button>\n+              <Button size=\"sm\" color=\"failure\" onClick={handleExpenseClick}>\n+                Keluar\n+                <FaRegArrowAltCircleUp  className=\"ml-2 h-5 w-5\" />\n+              </Button>\n+              </div>\n+          </Card>\n+\n+          <TransactionDrawer\n+            isOpen={isDrawerOpen}\n+            onClose={() => setIsDrawerOpen(false)}\n+            onSubmit={handleDrawerSubmit}\n+            transactionType={currentTransactionType}\n+          />\n+\n+          <div className=\"max-w-md mb-4 flex\">\n+\n+            <TextInput \n+              name=\"name\"\n+              placeholder=\"Cari\"\n+              value={searchTerm}\n+              onChange={handleSearchChange}\n+              className=\"mr-2 w-3/5\"\n+              icon={HiOutlineSearch} \n+            />\n+\n+            <FilterTransactions className=\"w-2/5\" setTransactions={setTransactions} initialTransaction={reTransactions} />\n+\n+          </div>\n+\n+          <div className='overflow-x-auto'>\n+            <Table hoverable>\n+              <Table.Head>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 w-3/4'>Keterangan</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tanggal</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Nominal</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tipe</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Status</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>\n+                    <span className=\"sr-only\">Edit</span>\n+                </Table.HeadCell>\n+              </Table.Head>\n+              <Table.Body className=\"divide-y\">\n+                \n+                {currentPageData.map((transaction, index) => ( \n+                  <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n+                    <Table.Cell className={`py-2 px-2 md:py-3 md:px-3 ${getTextColor(transaction.transaction_type)}`}>\n+                      <span className='flex items-start content-start'>\n+                        <span>{getTypeIcon(transaction.transaction_type)} </span>\n+                        <span className=\"ml-2\">{transaction.description}</span> \n+                      </span>\n+                    </Table.Cell>\n+                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}</Table.Cell>\n+                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{formatCurrency(transaction.amount)}</Table.Cell>\n+                    \n+                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n+                      <span className='flex items-center'>\n+                        {transaction.payment_type} \n+                      </span>\n+                    </Table.Cell>\n+                    <Table.Cell className={`items-center flex justify-center content-center py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n+                      <span className='flex items-center'>\n+                        {getStatusIcon(transaction.status)} \n+                      </span>\n+                    </Table.Cell>\n+                    <Table.Cell className='py-2 px-2 md:py-3 md:px-3 text-xs md:text-base'>\n+                      <Dropdown  className=\"relative z-50 cursor-pointer\" align=\"right\" label=\"\" renderTrigger={() => <span><FaEllipsisH  className=\"h-4 w-4\" /></span>}>\n+                        <Dropdown.Item><FaRegEdit className='mr-1'/><span>Edit</span></Dropdown.Item>\n+                        <Dropdown.Item><FaEye className='mr-1'/><span>View</span></Dropdown.Item>\n+                        <Dropdown.Item><FaRegTrashAlt className='mr-1' /><span>Delete</span></Dropdown.Item>\n+                      </Dropdown>\n+\n+                    </Table.Cell>\n+                </Table.Row>\n+\n+                ))}\n+              </Table.Body>\n+            </Table>\n+          </div>\n+          <nav className='py-6'>\n+          <ReactPaginate\n+                previousLabel={'Previous'}\n+                nextLabel={'Next'}\n+                breakLabel={'...'}\n+                pageCount={Math.ceil(filteredTransactions.length / ITEMS_PER_PAGE)}\n+                marginPagesDisplayed={2}\n+                pageRangeDisplayed={5}\n+                onPageChange={handlePageClick}\n+                containerClassName={'pagination flex justify-center -space-x-px text-sm'}\n+                pageClassName={'page-item'}\n+                pageLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                previousClassName={'page-item'}\n+                previousLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                nextClassName={'page-item'}\n+                nextLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                breakClassName={'page-item'}\n+                breakLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                activeClassName={'active'}\n+                activeLinkClassName={'bg-gray-300'}\n+            />\n+          </nav>\n+\n+        </section>\n+\n+      </div>\n+      \n+      \n+    </main>\n+    </>\n+  );\n+}\n+\n+export const getServerSideProps = async (context) => {\n+  const session = await getSession(context);\n+  \n+  if (!session) {\n+      return {\n+          redirect: {\n+              destination: '/',\n+              permanent: false,\n+          },\n+      };\n+  }\n+\n+  try {\n+      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n+          headers: {\n+              Authorization: `Bearer ${session.accessToken}`,\n+          },\n+      });\n+      return {\n+          props: {\n+            initialTransaction: res.data,\n+          },\n+      };\n+  } catch (error) {\n+      console.error('Error fetching houses data:', error);\n+      return {\n+          props: {\n+            initialTransaction: [],\n+          },\n+      };\n+  }\n+};\n+\n+export default Transaction;\n"
                },
                {
                    "date": 1722412525871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,10 @@\n   const [showAlert, setShowAlert] = useState(false);\n   const [alertMessage, setAlertMessage] = useState('');\n   const [alertType, setAlertType] = useState('success');\n   \n-  \n+  const [showDeleteModal, setShowDeleteModal] = useState(false);\n+  const [transactionIdToDelete, setTransactionIdToDelete] = useState(null);\n \n   const toggleSidebar = () => {\n     setIsSidebarOpen(!isSidebarOpen);\n   };\n@@ -357,368 +358,4 @@\n   }\n };\n \n export default Transaction;\n-// pages/home.js\n-import { getSession, useSession } from 'next-auth/react';\n-import { useEffect,useState } from 'react';\n-import axios from 'axios';\n-import { useRequireAuth } from '../../utils/authUtils'; \n-import ReactPaginate from 'react-paginate';\n-\n-import Header from '../../components/Header';\n-import SideMenu from '../../components/dashboard/Sidebar';\n-import TransactionDrawer from '../../components/dashboard/TransactionDrawer';\n-import Spinner from '../../components/Spinner';\n-                house.monthly_fees[feeIndex].status = 'Belum Bayar';\n-import { Card, Button,TextInput,Drawer,Select, Table,Dropdown, Alert,Modal } from \"flowbite-react\";\n-import { HiOutlineSearch } from \"react-icons/hi\";\n-import {  FaCheckCircle, FaTimesCircle, FaHourglassHalf,FaRegEdit,FaEye,FaRegTrashAlt } from 'react-icons/fa';\n-import { FaRegArrowAltCircleDown } from \"react-icons/fa\";\n-import { FaRegArrowAltCircleUp } from \"react-icons/fa\";\n-import { FaEllipsisH } from \"react-icons/fa\";\n-import { FaExchangeAlt } from \"react-icons/fa\";\n-import FilterTransactions from '../../components/FilterTransactions';\n-import moment from 'moment';\n-import 'moment/locale/id';\n-moment.locale('id');\n-\n-const ITEMS_PER_PAGE = 15;\n-\n-\n-const Transaction = ({ initialTransaction }) =>  {\n-  const { useAuthRedirect } = useRequireAuth(['admin', 'editor', 'superadmin']);\n-  useAuthRedirect();\n-  const [transactions, setTransactions] = useState([initialTransaction]);\n-  const [reTransactions, setReTransactions] = useState([initialTransaction])\n-  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n-  const [loading, setLoading] = useState(true);\n-  const { data: session, status } = useSession();\n-  const [searchTerm, setSearchTerm] = useState('');\n-  const [currentPage, setCurrentPage] = useState(0);\n-\n-  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n-  const [currentTransactionType, setCurrentTransactionType] = useState('');\n-\n-  const [showAlert, setShowAlert] = useState(false);\n-  const [alertMessage, setAlertMessage] = useState('');\n-  const [alertType, setAlertType] = useState('success');\n-  \n-  \n-\n-  const toggleSidebar = () => {\n-    setIsSidebarOpen(!isSidebarOpen);\n-  };\n-\n-  const formatCurrency = (amount) => {\n-    return new Intl.NumberFormat('id-ID', {\n-        style: 'currency',\n-        currency: 'IDR',\n-        minimumFractionDigits: 0,\n-    }).format(amount);\n-  };\n-\n-  const fetchTransactions = async () => {\n-    try {\n-        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n-            headers: {\n-              Authorization: `Bearer ${session.accessToken}`,\n-            },\n-        });\n-        setTransactions(res.data.data);\n-        setReTransactions(res.data.data);\n-        setLoading(false);\n-    } catch (error) {\n-        console.error('Error fetching houses data:', error);\n-        setLoading(false);\n-    }\n- };\n-\n-  useEffect(() => {\n-    if (session) {\n-        fetchTransactions();\n-    }\n-\n-  }, [session, status]);\n-\n-  const handleSearchChange = (event) => {\n-    setSearchTerm(event.target.value);\n-  };\n-\n-  const filteredTransactions = transactions.filter(transaction => \n-    (transaction.description && transaction.description.toLowerCase().includes(searchTerm.toLowerCase()))\n-  );\n-\n-  const offset = currentPage * ITEMS_PER_PAGE;\n-  const currentPageData = filteredTransactions.slice(offset, offset + ITEMS_PER_PAGE);\n-\n-  const handlePageClick = (data) => {\n-    setCurrentPage(data.selected);\n-  };\n-\n-\n-  const getStatusIcon = (status) => {\n-    switch (status) {\n-      case 'berhasil':\n-        return <FaCheckCircle className=\"text-green-500\" />;\n-      case 'gagal':\n-        return <FaTimesCircle className=\"text-red-500\" />;\n-      case 'sedang dicek':\n-        return <FaHourglassHalf className=\"text-yellow-500\" />;\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const getTypeIcon = (type) => {\n-    switch (type) {\n-      case 'income':\n-        return <FaRegArrowAltCircleDown  className=\"text-blue-700 h-4 w-4 md:h-5 md:w-5 \" />;\n-      case 'expense':\n-        return <FaRegArrowAltCircleUp  className=\"text-red-700 h-4 w-4 md:h-5 md:w-5 \" />;\n-      case 'ipl':\n-        return <FaExchangeAlt  className=\"text-green-700  h-3 w-3 md:h-4 md:w-4 \" />;\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const getTextColor = (type) => {\n-    switch (type) {\n-      case 'income':\n-        return \"text-blue-700\";\n-      case 'expense':\n-        return \"text-red-700\";\n-      case 'ipl':\n-        return \"text-green-700\";\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const handlePaymentClick = () => {\n-    setCurrentTransactionType('ipl');\n-    setIsDrawerOpen(true);\n-  };\n-\n-  const handleIncomeClick = () => {\n-    setCurrentTransactionType('income');\n-    setIsDrawerOpen(true);\n-  };\n-\n-  const handleExpenseClick = () => {\n-    setCurrentTransactionType('expense');\n-    setIsDrawerOpen(true);\n-  };\n-\n-  const handleDrawerSubmit = async (transactionData) => {\n-    try {\n-      const response = await axios.post(\n-        `${process.env.NEXT_PUBLIC_API_URL}/transactions/create`, \n-        transactionData, // Hanya data yang dikirim dalam body\n-        {\n-          headers: {\n-            Authorization: `Bearer ${session.accessToken}`, // Tempatkan headers di opsi konfigurasi\n-            'Content-Type': 'application/json',\n-          },\n-        }\n-      );\n-      setAlertType('success');\n-      setAlertMessage('Transaksi berhasil ditambahkan');\n-      setShowAlert(true);\n-     // alert('Transaksi berhasil ditambahkan');\n-      // Refresh data atau navigasi sesuai kebutuhan\n-      fetchTransactions();\n-    } catch (error) {\n-      setAlertType('failure');\n-      setAlertMessage('Gagal menambahkan transaksi');\n-      setShowAlert(true);\n-      console.error('Error creating transaction:', error);\n-    }\n-  };\n-\n-  const handleDeleteTransaction = async(transactionId) => {\n-\n-  }\n-  \n-  const handleAlertDismiss = () => {\n-    setShowAlert(false);\n-  };\n-\n-  if (loading) {\n-    return <Spinner />;\n-  }\n-\n- // console.log(transactions)\n-\n-  return (\n-    <>\n-   \n-    <Header toggleSidebar={toggleSidebar}/>\n-    <main className='max-w-screen-xl mx-auto'>\n-      <div className='w-full'>\n-        <SideMenu isOpen={isSidebarOpen}/>\n-        <section className='mt-14 px-5 py-5 md:px-8 sm:ml-64'>\n-        {showAlert && (\n-            <Alert className='' color={alertType === 'success' ? 'success' : 'failure'} onDismiss={handleAlertDismiss}>\n-                <span className=\"font-medium\">{alertMessage}</span>\n-            </Alert>\n-        )}\n-          <h1 className='text-xl mb-4 font-semibold text-gray-900 sm:text-2xl dark:text-white'>Data Transaksi</h1>\n-\n-          <Card className='w-full mb-10'>\n-            <h3 className='font-semibold mb-3'>Buat Transaksi Baru</h3>\n-              <div className='flex flex-wrap gap-2'>\n-              <Button size=\"sm\" color=\"success\" onClick={handlePaymentClick}>\n-                <FaExchangeAlt  className=\"mr-2 h-5 w-5\" />\n-                IPL\n-              </Button>\n-\n-              <Button size=\"sm\" color=\"blue\" onClick={handleIncomeClick}>\n-                <FaRegArrowAltCircleDown  className=\"mr-2 h-5 w-5\" />\n-                Masuk\n-              </Button>\n-              <Button size=\"sm\" color=\"failure\" onClick={handleExpenseClick}>\n-                Keluar\n-                <FaRegArrowAltCircleUp  className=\"ml-2 h-5 w-5\" />\n-              </Button>\n-              </div>\n-          </Card>\n-\n-          <TransactionDrawer\n-            isOpen={isDrawerOpen}\n-            onClose={() => setIsDrawerOpen(false)}\n-            onSubmit={handleDrawerSubmit}\n-            transactionType={currentTransactionType}\n-          />\n-\n-          <div className=\"max-w-md mb-4 flex\">\n-\n-            <TextInput \n-              name=\"name\"\n-              placeholder=\"Cari\"\n-              value={searchTerm}\n-              onChange={handleSearchChange}\n-              className=\"mr-2 w-3/5\"\n-              icon={HiOutlineSearch} \n-            />\n-\n-            <FilterTransactions className=\"w-2/5\" setTransactions={setTransactions} initialTransaction={reTransactions} />\n-\n-          </div>\n-\n-          <div className='overflow-x-auto'>\n-            <Table hoverable>\n-              <Table.Head>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 w-3/4'>Keterangan</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tanggal</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Nominal</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tipe</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Status</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>\n-                    <span className=\"sr-only\">Edit</span>\n-                </Table.HeadCell>\n-              </Table.Head>\n-              <Table.Body className=\"divide-y\">\n-                \n-                {currentPageData.map((transaction, index) => ( \n-                  <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-                    <Table.Cell className={`py-2 px-2 md:py-3 md:px-3 ${getTextColor(transaction.transaction_type)}`}>\n-                      <span className='flex items-start content-start'>\n-                        <span>{getTypeIcon(transaction.transaction_type)} </span>\n-                        <span className=\"ml-2\">{transaction.description}</span> \n-                      </span>\n-                    </Table.Cell>\n-                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}</Table.Cell>\n-                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{formatCurrency(transaction.amount)}</Table.Cell>\n-                    \n-                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n-                      <span className='flex items-center'>\n-                        {transaction.payment_type} \n-                      </span>\n-                    </Table.Cell>\n-                    <Table.Cell className={`items-center flex justify-center content-center py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n-                      <span className='flex items-center'>\n-                        {getStatusIcon(transaction.status)} \n-                      </span>\n-                    </Table.Cell>\n-                    <Table.Cell className='py-2 px-2 md:py-3 md:px-3 text-xs md:text-base'>\n-                      <Dropdown  className=\"relative z-50 cursor-pointer\" align=\"right\" label=\"\" renderTrigger={() => <span><FaEllipsisH  className=\"h-4 w-4\" /></span>}>\n-                        <Dropdown.Item><FaRegEdit className='mr-1'/><span>Edit</span></Dropdown.Item>\n-                        <Dropdown.Item><FaEye className='mr-1'/><span>View</span></Dropdown.Item>\n-                        <Dropdown.Item><FaRegTrashAlt className='mr-1' /><span>Delete</span></Dropdown.Item>\n-                      </Dropdown>\n-\n-                    </Table.Cell>\n-                </Table.Row>\n-\n-                ))}\n-              </Table.Body>\n-            </Table>\n-          </div>\n-          <nav className='py-6'>\n-          <ReactPaginate\n-                previousLabel={'Previous'}\n-                nextLabel={'Next'}\n-                breakLabel={'...'}\n-                pageCount={Math.ceil(filteredTransactions.length / ITEMS_PER_PAGE)}\n-                marginPagesDisplayed={2}\n-                pageRangeDisplayed={5}\n-                onPageChange={handlePageClick}\n-                containerClassName={'pagination flex justify-center -space-x-px text-sm'}\n-                pageClassName={'page-item'}\n-                pageLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                previousClassName={'page-item'}\n-                previousLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                nextClassName={'page-item'}\n-                nextLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                breakClassName={'page-item'}\n-                breakLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                activeClassName={'active'}\n-                activeLinkClassName={'bg-gray-300'}\n-            />\n-          </nav>\n-\n-        </section>\n-\n-      </div>\n-      \n-      \n-    </main>\n-    </>\n-  );\n-}\n-\n-export const getServerSideProps = async (context) => {\n-  const session = await getSession(context);\n-  \n-  if (!session) {\n-      return {\n-          redirect: {\n-              destination: '/',\n-              permanent: false,\n-          },\n-      };\n-  }\n-\n-  try {\n-      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n-          headers: {\n-              Authorization: `Bearer ${session.accessToken}`,\n-          },\n-      });\n-      return {\n-          props: {\n-            initialTransaction: res.data,\n-          },\n-      };\n-  } catch (error) {\n-      console.error('Error fetching houses data:', error);\n-      return {\n-          props: {\n-            initialTransaction: [],\n-          },\n-      };\n-  }\n-};\n-\n-export default Transaction;\n"
                },
                {
                    "date": 1722412673572,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,369 @@\n+// pages/home.js\n+import { getSession, useSession } from 'next-auth/react';\n+import { useEffect,useState } from 'react';\n+import axios from 'axios';\n+import { useRequireAuth } from '../../utils/authUtils'; \n+import ReactPaginate from 'react-paginate';\n+\n+import Header from '../../components/Header';\n+import SideMenu from '../../components/dashboard/Sidebar';\n+import TransactionDrawer from '../../components/dashboard/TransactionDrawer';\n+import Spinner from '../../components/Spinner';\n+                house.monthly_fees[feeIndex].status = 'Belum Bayar';\n+import { Card, Button,TextInput,Drawer,Select, Table,Dropdown, Alert,Modal } from \"flowbite-react\";\n+import { HiOutlineSearch } from \"react-icons/hi\";\n+import {  FaCheckCircle, FaTimesCircle, FaHourglassHalf,FaRegEdit,FaEye,FaRegTrashAlt } from 'react-icons/fa';\n+import { FaRegArrowAltCircleDown } from \"react-icons/fa\";\n+import { FaRegArrowAltCircleUp } from \"react-icons/fa\";\n+import { FaEllipsisH } from \"react-icons/fa\";\n+import { FaExchangeAlt } from \"react-icons/fa\";\n+import FilterTransactions from '../../components/FilterTransactions';\n+import moment from 'moment';\n+import 'moment/locale/id';\n+moment.locale('id');\n+\n+const ITEMS_PER_PAGE = 15;\n+\n+\n+const Transaction = ({ initialTransaction }) =>  {\n+  const { useAuthRedirect } = useRequireAuth(['admin', 'editor', 'superadmin']);\n+  useAuthRedirect();\n+  const [transactions, setTransactions] = useState([initialTransaction]);\n+  const [reTransactions, setReTransactions] = useState([initialTransaction])\n+  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n+  const [loading, setLoading] = useState(true);\n+  const { data: session, status } = useSession();\n+  const [searchTerm, setSearchTerm] = useState('');\n+  const [currentPage, setCurrentPage] = useState(0);\n+\n+  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n+  const [currentTransactionType, setCurrentTransactionType] = useState('');\n+\n+  const [showAlert, setShowAlert] = useState(false);\n+  const [alertMessage, setAlertMessage] = useState('');\n+  const [alertType, setAlertType] = useState('success');\n+  \n+  const [showDeleteModal, setShowDeleteModal] = useState(false);\n+  const [transactionIdToDelete, setTransactionIdToDelete] = useState(null);\n+\n+  const toggleSidebar = () => {\n+    setIsSidebarOpen(!isSidebarOpen);\n+  };\n+\n+  const formatCurrency = (amount) => {\n+    return new Intl.NumberFormat('id-ID', {\n+        style: 'currency',\n+        currency: 'IDR',\n+        minimumFractionDigits: 0,\n+    }).format(amount);\n+  };\n+\n+  const fetchTransactions = async () => {\n+    try {\n+        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n+            headers: {\n+              Authorization: `Bearer ${session.accessToken}`,\n+            },\n+        });\n+        setTransactions(res.data.data);\n+        setReTransactions(res.data.data);\n+        setLoading(false);\n+    } catch (error) {\n+        console.error('Error fetching houses data:', error);\n+        setLoading(false);\n+    }\n+ };\n+\n+  useEffect(() => {\n+    if (session) {\n+        fetchTransactions();\n+    }\n+\n+  }, [session, status]);\n+\n+  const handleSearchChange = (event) => {\n+    setSearchTerm(event.target.value);\n+  };\n+\n+  const filteredTransactions = transactions.filter(transaction => \n+    (transaction.description && transaction.description.toLowerCase().includes(searchTerm.toLowerCase()))\n+  );\n+\n+  const offset = currentPage * ITEMS_PER_PAGE;\n+  const currentPageData = filteredTransactions.slice(offset, offset + ITEMS_PER_PAGE);\n+\n+  const handlePageClick = (data) => {\n+    setCurrentPage(data.selected);\n+  };\n+\n+\n+  const getStatusIcon = (status) => {\n+    switch (status) {\n+      case 'berhasil':\n+        return <FaCheckCircle className=\"text-green-500\" />;\n+      case 'gagal':\n+        return <FaTimesCircle className=\"text-red-500\" />;\n+      case 'sedang dicek':\n+        return <FaHourglassHalf className=\"text-yellow-500\" />;\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const getTypeIcon = (type) => {\n+    switch (type) {\n+      case 'income':\n+        return <FaRegArrowAltCircleDown  className=\"text-blue-700 h-4 w-4 md:h-5 md:w-5 \" />;\n+      case 'expense':\n+        return <FaRegArrowAltCircleUp  className=\"text-red-700 h-4 w-4 md:h-5 md:w-5 \" />;\n+      case 'ipl':\n+        return <FaExchangeAlt  className=\"text-green-700  h-3 w-3 md:h-4 md:w-4 \" />;\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const getTextColor = (type) => {\n+    switch (type) {\n+      case 'income':\n+        return \"text-blue-700\";\n+      case 'expense':\n+        return \"text-red-700\";\n+      case 'ipl':\n+        return \"text-green-700\";\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const handlePaymentClick = () => {\n+    setCurrentTransactionType('ipl');\n+    setIsDrawerOpen(true);\n+  };\n+\n+  const handleIncomeClick = () => {\n+    setCurrentTransactionType('income');\n+    setIsDrawerOpen(true);\n+  };\n+\n+  const handleExpenseClick = () => {\n+    setCurrentTransactionType('expense');\n+    setIsDrawerOpen(true);\n+  };\n+\n+  const handleDrawerSubmit = async (transactionData) => {\n+    try {\n+      const response = await axios.post(\n+        `${process.env.NEXT_PUBLIC_API_URL}/transactions/create`, \n+        transactionData, // Hanya data yang dikirim dalam body\n+        {\n+          headers: {\n+            Authorization: `Bearer ${session.accessToken}`, // Tempatkan headers di opsi konfigurasi\n+            'Content-Type': 'application/json',\n+          },\n+        }\n+      );\n+      setAlertType('success');\n+      setAlertMessage('Transaksi berhasil ditambahkan');\n+      setShowAlert(true);\n+     // alert('Transaksi berhasil ditambahkan');\n+      // Refresh data atau navigasi sesuai kebutuhan\n+      fetchTransactions();\n+    } catch (error) {\n+      setAlertType('failure');\n+      setAlertMessage('Gagal menambahkan transaksi');\n+      setShowAlert(true);\n+      console.error('Error creating transaction:', error);\n+    }\n+  };\n+  \n+  const handleAlertDismiss = () => {\n+    setShowAlert(false);\n+  };\n+\n+  if (loading) {\n+    return <Spinner />;\n+  }\n+\n+ // console.log(transactions)\n+\n+  return (\n+    <>\n+   \n+    <Header toggleSidebar={toggleSidebar}/>\n+    <main className='max-w-screen-xl mx-auto'>\n+      <div className='w-full'>\n+        <SideMenu isOpen={isSidebarOpen}/>\n+        <section className='mt-14 px-5 py-5 md:px-8 sm:ml-64'>\n+        {showAlert && (\n+            <Alert className='' color={alertType === 'success' ? 'success' : 'failure'} onDismiss={handleAlertDismiss}>\n+                <span className=\"font-medium\">{alertMessage}</span>\n+            </Alert>\n+        )}\n+          <h1 className='text-xl mb-4 font-semibold text-gray-900 sm:text-2xl dark:text-white'>Data Transaksi</h1>\n+\n+          <Card className='w-full mb-10'>\n+            <h3 className='font-semibold mb-3'>Buat Transaksi Baru</h3>\n+              <div className='flex flex-wrap gap-2'>\n+              <Button size=\"sm\" color=\"success\" onClick={handlePaymentClick}>\n+                <FaExchangeAlt  className=\"mr-2 h-5 w-5\" />\n+                IPL\n+              </Button>\n+\n+              <Button size=\"sm\" color=\"blue\" onClick={handleIncomeClick}>\n+                <FaRegArrowAltCircleDown  className=\"mr-2 h-5 w-5\" />\n+                Masuk\n+              </Button>\n+              <Button size=\"sm\" color=\"failure\" onClick={handleExpenseClick}>\n+                Keluar\n+                <FaRegArrowAltCircleUp  className=\"ml-2 h-5 w-5\" />\n+              </Button>\n+              </div>\n+          </Card>\n+\n+          <TransactionDrawer\n+            isOpen={isDrawerOpen}\n+            onClose={() => setIsDrawerOpen(false)}\n+            onSubmit={handleDrawerSubmit}\n+            transactionType={currentTransactionType}\n+          />\n+\n+          <div className=\"max-w-md mb-4 flex\">\n+\n+            <TextInput \n+              name=\"name\"\n+              placeholder=\"Cari\"\n+              value={searchTerm}\n+              onChange={handleSearchChange}\n+              className=\"mr-2 w-3/5\"\n+              icon={HiOutlineSearch} \n+            />\n+\n+            <FilterTransactions className=\"w-2/5\" setTransactions={setTransactions} initialTransaction={reTransactions} />\n+\n+          </div>\n+\n+          <div className='overflow-x-auto'>\n+            <Table hoverable>\n+              <Table.Head>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 w-3/4'>Keterangan</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tanggal</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Nominal</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tipe</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Status</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>\n+                    <span className=\"sr-only\">Edit</span>\n+                </Table.HeadCell>\n+              </Table.Head>\n+              <Table.Body className=\"divide-y\">\n+                \n+                {currentPageData.map((transaction, index) => ( \n+                  <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n+                    <Table.Cell className={`py-2 px-2 md:py-3 md:px-3 ${getTextColor(transaction.transaction_type)}`}>\n+                      <span className='flex items-start content-start'>\n+                        <span>{getTypeIcon(transaction.transaction_type)} </span>\n+                        <span className=\"ml-2\">{transaction.description}</span> \n+                      </span>\n+                    </Table.Cell>\n+                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}</Table.Cell>\n+                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{formatCurrency(transaction.amount)}</Table.Cell>\n+                    \n+                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n+                      <span className='flex items-center'>\n+                        {transaction.payment_type} \n+                      </span>\n+                    </Table.Cell>\n+                    <Table.Cell className={`items-center flex justify-center content-center py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n+                      <span className='flex items-center'>\n+                        {getStatusIcon(transaction.status)} \n+                      </span>\n+                    </Table.Cell>\n+                    <Table.Cell className='py-2 px-2 md:py-3 md:px-3 text-xs md:text-base'>\n+                      <Dropdown  className=\"relative z-50 cursor-pointer\" align=\"right\" label=\"\" renderTrigger={() => <span><FaEllipsisH  className=\"h-4 w-4\" /></span>}>\n+                        <Dropdown.Item><FaRegEdit className='mr-1'/><span>Edit</span></Dropdown.Item>\n+                        <Dropdown.Item><FaEye className='mr-1'/><span>View</span></Dropdown.Item>\n+                        <Dropdown.Item><FaRegTrashAlt className='mr-1' /><span>Delete</span></Dropdown.Item>\n+                      </Dropdown>\n+\n+                    </Table.Cell>\n+                </Table.Row>\n+\n+                ))}\n+              </Table.Body>\n+            </Table>\n+          </div>\n+          <nav className='py-6'>\n+          <ReactPaginate\n+                previousLabel={'Previous'}\n+                nextLabel={'Next'}\n+                breakLabel={'...'}\n+                pageCount={Math.ceil(filteredTransactions.length / ITEMS_PER_PAGE)}\n+                marginPagesDisplayed={2}\n+                pageRangeDisplayed={5}\n+                onPageChange={handlePageClick}\n+                containerClassName={'pagination flex justify-center -space-x-px text-sm'}\n+                pageClassName={'page-item'}\n+                pageLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                previousClassName={'page-item'}\n+                previousLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                nextClassName={'page-item'}\n+                nextLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                breakClassName={'page-item'}\n+                breakLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                activeClassName={'active'}\n+                activeLinkClassName={'bg-gray-300'}\n+            />\n+          </nav>\n+\n+        </section>\n+        \n+        <Modal\n+          show={showDeleteModal}\n+          size=\"md\"\n+          popup={true}\n+        >\n+          \n+        </Modal>         \n+\n+      </div>\n+      \n+      \n+    </main>\n+    </>\n+  );\n+}\n+\n+export const getServerSideProps = async (context) => {\n+  const session = await getSession(context);\n+  \n+  if (!session) {\n+      return {\n+          redirect: {\n+              destination: '/',\n+              permanent: false,\n+          },\n+      };\n+  }\n+\n+  try {\n+      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n+          headers: {\n+              Authorization: `Bearer ${session.accessToken}`,\n+          },\n+      });\n+      return {\n+          props: {\n+            initialTransaction: res.data,\n+          },\n+      };\n+  } catch (error) {\n+      console.error('Error fetching houses data:', error);\n+      return {\n+          props: {\n+            initialTransaction: [],\n+          },\n+      };\n+  }\n+};\n+\n+export default Transaction;\n"
                },
                {
                    "date": 1722412687954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -320,8 +320,9 @@\n         <Modal\n           show={showDeleteModal}\n           size=\"md\"\n           popup={true}\n+          onClose={() => setShowDeleteModal(false)}\n         >\n           \n         </Modal>         \n \n@@ -366,365 +367,4 @@\n   }\n };\n \n export default Transaction;\n-// pages/home.js\n-import { getSession, useSession } from 'next-auth/react';\n-import { useEffect,useState } from 'react';\n-import axios from 'axios';\n-import { useRequireAuth } from '../../utils/authUtils'; \n-import ReactPaginate from 'react-paginate';\n-\n-import Header from '../../components/Header';\n-import SideMenu from '../../components/dashboard/Sidebar';\n-import TransactionDrawer from '../../components/dashboard/TransactionDrawer';\n-import Spinner from '../../components/Spinner';\n-                house.monthly_fees[feeIndex].status = 'Belum Bayar';\n-import { Card, Button,TextInput,Drawer,Select, Table,Dropdown, Alert,Modal } from \"flowbite-react\";\n-import { HiOutlineSearch } from \"react-icons/hi\";\n-import {  FaCheckCircle, FaTimesCircle, FaHourglassHalf,FaRegEdit,FaEye,FaRegTrashAlt } from 'react-icons/fa';\n-import { FaRegArrowAltCircleDown } from \"react-icons/fa\";\n-import { FaRegArrowAltCircleUp } from \"react-icons/fa\";\n-import { FaEllipsisH } from \"react-icons/fa\";\n-import { FaExchangeAlt } from \"react-icons/fa\";\n-import FilterTransactions from '../../components/FilterTransactions';\n-import moment from 'moment';\n-import 'moment/locale/id';\n-moment.locale('id');\n-\n-const ITEMS_PER_PAGE = 15;\n-\n-\n-const Transaction = ({ initialTransaction }) =>  {\n-  const { useAuthRedirect } = useRequireAuth(['admin', 'editor', 'superadmin']);\n-  useAuthRedirect();\n-  const [transactions, setTransactions] = useState([initialTransaction]);\n-  const [reTransactions, setReTransactions] = useState([initialTransaction])\n-  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n-  const [loading, setLoading] = useState(true);\n-  const { data: session, status } = useSession();\n-  const [searchTerm, setSearchTerm] = useState('');\n-  const [currentPage, setCurrentPage] = useState(0);\n-\n-  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n-  const [currentTransactionType, setCurrentTransactionType] = useState('');\n-\n-  const [showAlert, setShowAlert] = useState(false);\n-  const [alertMessage, setAlertMessage] = useState('');\n-  const [alertType, setAlertType] = useState('success');\n-  \n-  const [showDeleteModal, setShowDeleteModal] = useState(false);\n-  const [transactionIdToDelete, setTransactionIdToDelete] = useState(null);\n-\n-  const toggleSidebar = () => {\n-    setIsSidebarOpen(!isSidebarOpen);\n-  };\n-\n-  const formatCurrency = (amount) => {\n-    return new Intl.NumberFormat('id-ID', {\n-        style: 'currency',\n-        currency: 'IDR',\n-        minimumFractionDigits: 0,\n-    }).format(amount);\n-  };\n-\n-  const fetchTransactions = async () => {\n-    try {\n-        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n-            headers: {\n-              Authorization: `Bearer ${session.accessToken}`,\n-            },\n-        });\n-        setTransactions(res.data.data);\n-        setReTransactions(res.data.data);\n-        setLoading(false);\n-    } catch (error) {\n-        console.error('Error fetching houses data:', error);\n-        setLoading(false);\n-    }\n- };\n-\n-  useEffect(() => {\n-    if (session) {\n-        fetchTransactions();\n-    }\n-\n-  }, [session, status]);\n-\n-  const handleSearchChange = (event) => {\n-    setSearchTerm(event.target.value);\n-  };\n-\n-  const filteredTransactions = transactions.filter(transaction => \n-    (transaction.description && transaction.description.toLowerCase().includes(searchTerm.toLowerCase()))\n-  );\n-\n-  const offset = currentPage * ITEMS_PER_PAGE;\n-  const currentPageData = filteredTransactions.slice(offset, offset + ITEMS_PER_PAGE);\n-\n-  const handlePageClick = (data) => {\n-    setCurrentPage(data.selected);\n-  };\n-\n-\n-  const getStatusIcon = (status) => {\n-    switch (status) {\n-      case 'berhasil':\n-        return <FaCheckCircle className=\"text-green-500\" />;\n-      case 'gagal':\n-        return <FaTimesCircle className=\"text-red-500\" />;\n-      case 'sedang dicek':\n-        return <FaHourglassHalf className=\"text-yellow-500\" />;\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const getTypeIcon = (type) => {\n-    switch (type) {\n-      case 'income':\n-        return <FaRegArrowAltCircleDown  className=\"text-blue-700 h-4 w-4 md:h-5 md:w-5 \" />;\n-      case 'expense':\n-        return <FaRegArrowAltCircleUp  className=\"text-red-700 h-4 w-4 md:h-5 md:w-5 \" />;\n-      case 'ipl':\n-        return <FaExchangeAlt  className=\"text-green-700  h-3 w-3 md:h-4 md:w-4 \" />;\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const getTextColor = (type) => {\n-    switch (type) {\n-      case 'income':\n-        return \"text-blue-700\";\n-      case 'expense':\n-        return \"text-red-700\";\n-      case 'ipl':\n-        return \"text-green-700\";\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const handlePaymentClick = () => {\n-    setCurrentTransactionType('ipl');\n-    setIsDrawerOpen(true);\n-  };\n-\n-  const handleIncomeClick = () => {\n-    setCurrentTransactionType('income');\n-    setIsDrawerOpen(true);\n-  };\n-\n-  const handleExpenseClick = () => {\n-    setCurrentTransactionType('expense');\n-    setIsDrawerOpen(true);\n-  };\n-\n-  const handleDrawerSubmit = async (transactionData) => {\n-    try {\n-      const response = await axios.post(\n-        `${process.env.NEXT_PUBLIC_API_URL}/transactions/create`, \n-        transactionData, // Hanya data yang dikirim dalam body\n-        {\n-          headers: {\n-            Authorization: `Bearer ${session.accessToken}`, // Tempatkan headers di opsi konfigurasi\n-            'Content-Type': 'application/json',\n-          },\n-        }\n-      );\n-      setAlertType('success');\n-      setAlertMessage('Transaksi berhasil ditambahkan');\n-      setShowAlert(true);\n-     // alert('Transaksi berhasil ditambahkan');\n-      // Refresh data atau navigasi sesuai kebutuhan\n-      fetchTransactions();\n-    } catch (error) {\n-      setAlertType('failure');\n-      setAlertMessage('Gagal menambahkan transaksi');\n-      setShowAlert(true);\n-      console.error('Error creating transaction:', error);\n-    }\n-  };\n-  \n-  const handleAlertDismiss = () => {\n-    setShowAlert(false);\n-  };\n-\n-  if (loading) {\n-    return <Spinner />;\n-  }\n-\n- // console.log(transactions)\n-\n-  return (\n-    <>\n-   \n-    <Header toggleSidebar={toggleSidebar}/>\n-    <main className='max-w-screen-xl mx-auto'>\n-      <div className='w-full'>\n-        <SideMenu isOpen={isSidebarOpen}/>\n-        <section className='mt-14 px-5 py-5 md:px-8 sm:ml-64'>\n-        {showAlert && (\n-            <Alert className='' color={alertType === 'success' ? 'success' : 'failure'} onDismiss={handleAlertDismiss}>\n-                <span className=\"font-medium\">{alertMessage}</span>\n-            </Alert>\n-        )}\n-          <h1 className='text-xl mb-4 font-semibold text-gray-900 sm:text-2xl dark:text-white'>Data Transaksi</h1>\n-\n-          <Card className='w-full mb-10'>\n-            <h3 className='font-semibold mb-3'>Buat Transaksi Baru</h3>\n-              <div className='flex flex-wrap gap-2'>\n-              <Button size=\"sm\" color=\"success\" onClick={handlePaymentClick}>\n-                <FaExchangeAlt  className=\"mr-2 h-5 w-5\" />\n-                IPL\n-              </Button>\n-\n-              <Button size=\"sm\" color=\"blue\" onClick={handleIncomeClick}>\n-                <FaRegArrowAltCircleDown  className=\"mr-2 h-5 w-5\" />\n-                Masuk\n-              </Button>\n-              <Button size=\"sm\" color=\"failure\" onClick={handleExpenseClick}>\n-                Keluar\n-                <FaRegArrowAltCircleUp  className=\"ml-2 h-5 w-5\" />\n-              </Button>\n-              </div>\n-          </Card>\n-\n-          <TransactionDrawer\n-            isOpen={isDrawerOpen}\n-            onClose={() => setIsDrawerOpen(false)}\n-            onSubmit={handleDrawerSubmit}\n-            transactionType={currentTransactionType}\n-          />\n-\n-          <div className=\"max-w-md mb-4 flex\">\n-\n-            <TextInput \n-              name=\"name\"\n-              placeholder=\"Cari\"\n-              value={searchTerm}\n-              onChange={handleSearchChange}\n-              className=\"mr-2 w-3/5\"\n-              icon={HiOutlineSearch} \n-            />\n-\n-            <FilterTransactions className=\"w-2/5\" setTransactions={setTransactions} initialTransaction={reTransactions} />\n-\n-          </div>\n-\n-          <div className='overflow-x-auto'>\n-            <Table hoverable>\n-              <Table.Head>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 w-3/4'>Keterangan</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tanggal</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Nominal</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tipe</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Status</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>\n-                    <span className=\"sr-only\">Edit</span>\n-                </Table.HeadCell>\n-              </Table.Head>\n-              <Table.Body className=\"divide-y\">\n-                \n-                {currentPageData.map((transaction, index) => ( \n-                  <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-                    <Table.Cell className={`py-2 px-2 md:py-3 md:px-3 ${getTextColor(transaction.transaction_type)}`}>\n-                      <span className='flex items-start content-start'>\n-                        <span>{getTypeIcon(transaction.transaction_type)} </span>\n-                        <span className=\"ml-2\">{transaction.description}</span> \n-                      </span>\n-                    </Table.Cell>\n-                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}</Table.Cell>\n-                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{formatCurrency(transaction.amount)}</Table.Cell>\n-                    \n-                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n-                      <span className='flex items-center'>\n-                        {transaction.payment_type} \n-                      </span>\n-                    </Table.Cell>\n-                    <Table.Cell className={`items-center flex justify-center content-center py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n-                      <span className='flex items-center'>\n-                        {getStatusIcon(transaction.status)} \n-                      </span>\n-                    </Table.Cell>\n-                    <Table.Cell className='py-2 px-2 md:py-3 md:px-3 text-xs md:text-base'>\n-                      <Dropdown  className=\"relative z-50 cursor-pointer\" align=\"right\" label=\"\" renderTrigger={() => <span><FaEllipsisH  className=\"h-4 w-4\" /></span>}>\n-                        <Dropdown.Item><FaRegEdit className='mr-1'/><span>Edit</span></Dropdown.Item>\n-                        <Dropdown.Item><FaEye className='mr-1'/><span>View</span></Dropdown.Item>\n-                        <Dropdown.Item><FaRegTrashAlt className='mr-1' /><span>Delete</span></Dropdown.Item>\n-                      </Dropdown>\n-\n-                    </Table.Cell>\n-                </Table.Row>\n-\n-                ))}\n-              </Table.Body>\n-            </Table>\n-          </div>\n-          <nav className='py-6'>\n-          <ReactPaginate\n-                previousLabel={'Previous'}\n-                nextLabel={'Next'}\n-                breakLabel={'...'}\n-                pageCount={Math.ceil(filteredTransactions.length / ITEMS_PER_PAGE)}\n-                marginPagesDisplayed={2}\n-                pageRangeDisplayed={5}\n-                onPageChange={handlePageClick}\n-                containerClassName={'pagination flex justify-center -space-x-px text-sm'}\n-                pageClassName={'page-item'}\n-                pageLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                previousClassName={'page-item'}\n-                previousLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                nextClassName={'page-item'}\n-                nextLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                breakClassName={'page-item'}\n-                breakLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                activeClassName={'active'}\n-                activeLinkClassName={'bg-gray-300'}\n-            />\n-          </nav>\n-\n-        </section>\n-\n-      </div>\n-      \n-      \n-    </main>\n-    </>\n-  );\n-}\n-\n-export const getServerSideProps = async (context) => {\n-  const session = await getSession(context);\n-  \n-  if (!session) {\n-      return {\n-          redirect: {\n-              destination: '/',\n-              permanent: false,\n-          },\n-      };\n-  }\n-\n-  try {\n-      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n-          headers: {\n-              Authorization: `Bearer ${session.accessToken}`,\n-          },\n-      });\n-      return {\n-          props: {\n-            initialTransaction: res.data,\n-          },\n-      };\n-  } catch (error) {\n-      console.error('Error fetching houses data:', error);\n-      return {\n-          props: {\n-            initialTransaction: [],\n-          },\n-      };\n-  }\n-};\n-\n-export default Transaction;\n"
                },
                {
                    "date": 1722412717160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -322,8 +322,25 @@\n           size=\"md\"\n           popup={true}\n           onClose={() => setShowDeleteModal(false)}\n         >\n+          <Modal.Header />\n+          <Modal.Body>\n+          <div className=\"text-center\">\n+            <HiOutlineExclamationCircle className=\"mx-auto mb-4 h-14 w-14 text-gray-400 dark:text-gray-200\" />\n+            <h3 className=\"mb-5 text-lg font-normal text-gray-500 dark:text-gray-400\">\n+              Are you sure you want to delete this product?\n+            </h3>\n+            <div className=\"flex justify-center gap-4\">\n+              <Button color=\"failure\" onClick={() => setOpenModal(false)}>\n+                {\"Yes, I'm sure\"}\n+              </Button>\n+              <Button color=\"gray\" onClick={() => setOpenModal(false)}>\n+                No, cancel\n+              </Button>\n+            </div>\n+          </div>\n+          </Modal.Body>\n           \n         </Modal>         \n \n       </div>\n"
                },
                {
                    "date": 1722412735319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -327,9 +327,9 @@\n           <Modal.Body>\n           <div className=\"text-center\">\n             <HiOutlineExclamationCircle className=\"mx-auto mb-4 h-14 w-14 text-gray-400 dark:text-gray-200\" />\n             <h3 className=\"mb-5 text-lg font-normal text-gray-500 dark:text-gray-400\">\n-              Are you sure you want to delete this product?\n+            Apakah Anda yakin ingin menghapus transaksi ini?\n             </h3>\n             <div className=\"flex justify-center gap-4\">\n               <Button color=\"failure\" onClick={() => setOpenModal(false)}>\n                 {\"Yes, I'm sure\"}\n"
                },
                {
                    "date": 1722412757181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -331,12 +331,12 @@\n             Apakah Anda yakin ingin menghapus transaksi ini?\n             </h3>\n             <div className=\"flex justify-center gap-4\">\n               <Button color=\"failure\" onClick={() => setOpenModal(false)}>\n-                {\"Yes, I'm sure\"}\n+                Hapus\n               </Button>\n               <Button color=\"gray\" onClick={() => setOpenModal(false)}>\n-                No, cancel\n+                Batal\n               </Button>\n             </div>\n           </div>\n           </Modal.Body>\n"
                },
                {
                    "date": 1722412765844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,387 @@\n+// pages/home.js\n+import { getSession, useSession } from 'next-auth/react';\n+import { useEffect,useState } from 'react';\n+import axios from 'axios';\n+import { useRequireAuth } from '../../utils/authUtils'; \n+import ReactPaginate from 'react-paginate';\n+\n+import Header from '../../components/Header';\n+import SideMenu from '../../components/dashboard/Sidebar';\n+import TransactionDrawer from '../../components/dashboard/TransactionDrawer';\n+import Spinner from '../../components/Spinner';\n+                house.monthly_fees[feeIndex].status = 'Belum Bayar';\n+import { Card, Button,TextInput,Drawer,Select, Table,Dropdown, Alert,Modal } from \"flowbite-react\";\n+import { HiOutlineSearch } from \"react-icons/hi\";\n+import {  FaCheckCircle, FaTimesCircle, FaHourglassHalf,FaRegEdit,FaEye,FaRegTrashAlt } from 'react-icons/fa';\n+import { FaRegArrowAltCircleDown } from \"react-icons/fa\";\n+import { FaRegArrowAltCircleUp } from \"react-icons/fa\";\n+import { FaEllipsisH } from \"react-icons/fa\";\n+import { FaExchangeAlt } from \"react-icons/fa\";\n+import FilterTransactions from '../../components/FilterTransactions';\n+import moment from 'moment';\n+import 'moment/locale/id';\n+moment.locale('id');\n+\n+const ITEMS_PER_PAGE = 15;\n+\n+\n+const Transaction = ({ initialTransaction }) =>  {\n+  const { useAuthRedirect } = useRequireAuth(['admin', 'editor', 'superadmin']);\n+  useAuthRedirect();\n+  const [transactions, setTransactions] = useState([initialTransaction]);\n+  const [reTransactions, setReTransactions] = useState([initialTransaction])\n+  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n+  const [loading, setLoading] = useState(true);\n+  const { data: session, status } = useSession();\n+  const [searchTerm, setSearchTerm] = useState('');\n+  const [currentPage, setCurrentPage] = useState(0);\n+\n+  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n+  const [currentTransactionType, setCurrentTransactionType] = useState('');\n+\n+  const [showAlert, setShowAlert] = useState(false);\n+  const [alertMessage, setAlertMessage] = useState('');\n+  const [alertType, setAlertType] = useState('success');\n+  \n+  const [showDeleteModal, setShowDeleteModal] = useState(false);\n+  const [transactionIdToDelete, setTransactionIdToDelete] = useState(null);\n+\n+  const toggleSidebar = () => {\n+    setIsSidebarOpen(!isSidebarOpen);\n+  };\n+\n+  const formatCurrency = (amount) => {\n+    return new Intl.NumberFormat('id-ID', {\n+        style: 'currency',\n+        currency: 'IDR',\n+        minimumFractionDigits: 0,\n+    }).format(amount);\n+  };\n+\n+  const fetchTransactions = async () => {\n+    try {\n+        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n+            headers: {\n+              Authorization: `Bearer ${session.accessToken}`,\n+            },\n+        });\n+        setTransactions(res.data.data);\n+        setReTransactions(res.data.data);\n+        setLoading(false);\n+    } catch (error) {\n+        console.error('Error fetching houses data:', error);\n+        setLoading(false);\n+    }\n+ };\n+\n+  useEffect(() => {\n+    if (session) {\n+        fetchTransactions();\n+    }\n+\n+  }, [session, status]);\n+\n+  const handleSearchChange = (event) => {\n+    setSearchTerm(event.target.value);\n+  };\n+\n+  const filteredTransactions = transactions.filter(transaction => \n+    (transaction.description && transaction.description.toLowerCase().includes(searchTerm.toLowerCase()))\n+  );\n+\n+  const offset = currentPage * ITEMS_PER_PAGE;\n+  const currentPageData = filteredTransactions.slice(offset, offset + ITEMS_PER_PAGE);\n+\n+  const handlePageClick = (data) => {\n+    setCurrentPage(data.selected);\n+  };\n+\n+\n+  const getStatusIcon = (status) => {\n+    switch (status) {\n+      case 'berhasil':\n+        return <FaCheckCircle className=\"text-green-500\" />;\n+      case 'gagal':\n+        return <FaTimesCircle className=\"text-red-500\" />;\n+      case 'sedang dicek':\n+        return <FaHourglassHalf className=\"text-yellow-500\" />;\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const getTypeIcon = (type) => {\n+    switch (type) {\n+      case 'income':\n+        return <FaRegArrowAltCircleDown  className=\"text-blue-700 h-4 w-4 md:h-5 md:w-5 \" />;\n+      case 'expense':\n+        return <FaRegArrowAltCircleUp  className=\"text-red-700 h-4 w-4 md:h-5 md:w-5 \" />;\n+      case 'ipl':\n+        return <FaExchangeAlt  className=\"text-green-700  h-3 w-3 md:h-4 md:w-4 \" />;\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const getTextColor = (type) => {\n+    switch (type) {\n+      case 'income':\n+        return \"text-blue-700\";\n+      case 'expense':\n+        return \"text-red-700\";\n+      case 'ipl':\n+        return \"text-green-700\";\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const handlePaymentClick = () => {\n+    setCurrentTransactionType('ipl');\n+    setIsDrawerOpen(true);\n+  };\n+\n+  const handleIncomeClick = () => {\n+    setCurrentTransactionType('income');\n+    setIsDrawerOpen(true);\n+  };\n+\n+  const handleExpenseClick = () => {\n+    setCurrentTransactionType('expense');\n+    setIsDrawerOpen(true);\n+  };\n+\n+  const handleDrawerSubmit = async (transactionData) => {\n+    try {\n+      const response = await axios.post(\n+        `${process.env.NEXT_PUBLIC_API_URL}/transactions/create`, \n+        transactionData, // Hanya data yang dikirim dalam body\n+        {\n+          headers: {\n+            Authorization: `Bearer ${session.accessToken}`, // Tempatkan headers di opsi konfigurasi\n+            'Content-Type': 'application/json',\n+          },\n+        }\n+      );\n+      setAlertType('success');\n+      setAlertMessage('Transaksi berhasil ditambahkan');\n+      setShowAlert(true);\n+     // alert('Transaksi berhasil ditambahkan');\n+      // Refresh data atau navigasi sesuai kebutuhan\n+      fetchTransactions();\n+    } catch (error) {\n+      setAlertType('failure');\n+      setAlertMessage('Gagal menambahkan transaksi');\n+      setShowAlert(true);\n+      console.error('Error creating transaction:', error);\n+    }\n+  };\n+  \n+  const handleAlertDismiss = () => {\n+    setShowAlert(false);\n+  };\n+\n+  if (loading) {\n+    return <Spinner />;\n+  }\n+\n+ // console.log(transactions)\n+\n+  return (\n+    <>\n+   \n+    <Header toggleSidebar={toggleSidebar}/>\n+    <main className='max-w-screen-xl mx-auto'>\n+      <div className='w-full'>\n+        <SideMenu isOpen={isSidebarOpen}/>\n+        <section className='mt-14 px-5 py-5 md:px-8 sm:ml-64'>\n+        {showAlert && (\n+            <Alert className='' color={alertType === 'success' ? 'success' : 'failure'} onDismiss={handleAlertDismiss}>\n+                <span className=\"font-medium\">{alertMessage}</span>\n+            </Alert>\n+        )}\n+          <h1 className='text-xl mb-4 font-semibold text-gray-900 sm:text-2xl dark:text-white'>Data Transaksi</h1>\n+\n+          <Card className='w-full mb-10'>\n+            <h3 className='font-semibold mb-3'>Buat Transaksi Baru</h3>\n+              <div className='flex flex-wrap gap-2'>\n+              <Button size=\"sm\" color=\"success\" onClick={handlePaymentClick}>\n+                <FaExchangeAlt  className=\"mr-2 h-5 w-5\" />\n+                IPL\n+              </Button>\n+\n+              <Button size=\"sm\" color=\"blue\" onClick={handleIncomeClick}>\n+                <FaRegArrowAltCircleDown  className=\"mr-2 h-5 w-5\" />\n+                Masuk\n+              </Button>\n+              <Button size=\"sm\" color=\"failure\" onClick={handleExpenseClick}>\n+                Keluar\n+                <FaRegArrowAltCircleUp  className=\"ml-2 h-5 w-5\" />\n+              </Button>\n+              </div>\n+          </Card>\n+\n+          <TransactionDrawer\n+            isOpen={isDrawerOpen}\n+            onClose={() => setIsDrawerOpen(false)}\n+            onSubmit={handleDrawerSubmit}\n+            transactionType={currentTransactionType}\n+          />\n+\n+          <div className=\"max-w-md mb-4 flex\">\n+\n+            <TextInput \n+              name=\"name\"\n+              placeholder=\"Cari\"\n+              value={searchTerm}\n+              onChange={handleSearchChange}\n+              className=\"mr-2 w-3/5\"\n+              icon={HiOutlineSearch} \n+            />\n+\n+            <FilterTransactions className=\"w-2/5\" setTransactions={setTransactions} initialTransaction={reTransactions} />\n+\n+          </div>\n+\n+          <div className='overflow-x-auto'>\n+            <Table hoverable>\n+              <Table.Head>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 w-3/4'>Keterangan</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tanggal</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Nominal</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tipe</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Status</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>\n+                    <span className=\"sr-only\">Edit</span>\n+                </Table.HeadCell>\n+              </Table.Head>\n+              <Table.Body className=\"divide-y\">\n+                \n+                {currentPageData.map((transaction, index) => ( \n+                  <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n+                    <Table.Cell className={`py-2 px-2 md:py-3 md:px-3 ${getTextColor(transaction.transaction_type)}`}>\n+                      <span className='flex items-start content-start'>\n+                        <span>{getTypeIcon(transaction.transaction_type)} </span>\n+                        <span className=\"ml-2\">{transaction.description}</span> \n+                      </span>\n+                    </Table.Cell>\n+                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}</Table.Cell>\n+                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{formatCurrency(transaction.amount)}</Table.Cell>\n+                    \n+                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n+                      <span className='flex items-center'>\n+                        {transaction.payment_type} \n+                      </span>\n+                    </Table.Cell>\n+                    <Table.Cell className={`items-center flex justify-center content-center py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n+                      <span className='flex items-center'>\n+                        {getStatusIcon(transaction.status)} \n+                      </span>\n+                    </Table.Cell>\n+                    <Table.Cell className='py-2 px-2 md:py-3 md:px-3 text-xs md:text-base'>\n+                      <Dropdown  className=\"relative z-50 cursor-pointer\" align=\"right\" label=\"\" renderTrigger={() => <span><FaEllipsisH  className=\"h-4 w-4\" /></span>}>\n+                        <Dropdown.Item><FaRegEdit className='mr-1'/><span>Edit</span></Dropdown.Item>\n+                        <Dropdown.Item><FaEye className='mr-1'/><span>View</span></Dropdown.Item>\n+                        <Dropdown.Item><FaRegTrashAlt className='mr-1' /><span>Delete</span></Dropdown.Item>\n+                      </Dropdown>\n+\n+                    </Table.Cell>\n+                </Table.Row>\n+\n+                ))}\n+              </Table.Body>\n+            </Table>\n+          </div>\n+          <nav className='py-6'>\n+          <ReactPaginate\n+                previousLabel={'Previous'}\n+                nextLabel={'Next'}\n+                breakLabel={'...'}\n+                pageCount={Math.ceil(filteredTransactions.length / ITEMS_PER_PAGE)}\n+                marginPagesDisplayed={2}\n+                pageRangeDisplayed={5}\n+                onPageChange={handlePageClick}\n+                containerClassName={'pagination flex justify-center -space-x-px text-sm'}\n+                pageClassName={'page-item'}\n+                pageLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                previousClassName={'page-item'}\n+                previousLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                nextClassName={'page-item'}\n+                nextLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                breakClassName={'page-item'}\n+                breakLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                activeClassName={'active'}\n+                activeLinkClassName={'bg-gray-300'}\n+            />\n+          </nav>\n+\n+        </section>\n+        \n+        <Modal\n+          show={showDeleteModal}\n+          size=\"md\"\n+          popup={true}\n+          onClose={() => setShowDeleteModal(false)}\n+        >\n+          <Modal.Header />\n+          <Modal.Body>\n+          <div className=\"text-center\">\n+            <HiOutlineExclamationCircle className=\"mx-auto mb-4 h-14 w-14 text-gray-400 dark:text-gray-200\" />\n+            <h3 className=\"mb-5 text-lg font-normal text-gray-500 dark:text-gray-400\">\n+            Apakah Anda yakin ingin menghapus transaksi ini?\n+            </h3>\n+            <div className=\"flex justify-center gap-4\">\n+              <Button color=\"failure\" onClick={handleConfirmDelete}>\n+                Hapus\n+              </Button>\n+              <Button color=\"gray\" onClick={() => setOpenModal(false)}>\n+                Batal\n+              </Button>\n+            </div>\n+          </div>\n+          </Modal.Body>\n+          \n+        </Modal>         \n+\n+      </div>\n+      \n+      \n+    </main>\n+    </>\n+  );\n+}\n+\n+export const getServerSideProps = async (context) => {\n+  const session = await getSession(context);\n+  \n+  if (!session) {\n+      return {\n+          redirect: {\n+              destination: '/',\n+              permanent: false,\n+          },\n+      };\n+  }\n+\n+  try {\n+      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n+          headers: {\n+              Authorization: `Bearer ${session.accessToken}`,\n+          },\n+      });\n+      return {\n+          props: {\n+            initialTransaction: res.data,\n+          },\n+      };\n+  } catch (error) {\n+      console.error('Error fetching houses data:', error);\n+      return {\n+          props: {\n+            initialTransaction: [],\n+          },\n+      };\n+  }\n+};\n+\n+export default Transaction;\n"
                },
                {
                    "date": 1722412773276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -333,9 +333,9 @@\n             <div className=\"flex justify-center gap-4\">\n               <Button color=\"failure\" onClick={handleConfirmDelete}>\n                 Hapus\n               </Button>\n-              <Button color=\"gray\" onClick={() => setOpenModal(false)}>\n+              <Button color=\"gray\" onClick={() => setShowDeleteModal(false)}>\n                 Batal\n               </Button>\n             </div>\n           </div>\n@@ -384,391 +384,4 @@\n   }\n };\n \n export default Transaction;\n-// pages/home.js\n-import { getSession, useSession } from 'next-auth/react';\n-import { useEffect,useState } from 'react';\n-import axios from 'axios';\n-import { useRequireAuth } from '../../utils/authUtils'; \n-import ReactPaginate from 'react-paginate';\n-\n-import Header from '../../components/Header';\n-import SideMenu from '../../components/dashboard/Sidebar';\n-import TransactionDrawer from '../../components/dashboard/TransactionDrawer';\n-import Spinner from '../../components/Spinner';\n-                house.monthly_fees[feeIndex].status = 'Belum Bayar';\n-import { Card, Button,TextInput,Drawer,Select, Table,Dropdown, Alert,Modal } from \"flowbite-react\";\n-import { HiOutlineSearch } from \"react-icons/hi\";\n-import {  FaCheckCircle, FaTimesCircle, FaHourglassHalf,FaRegEdit,FaEye,FaRegTrashAlt } from 'react-icons/fa';\n-import { FaRegArrowAltCircleDown } from \"react-icons/fa\";\n-import { FaRegArrowAltCircleUp } from \"react-icons/fa\";\n-import { FaEllipsisH } from \"react-icons/fa\";\n-import { FaExchangeAlt } from \"react-icons/fa\";\n-import FilterTransactions from '../../components/FilterTransactions';\n-import moment from 'moment';\n-import 'moment/locale/id';\n-moment.locale('id');\n-\n-const ITEMS_PER_PAGE = 15;\n-\n-\n-const Transaction = ({ initialTransaction }) =>  {\n-  const { useAuthRedirect } = useRequireAuth(['admin', 'editor', 'superadmin']);\n-  useAuthRedirect();\n-  const [transactions, setTransactions] = useState([initialTransaction]);\n-  const [reTransactions, setReTransactions] = useState([initialTransaction])\n-  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n-  const [loading, setLoading] = useState(true);\n-  const { data: session, status } = useSession();\n-  const [searchTerm, setSearchTerm] = useState('');\n-  const [currentPage, setCurrentPage] = useState(0);\n-\n-  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n-  const [currentTransactionType, setCurrentTransactionType] = useState('');\n-\n-  const [showAlert, setShowAlert] = useState(false);\n-  const [alertMessage, setAlertMessage] = useState('');\n-  const [alertType, setAlertType] = useState('success');\n-  \n-  const [showDeleteModal, setShowDeleteModal] = useState(false);\n-  const [transactionIdToDelete, setTransactionIdToDelete] = useState(null);\n-\n-  const toggleSidebar = () => {\n-    setIsSidebarOpen(!isSidebarOpen);\n-  };\n-\n-  const formatCurrency = (amount) => {\n-    return new Intl.NumberFormat('id-ID', {\n-        style: 'currency',\n-        currency: 'IDR',\n-        minimumFractionDigits: 0,\n-    }).format(amount);\n-  };\n-\n-  const fetchTransactions = async () => {\n-    try {\n-        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n-            headers: {\n-              Authorization: `Bearer ${session.accessToken}`,\n-            },\n-        });\n-        setTransactions(res.data.data);\n-        setReTransactions(res.data.data);\n-        setLoading(false);\n-    } catch (error) {\n-        console.error('Error fetching houses data:', error);\n-        setLoading(false);\n-    }\n- };\n-\n-  useEffect(() => {\n-    if (session) {\n-        fetchTransactions();\n-    }\n-\n-  }, [session, status]);\n-\n-  const handleSearchChange = (event) => {\n-    setSearchTerm(event.target.value);\n-  };\n-\n-  const filteredTransactions = transactions.filter(transaction => \n-    (transaction.description && transaction.description.toLowerCase().includes(searchTerm.toLowerCase()))\n-  );\n-\n-  const offset = currentPage * ITEMS_PER_PAGE;\n-  const currentPageData = filteredTransactions.slice(offset, offset + ITEMS_PER_PAGE);\n-\n-  const handlePageClick = (data) => {\n-    setCurrentPage(data.selected);\n-  };\n-\n-\n-  const getStatusIcon = (status) => {\n-    switch (status) {\n-      case 'berhasil':\n-        return <FaCheckCircle className=\"text-green-500\" />;\n-      case 'gagal':\n-        return <FaTimesCircle className=\"text-red-500\" />;\n-      case 'sedang dicek':\n-        return <FaHourglassHalf className=\"text-yellow-500\" />;\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const getTypeIcon = (type) => {\n-    switch (type) {\n-      case 'income':\n-        return <FaRegArrowAltCircleDown  className=\"text-blue-700 h-4 w-4 md:h-5 md:w-5 \" />;\n-      case 'expense':\n-        return <FaRegArrowAltCircleUp  className=\"text-red-700 h-4 w-4 md:h-5 md:w-5 \" />;\n-      case 'ipl':\n-        return <FaExchangeAlt  className=\"text-green-700  h-3 w-3 md:h-4 md:w-4 \" />;\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const getTextColor = (type) => {\n-    switch (type) {\n-      case 'income':\n-        return \"text-blue-700\";\n-      case 'expense':\n-        return \"text-red-700\";\n-      case 'ipl':\n-        return \"text-green-700\";\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const handlePaymentClick = () => {\n-    setCurrentTransactionType('ipl');\n-    setIsDrawerOpen(true);\n-  };\n-\n-  const handleIncomeClick = () => {\n-    setCurrentTransactionType('income');\n-    setIsDrawerOpen(true);\n-  };\n-\n-  const handleExpenseClick = () => {\n-    setCurrentTransactionType('expense');\n-    setIsDrawerOpen(true);\n-  };\n-\n-  const handleDrawerSubmit = async (transactionData) => {\n-    try {\n-      const response = await axios.post(\n-        `${process.env.NEXT_PUBLIC_API_URL}/transactions/create`, \n-        transactionData, // Hanya data yang dikirim dalam body\n-        {\n-          headers: {\n-            Authorization: `Bearer ${session.accessToken}`, // Tempatkan headers di opsi konfigurasi\n-            'Content-Type': 'application/json',\n-          },\n-        }\n-      );\n-      setAlertType('success');\n-      setAlertMessage('Transaksi berhasil ditambahkan');\n-      setShowAlert(true);\n-     // alert('Transaksi berhasil ditambahkan');\n-      // Refresh data atau navigasi sesuai kebutuhan\n-      fetchTransactions();\n-    } catch (error) {\n-      setAlertType('failure');\n-      setAlertMessage('Gagal menambahkan transaksi');\n-      setShowAlert(true);\n-      console.error('Error creating transaction:', error);\n-    }\n-  };\n-  \n-  const handleAlertDismiss = () => {\n-    setShowAlert(false);\n-  };\n-\n-  if (loading) {\n-    return <Spinner />;\n-  }\n-\n- // console.log(transactions)\n-\n-  return (\n-    <>\n-   \n-    <Header toggleSidebar={toggleSidebar}/>\n-    <main className='max-w-screen-xl mx-auto'>\n-      <div className='w-full'>\n-        <SideMenu isOpen={isSidebarOpen}/>\n-        <section className='mt-14 px-5 py-5 md:px-8 sm:ml-64'>\n-        {showAlert && (\n-            <Alert className='' color={alertType === 'success' ? 'success' : 'failure'} onDismiss={handleAlertDismiss}>\n-                <span className=\"font-medium\">{alertMessage}</span>\n-            </Alert>\n-        )}\n-          <h1 className='text-xl mb-4 font-semibold text-gray-900 sm:text-2xl dark:text-white'>Data Transaksi</h1>\n-\n-          <Card className='w-full mb-10'>\n-            <h3 className='font-semibold mb-3'>Buat Transaksi Baru</h3>\n-              <div className='flex flex-wrap gap-2'>\n-              <Button size=\"sm\" color=\"success\" onClick={handlePaymentClick}>\n-                <FaExchangeAlt  className=\"mr-2 h-5 w-5\" />\n-                IPL\n-              </Button>\n-\n-              <Button size=\"sm\" color=\"blue\" onClick={handleIncomeClick}>\n-                <FaRegArrowAltCircleDown  className=\"mr-2 h-5 w-5\" />\n-                Masuk\n-              </Button>\n-              <Button size=\"sm\" color=\"failure\" onClick={handleExpenseClick}>\n-                Keluar\n-                <FaRegArrowAltCircleUp  className=\"ml-2 h-5 w-5\" />\n-              </Button>\n-              </div>\n-          </Card>\n-\n-          <TransactionDrawer\n-            isOpen={isDrawerOpen}\n-            onClose={() => setIsDrawerOpen(false)}\n-            onSubmit={handleDrawerSubmit}\n-            transactionType={currentTransactionType}\n-          />\n-\n-          <div className=\"max-w-md mb-4 flex\">\n-\n-            <TextInput \n-              name=\"name\"\n-              placeholder=\"Cari\"\n-              value={searchTerm}\n-              onChange={handleSearchChange}\n-              className=\"mr-2 w-3/5\"\n-              icon={HiOutlineSearch} \n-            />\n-\n-            <FilterTransactions className=\"w-2/5\" setTransactions={setTransactions} initialTransaction={reTransactions} />\n-\n-          </div>\n-\n-          <div className='overflow-x-auto'>\n-            <Table hoverable>\n-              <Table.Head>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 w-3/4'>Keterangan</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tanggal</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Nominal</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tipe</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Status</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>\n-                    <span className=\"sr-only\">Edit</span>\n-                </Table.HeadCell>\n-              </Table.Head>\n-              <Table.Body className=\"divide-y\">\n-                \n-                {currentPageData.map((transaction, index) => ( \n-                  <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-                    <Table.Cell className={`py-2 px-2 md:py-3 md:px-3 ${getTextColor(transaction.transaction_type)}`}>\n-                      <span className='flex items-start content-start'>\n-                        <span>{getTypeIcon(transaction.transaction_type)} </span>\n-                        <span className=\"ml-2\">{transaction.description}</span> \n-                      </span>\n-                    </Table.Cell>\n-                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}</Table.Cell>\n-                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{formatCurrency(transaction.amount)}</Table.Cell>\n-                    \n-                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n-                      <span className='flex items-center'>\n-                        {transaction.payment_type} \n-                      </span>\n-                    </Table.Cell>\n-                    <Table.Cell className={`items-center flex justify-center content-center py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n-                      <span className='flex items-center'>\n-                        {getStatusIcon(transaction.status)} \n-                      </span>\n-                    </Table.Cell>\n-                    <Table.Cell className='py-2 px-2 md:py-3 md:px-3 text-xs md:text-base'>\n-                      <Dropdown  className=\"relative z-50 cursor-pointer\" align=\"right\" label=\"\" renderTrigger={() => <span><FaEllipsisH  className=\"h-4 w-4\" /></span>}>\n-                        <Dropdown.Item><FaRegEdit className='mr-1'/><span>Edit</span></Dropdown.Item>\n-                        <Dropdown.Item><FaEye className='mr-1'/><span>View</span></Dropdown.Item>\n-                        <Dropdown.Item><FaRegTrashAlt className='mr-1' /><span>Delete</span></Dropdown.Item>\n-                      </Dropdown>\n-\n-                    </Table.Cell>\n-                </Table.Row>\n-\n-                ))}\n-              </Table.Body>\n-            </Table>\n-          </div>\n-          <nav className='py-6'>\n-          <ReactPaginate\n-                previousLabel={'Previous'}\n-                nextLabel={'Next'}\n-                breakLabel={'...'}\n-                pageCount={Math.ceil(filteredTransactions.length / ITEMS_PER_PAGE)}\n-                marginPagesDisplayed={2}\n-                pageRangeDisplayed={5}\n-                onPageChange={handlePageClick}\n-                containerClassName={'pagination flex justify-center -space-x-px text-sm'}\n-                pageClassName={'page-item'}\n-                pageLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                previousClassName={'page-item'}\n-                previousLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                nextClassName={'page-item'}\n-                nextLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                breakClassName={'page-item'}\n-                breakLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                activeClassName={'active'}\n-                activeLinkClassName={'bg-gray-300'}\n-            />\n-          </nav>\n-\n-        </section>\n-        \n-        <Modal\n-          show={showDeleteModal}\n-          size=\"md\"\n-          popup={true}\n-          onClose={() => setShowDeleteModal(false)}\n-        >\n-          <Modal.Header />\n-          <Modal.Body>\n-          <div className=\"text-center\">\n-            <HiOutlineExclamationCircle className=\"mx-auto mb-4 h-14 w-14 text-gray-400 dark:text-gray-200\" />\n-            <h3 className=\"mb-5 text-lg font-normal text-gray-500 dark:text-gray-400\">\n-            Apakah Anda yakin ingin menghapus transaksi ini?\n-            </h3>\n-            <div className=\"flex justify-center gap-4\">\n-              <Button color=\"failure\" onClick={() => setOpenModal(false)}>\n-                Hapus\n-              </Button>\n-              <Button color=\"gray\" onClick={() => setOpenModal(false)}>\n-                Batal\n-              </Button>\n-            </div>\n-          </div>\n-          </Modal.Body>\n-          \n-        </Modal>         \n-\n-      </div>\n-      \n-      \n-    </main>\n-    </>\n-  );\n-}\n-\n-export const getServerSideProps = async (context) => {\n-  const session = await getSession(context);\n-  \n-  if (!session) {\n-      return {\n-          redirect: {\n-              destination: '/',\n-              permanent: false,\n-          },\n-      };\n-  }\n-\n-  try {\n-      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n-          headers: {\n-              Authorization: `Bearer ${session.accessToken}`,\n-          },\n-      });\n-      return {\n-          props: {\n-            initialTransaction: res.data,\n-          },\n-      };\n-  } catch (error) {\n-      console.error('Error fetching houses data:', error);\n-      return {\n-          props: {\n-            initialTransaction: [],\n-          },\n-      };\n-  }\n-};\n-\n-export default Transaction;\n"
                },
                {
                    "date": 1722412814132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -281,9 +281,9 @@\n                     <Table.Cell className='py-2 px-2 md:py-3 md:px-3 text-xs md:text-base'>\n                       <Dropdown  className=\"relative z-50 cursor-pointer\" align=\"right\" label=\"\" renderTrigger={() => <span><FaEllipsisH  className=\"h-4 w-4\" /></span>}>\n                         <Dropdown.Item><FaRegEdit className='mr-1'/><span>Edit</span></Dropdown.Item>\n                         <Dropdown.Item><FaEye className='mr-1'/><span>View</span></Dropdown.Item>\n-                        <Dropdown.Item><FaRegTrashAlt className='mr-1' /><span>Delete</span></Dropdown.Item>\n+                        <Dropdown.Item><FaRegTrashAlt className='mr-1' onClick={() => handleDeleteTransaction(transaction.id)} /><span>Delete</span></Dropdown.Item>\n                       </Dropdown>\n \n                     </Table.Cell>\n                 </Table.Row>\n"
                },
                {
                    "date": 1722412843217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,8 @@\n import Header from '../../components/Header';\n import SideMenu from '../../components/dashboard/Sidebar';\n import TransactionDrawer from '../../components/dashboard/TransactionDrawer';\n import Spinner from '../../components/Spinner';\n-                house.monthly_fees[feeIndex].status = 'Belum Bayar';\n import { Card, Button,TextInput,Drawer,Select, Table,Dropdown, Alert,Modal } from \"flowbite-react\";\n import { HiOutlineSearch } from \"react-icons/hi\";\n import {  FaCheckCircle, FaTimesCircle, FaHourglassHalf,FaRegEdit,FaEye,FaRegTrashAlt } from 'react-icons/fa';\n import { FaRegArrowAltCircleDown } from \"react-icons/fa\";\n"
                },
                {
                    "date": 1722412922831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,9 @@\n import Header from '../../components/Header';\n import SideMenu from '../../components/dashboard/Sidebar';\n import TransactionDrawer from '../../components/dashboard/TransactionDrawer';\n import Spinner from '../../components/Spinner';\n+import { HiOutlineExclamationCircle } from \"react-icons/hi\";\n import { Card, Button,TextInput,Drawer,Select, Table,Dropdown, Alert,Modal } from \"flowbite-react\";\n import { HiOutlineSearch } from \"react-icons/hi\";\n import {  FaCheckCircle, FaTimesCircle, FaHourglassHalf,FaRegEdit,FaEye,FaRegTrashAlt } from 'react-icons/fa';\n import { FaRegArrowAltCircleDown } from \"react-icons/fa\";\n"
                },
                {
                    "date": 1722413044530,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,416 @@\n+// pages/home.js\n+import { getSession, useSession } from 'next-auth/react';\n+import { useEffect,useState } from 'react';\n+import axios from 'axios';\n+import { useRequireAuth } from '../../utils/authUtils'; \n+import ReactPaginate from 'react-paginate';\n+\n+import Header from '../../components/Header';\n+import SideMenu from '../../components/dashboard/Sidebar';\n+import TransactionDrawer from '../../components/dashboard/TransactionDrawer';\n+import Spinner from '../../components/Spinner';\n+import { HiOutlineExclamationCircle } from \"react-icons/hi\";\n+import { Card, Button,TextInput,Drawer,Select, Table,Dropdown, Alert,Modal } from \"flowbite-react\";\n+import { HiOutlineSearch } from \"react-icons/hi\";\n+import {  FaCheckCircle, FaTimesCircle, FaHourglassHalf,FaRegEdit,FaEye,FaRegTrashAlt } from 'react-icons/fa';\n+import { FaRegArrowAltCircleDown } from \"react-icons/fa\";\n+import { FaRegArrowAltCircleUp } from \"react-icons/fa\";\n+import { FaEllipsisH } from \"react-icons/fa\";\n+import { FaExchangeAlt } from \"react-icons/fa\";\n+import FilterTransactions from '../../components/FilterTransactions';\n+import moment from 'moment';\n+import 'moment/locale/id';\n+moment.locale('id');\n+\n+const ITEMS_PER_PAGE = 15;\n+\n+\n+const Transaction = ({ initialTransaction }) =>  {\n+  const { useAuthRedirect } = useRequireAuth(['admin', 'editor', 'superadmin']);\n+  useAuthRedirect();\n+  const [transactions, setTransactions] = useState([initialTransaction]);\n+  const [reTransactions, setReTransactions] = useState([initialTransaction])\n+  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n+  const [loading, setLoading] = useState(true);\n+  const { data: session, status } = useSession();\n+  const [searchTerm, setSearchTerm] = useState('');\n+  const [currentPage, setCurrentPage] = useState(0);\n+\n+  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n+  const [currentTransactionType, setCurrentTransactionType] = useState('');\n+\n+  const [showAlert, setShowAlert] = useState(false);\n+  const [alertMessage, setAlertMessage] = useState('');\n+  const [alertType, setAlertType] = useState('success');\n+  \n+  const [showDeleteModal, setShowDeleteModal] = useState(false);\n+  const [transactionIdToDelete, setTransactionIdToDelete] = useState(null);\n+\n+  const handleDeleteTransaction = async (transactionId) => {\n+    setTransactionIdToDelete(transactionId);\n+    setShowDeleteModal(true);\n+  };\n+  \n+  const handleConfirmDelete = async () => {\n+    try {\n+      const response = await axios.delete(\n+        `${process.env.NEXT_PUBLIC_API_URL}/transactions/${transactionIdToDelete}`,\n+        {\n+          headers: {\n+            Authorization: `Bearer ${session.accessToken}`,\n+          },\n+        }\n+      );\n+      setAlertType('success');\n+      setAlertMessage('Transaksi berhasil dihapus');\n+      setShowAlert(true);\n+      fetchTransactions();\n+    } catch (error) {\n+      setAlertType('failure');\n+      setAlertMessage('Gagal menghapus transaksi');\n+      setShowAlert(true);\n+      console.error('Error deleting transaction:', error);\n+    } finally {\n+      setShowDeleteModal(false);\n+    }\n+  };\n+\n+  const toggleSidebar = () => {\n+    setIsSidebarOpen(!isSidebarOpen);\n+  };\n+\n+  const formatCurrency = (amount) => {\n+    return new Intl.NumberFormat('id-ID', {\n+        style: 'currency',\n+        currency: 'IDR',\n+        minimumFractionDigits: 0,\n+    }).format(amount);\n+  };\n+\n+  const fetchTransactions = async () => {\n+    try {\n+        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n+            headers: {\n+              Authorization: `Bearer ${session.accessToken}`,\n+            },\n+        });\n+        setTransactions(res.data.data);\n+        setReTransactions(res.data.data);\n+        setLoading(false);\n+    } catch (error) {\n+        console.error('Error fetching houses data:', error);\n+        setLoading(false);\n+    }\n+ };\n+\n+  useEffect(() => {\n+    if (session) {\n+        fetchTransactions();\n+    }\n+\n+  }, [session, status]);\n+\n+  const handleSearchChange = (event) => {\n+    setSearchTerm(event.target.value);\n+  };\n+\n+  const filteredTransactions = transactions.filter(transaction => \n+    (transaction.description && transaction.description.toLowerCase().includes(searchTerm.toLowerCase()))\n+  );\n+\n+  const offset = currentPage * ITEMS_PER_PAGE;\n+  const currentPageData = filteredTransactions.slice(offset, offset + ITEMS_PER_PAGE);\n+\n+  const handlePageClick = (data) => {\n+    setCurrentPage(data.selected);\n+  };\n+\n+\n+  const getStatusIcon = (status) => {\n+    switch (status) {\n+      case 'berhasil':\n+        return <FaCheckCircle className=\"text-green-500\" />;\n+      case 'gagal':\n+        return <FaTimesCircle className=\"text-red-500\" />;\n+      case 'sedang dicek':\n+        return <FaHourglassHalf className=\"text-yellow-500\" />;\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const getTypeIcon = (type) => {\n+    switch (type) {\n+      case 'income':\n+        return <FaRegArrowAltCircleDown  className=\"text-blue-700 h-4 w-4 md:h-5 md:w-5 \" />;\n+      case 'expense':\n+        return <FaRegArrowAltCircleUp  className=\"text-red-700 h-4 w-4 md:h-5 md:w-5 \" />;\n+      case 'ipl':\n+        return <FaExchangeAlt  className=\"text-green-700  h-3 w-3 md:h-4 md:w-4 \" />;\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const getTextColor = (type) => {\n+    switch (type) {\n+      case 'income':\n+        return \"text-blue-700\";\n+      case 'expense':\n+        return \"text-red-700\";\n+      case 'ipl':\n+        return \"text-green-700\";\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const handlePaymentClick = () => {\n+    setCurrentTransactionType('ipl');\n+    setIsDrawerOpen(true);\n+  };\n+\n+  const handleIncomeClick = () => {\n+    setCurrentTransactionType('income');\n+    setIsDrawerOpen(true);\n+  };\n+\n+  const handleExpenseClick = () => {\n+    setCurrentTransactionType('expense');\n+    setIsDrawerOpen(true);\n+  };\n+\n+  const handleDrawerSubmit = async (transactionData) => {\n+    try {\n+      const response = await axios.post(\n+        `${process.env.NEXT_PUBLIC_API_URL}/transactions/create`, \n+        transactionData, // Hanya data yang dikirim dalam body\n+        {\n+          headers: {\n+            Authorization: `Bearer ${session.accessToken}`, // Tempatkan headers di opsi konfigurasi\n+            'Content-Type': 'application/json',\n+          },\n+        }\n+      );\n+      setAlertType('success');\n+      setAlertMessage('Transaksi berhasil ditambahkan');\n+      setShowAlert(true);\n+     // alert('Transaksi berhasil ditambahkan');\n+      // Refresh data atau navigasi sesuai kebutuhan\n+      fetchTransactions();\n+    } catch (error) {\n+      setAlertType('failure');\n+      setAlertMessage('Gagal menambahkan transaksi');\n+      setShowAlert(true);\n+      console.error('Error creating transaction:', error);\n+    }\n+  };\n+  \n+  const handleAlertDismiss = () => {\n+    setShowAlert(false);\n+  };\n+\n+  if (loading) {\n+    return <Spinner />;\n+  }\n+\n+ // console.log(transactions)\n+\n+  return (\n+    <>\n+   \n+    <Header toggleSidebar={toggleSidebar}/>\n+    <main className='max-w-screen-xl mx-auto'>\n+      <div className='w-full'>\n+        <SideMenu isOpen={isSidebarOpen}/>\n+        <section className='mt-14 px-5 py-5 md:px-8 sm:ml-64'>\n+        {showAlert && (\n+            <Alert className='' color={alertType === 'success' ? 'success' : 'failure'} onDismiss={handleAlertDismiss}>\n+                <span className=\"font-medium\">{alertMessage}</span>\n+            </Alert>\n+        )}\n+          <h1 className='text-xl mb-4 font-semibold text-gray-900 sm:text-2xl dark:text-white'>Data Transaksi</h1>\n+\n+          <Card className='w-full mb-10'>\n+            <h3 className='font-semibold mb-3'>Buat Transaksi Baru</h3>\n+              <div className='flex flex-wrap gap-2'>\n+              <Button size=\"sm\" color=\"success\" onClick={handlePaymentClick}>\n+                <FaExchangeAlt  className=\"mr-2 h-5 w-5\" />\n+                IPL\n+              </Button>\n+\n+              <Button size=\"sm\" color=\"blue\" onClick={handleIncomeClick}>\n+                <FaRegArrowAltCircleDown  className=\"mr-2 h-5 w-5\" />\n+                Masuk\n+              </Button>\n+              <Button size=\"sm\" color=\"failure\" onClick={handleExpenseClick}>\n+                Keluar\n+                <FaRegArrowAltCircleUp  className=\"ml-2 h-5 w-5\" />\n+              </Button>\n+              </div>\n+          </Card>\n+\n+          <TransactionDrawer\n+            isOpen={isDrawerOpen}\n+            onClose={() => setIsDrawerOpen(false)}\n+            onSubmit={handleDrawerSubmit}\n+            transactionType={currentTransactionType}\n+          />\n+\n+          <div className=\"max-w-md mb-4 flex\">\n+\n+            <TextInput \n+              name=\"name\"\n+              placeholder=\"Cari\"\n+              value={searchTerm}\n+              onChange={handleSearchChange}\n+              className=\"mr-2 w-3/5\"\n+              icon={HiOutlineSearch} \n+            />\n+\n+            <FilterTransactions className=\"w-2/5\" setTransactions={setTransactions} initialTransaction={reTransactions} />\n+\n+          </div>\n+\n+          <div className='overflow-x-auto'>\n+            <Table hoverable>\n+              <Table.Head>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 w-3/4'>Keterangan</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tanggal</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Nominal</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tipe</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Status</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>\n+                    <span className=\"sr-only\">Edit</span>\n+                </Table.HeadCell>\n+              </Table.Head>\n+              <Table.Body className=\"divide-y\">\n+                \n+                {currentPageData.map((transaction, index) => ( \n+                  <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n+                    <Table.Cell className={`py-2 px-2 md:py-3 md:px-3 ${getTextColor(transaction.transaction_type)}`}>\n+                      <span className='flex items-start content-start'>\n+                        <span>{getTypeIcon(transaction.transaction_type)} </span>\n+                        <span className=\"ml-2\">{transaction.description}</span> \n+                      </span>\n+                    </Table.Cell>\n+                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}</Table.Cell>\n+                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{formatCurrency(transaction.amount)}</Table.Cell>\n+                    \n+                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n+                      <span className='flex items-center'>\n+                        {transaction.payment_type} \n+                      </span>\n+                    </Table.Cell>\n+                    <Table.Cell className={`items-center flex justify-center content-center py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n+                      <span className='flex items-center'>\n+                        {getStatusIcon(transaction.status)} \n+                      </span>\n+                    </Table.Cell>\n+                    <Table.Cell className='py-2 px-2 md:py-3 md:px-3 text-xs md:text-base'>\n+                      <Dropdown  className=\"relative z-50 cursor-pointer\" align=\"right\" label=\"\" renderTrigger={() => <span><FaEllipsisH  className=\"h-4 w-4\" /></span>}>\n+                        <Dropdown.Item><FaRegEdit className='mr-1'/><span>Edit</span></Dropdown.Item>\n+                        <Dropdown.Item><FaEye className='mr-1'/><span>View</span></Dropdown.Item>\n+                        <Dropdown.Item><FaRegTrashAlt className='mr-1' onClick={() => handleDeleteTransaction(transaction.id)} /><span>Delete</span></Dropdown.Item>\n+                      </Dropdown>\n+\n+                    </Table.Cell>\n+                </Table.Row>\n+\n+                ))}\n+              </Table.Body>\n+            </Table>\n+          </div>\n+          <nav className='py-6'>\n+          <ReactPaginate\n+                previousLabel={'Previous'}\n+                nextLabel={'Next'}\n+                breakLabel={'...'}\n+                pageCount={Math.ceil(filteredTransactions.length / ITEMS_PER_PAGE)}\n+                marginPagesDisplayed={2}\n+                pageRangeDisplayed={5}\n+                onPageChange={handlePageClick}\n+                containerClassName={'pagination flex justify-center -space-x-px text-sm'}\n+                pageClassName={'page-item'}\n+                pageLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                previousClassName={'page-item'}\n+                previousLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                nextClassName={'page-item'}\n+                nextLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                breakClassName={'page-item'}\n+                breakLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                activeClassName={'active'}\n+                activeLinkClassName={'bg-gray-300'}\n+            />\n+          </nav>\n+\n+        </section>\n+        \n+        <Modal\n+          show={showDeleteModal}\n+          size=\"md\"\n+          popup={true}\n+          onClose={() => setShowDeleteModal(false)}\n+        >\n+          <Modal.Header />\n+          <Modal.Body>\n+          <div className=\"text-center\">\n+            <HiOutlineExclamationCircle className=\"mx-auto mb-4 h-14 w-14 text-gray-400 dark:text-gray-200\" />\n+            <h3 className=\"mb-5 text-lg font-normal text-gray-500 dark:text-gray-400\">\n+            Apakah Anda yakin ingin menghapus transaksi ini?\n+            </h3>\n+            <div className=\"flex justify-center gap-4\">\n+              <Button color=\"failure\" onClick={handleConfirmDelete}>\n+                Hapus\n+              </Button>\n+              <Button color=\"gray\" onClick={() => setShowDeleteModal(false)}>\n+                Batal\n+              </Button>\n+            </div>\n+          </div>\n+          </Modal.Body>\n+          \n+        </Modal>         \n+\n+      </div>\n+      \n+      \n+    </main>\n+    </>\n+  );\n+}\n+\n+export const getServerSideProps = async (context) => {\n+  const session = await getSession(context);\n+  \n+  if (!session) {\n+      return {\n+          redirect: {\n+              destination: '/',\n+              permanent: false,\n+          },\n+      };\n+  }\n+\n+  try {\n+      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n+          headers: {\n+              Authorization: `Bearer ${session.accessToken}`,\n+          },\n+      });\n+      return {\n+          props: {\n+            initialTransaction: res.data,\n+          },\n+      };\n+  } catch (error) {\n+      console.error('Error fetching houses data:', error);\n+      return {\n+          props: {\n+            initialTransaction: [],\n+          },\n+      };\n+  }\n+};\n+\n+export default Transaction;\n"
                },
                {
                    "date": 1722413054022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,13 +49,13 @@\n   const handleDeleteTransaction = async (transactionId) => {\n     setTransactionIdToDelete(transactionId);\n     setShowDeleteModal(true);\n   };\n-  \n+\n   const handleConfirmDelete = async () => {\n     try {\n       const response = await axios.delete(\n-        `${process.env.NEXT_PUBLIC_API_URL}/transactions/${transactionIdToDelete}`,\n+        `${process.env.NEXT_PUBLIC_API_URL}/transactions/delete/${transactionIdToDelete}`,\n         {\n           headers: {\n             Authorization: `Bearer ${session.accessToken}`,\n           },\n"
                },
                {
                    "date": 1722413119148,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -348,9 +348,9 @@\n         \n         <Modal\n           show={showDeleteModal}\n           size=\"md\"\n-          popup={true}\n+          popup\n           onClose={() => setShowDeleteModal(false)}\n         >\n           <Modal.Header />\n           <Modal.Body>\n@@ -413,391 +413,4 @@\n   }\n };\n \n export default Transaction;\n-// pages/home.js\n-import { getSession, useSession } from 'next-auth/react';\n-import { useEffect,useState } from 'react';\n-import axios from 'axios';\n-import { useRequireAuth } from '../../utils/authUtils'; \n-import ReactPaginate from 'react-paginate';\n-\n-import Header from '../../components/Header';\n-import SideMenu from '../../components/dashboard/Sidebar';\n-import TransactionDrawer from '../../components/dashboard/TransactionDrawer';\n-import Spinner from '../../components/Spinner';\n-import { HiOutlineExclamationCircle } from \"react-icons/hi\";\n-import { Card, Button,TextInput,Drawer,Select, Table,Dropdown, Alert,Modal } from \"flowbite-react\";\n-import { HiOutlineSearch } from \"react-icons/hi\";\n-import {  FaCheckCircle, FaTimesCircle, FaHourglassHalf,FaRegEdit,FaEye,FaRegTrashAlt } from 'react-icons/fa';\n-import { FaRegArrowAltCircleDown } from \"react-icons/fa\";\n-import { FaRegArrowAltCircleUp } from \"react-icons/fa\";\n-import { FaEllipsisH } from \"react-icons/fa\";\n-import { FaExchangeAlt } from \"react-icons/fa\";\n-import FilterTransactions from '../../components/FilterTransactions';\n-import moment from 'moment';\n-import 'moment/locale/id';\n-moment.locale('id');\n-\n-const ITEMS_PER_PAGE = 15;\n-\n-\n-const Transaction = ({ initialTransaction }) =>  {\n-  const { useAuthRedirect } = useRequireAuth(['admin', 'editor', 'superadmin']);\n-  useAuthRedirect();\n-  const [transactions, setTransactions] = useState([initialTransaction]);\n-  const [reTransactions, setReTransactions] = useState([initialTransaction])\n-  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n-  const [loading, setLoading] = useState(true);\n-  const { data: session, status } = useSession();\n-  const [searchTerm, setSearchTerm] = useState('');\n-  const [currentPage, setCurrentPage] = useState(0);\n-\n-  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n-  const [currentTransactionType, setCurrentTransactionType] = useState('');\n-\n-  const [showAlert, setShowAlert] = useState(false);\n-  const [alertMessage, setAlertMessage] = useState('');\n-  const [alertType, setAlertType] = useState('success');\n-  \n-  const [showDeleteModal, setShowDeleteModal] = useState(false);\n-  const [transactionIdToDelete, setTransactionIdToDelete] = useState(null);\n-\n-  const toggleSidebar = () => {\n-    setIsSidebarOpen(!isSidebarOpen);\n-  };\n-\n-  const formatCurrency = (amount) => {\n-    return new Intl.NumberFormat('id-ID', {\n-        style: 'currency',\n-        currency: 'IDR',\n-        minimumFractionDigits: 0,\n-    }).format(amount);\n-  };\n-\n-  const fetchTransactions = async () => {\n-    try {\n-        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n-            headers: {\n-              Authorization: `Bearer ${session.accessToken}`,\n-            },\n-        });\n-        setTransactions(res.data.data);\n-        setReTransactions(res.data.data);\n-        setLoading(false);\n-    } catch (error) {\n-        console.error('Error fetching houses data:', error);\n-        setLoading(false);\n-    }\n- };\n-\n-  useEffect(() => {\n-    if (session) {\n-        fetchTransactions();\n-    }\n-\n-  }, [session, status]);\n-\n-  const handleSearchChange = (event) => {\n-    setSearchTerm(event.target.value);\n-  };\n-\n-  const filteredTransactions = transactions.filter(transaction => \n-    (transaction.description && transaction.description.toLowerCase().includes(searchTerm.toLowerCase()))\n-  );\n-\n-  const offset = currentPage * ITEMS_PER_PAGE;\n-  const currentPageData = filteredTransactions.slice(offset, offset + ITEMS_PER_PAGE);\n-\n-  const handlePageClick = (data) => {\n-    setCurrentPage(data.selected);\n-  };\n-\n-\n-  const getStatusIcon = (status) => {\n-    switch (status) {\n-      case 'berhasil':\n-        return <FaCheckCircle className=\"text-green-500\" />;\n-      case 'gagal':\n-        return <FaTimesCircle className=\"text-red-500\" />;\n-      case 'sedang dicek':\n-        return <FaHourglassHalf className=\"text-yellow-500\" />;\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const getTypeIcon = (type) => {\n-    switch (type) {\n-      case 'income':\n-        return <FaRegArrowAltCircleDown  className=\"text-blue-700 h-4 w-4 md:h-5 md:w-5 \" />;\n-      case 'expense':\n-        return <FaRegArrowAltCircleUp  className=\"text-red-700 h-4 w-4 md:h-5 md:w-5 \" />;\n-      case 'ipl':\n-        return <FaExchangeAlt  className=\"text-green-700  h-3 w-3 md:h-4 md:w-4 \" />;\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const getTextColor = (type) => {\n-    switch (type) {\n-      case 'income':\n-        return \"text-blue-700\";\n-      case 'expense':\n-        return \"text-red-700\";\n-      case 'ipl':\n-        return \"text-green-700\";\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const handlePaymentClick = () => {\n-    setCurrentTransactionType('ipl');\n-    setIsDrawerOpen(true);\n-  };\n-\n-  const handleIncomeClick = () => {\n-    setCurrentTransactionType('income');\n-    setIsDrawerOpen(true);\n-  };\n-\n-  const handleExpenseClick = () => {\n-    setCurrentTransactionType('expense');\n-    setIsDrawerOpen(true);\n-  };\n-\n-  const handleDrawerSubmit = async (transactionData) => {\n-    try {\n-      const response = await axios.post(\n-        `${process.env.NEXT_PUBLIC_API_URL}/transactions/create`, \n-        transactionData, // Hanya data yang dikirim dalam body\n-        {\n-          headers: {\n-            Authorization: `Bearer ${session.accessToken}`, // Tempatkan headers di opsi konfigurasi\n-            'Content-Type': 'application/json',\n-          },\n-        }\n-      );\n-      setAlertType('success');\n-      setAlertMessage('Transaksi berhasil ditambahkan');\n-      setShowAlert(true);\n-     // alert('Transaksi berhasil ditambahkan');\n-      // Refresh data atau navigasi sesuai kebutuhan\n-      fetchTransactions();\n-    } catch (error) {\n-      setAlertType('failure');\n-      setAlertMessage('Gagal menambahkan transaksi');\n-      setShowAlert(true);\n-      console.error('Error creating transaction:', error);\n-    }\n-  };\n-  \n-  const handleAlertDismiss = () => {\n-    setShowAlert(false);\n-  };\n-\n-  if (loading) {\n-    return <Spinner />;\n-  }\n-\n- // console.log(transactions)\n-\n-  return (\n-    <>\n-   \n-    <Header toggleSidebar={toggleSidebar}/>\n-    <main className='max-w-screen-xl mx-auto'>\n-      <div className='w-full'>\n-        <SideMenu isOpen={isSidebarOpen}/>\n-        <section className='mt-14 px-5 py-5 md:px-8 sm:ml-64'>\n-        {showAlert && (\n-            <Alert className='' color={alertType === 'success' ? 'success' : 'failure'} onDismiss={handleAlertDismiss}>\n-                <span className=\"font-medium\">{alertMessage}</span>\n-            </Alert>\n-        )}\n-          <h1 className='text-xl mb-4 font-semibold text-gray-900 sm:text-2xl dark:text-white'>Data Transaksi</h1>\n-\n-          <Card className='w-full mb-10'>\n-            <h3 className='font-semibold mb-3'>Buat Transaksi Baru</h3>\n-              <div className='flex flex-wrap gap-2'>\n-              <Button size=\"sm\" color=\"success\" onClick={handlePaymentClick}>\n-                <FaExchangeAlt  className=\"mr-2 h-5 w-5\" />\n-                IPL\n-              </Button>\n-\n-              <Button size=\"sm\" color=\"blue\" onClick={handleIncomeClick}>\n-                <FaRegArrowAltCircleDown  className=\"mr-2 h-5 w-5\" />\n-                Masuk\n-              </Button>\n-              <Button size=\"sm\" color=\"failure\" onClick={handleExpenseClick}>\n-                Keluar\n-                <FaRegArrowAltCircleUp  className=\"ml-2 h-5 w-5\" />\n-              </Button>\n-              </div>\n-          </Card>\n-\n-          <TransactionDrawer\n-            isOpen={isDrawerOpen}\n-            onClose={() => setIsDrawerOpen(false)}\n-            onSubmit={handleDrawerSubmit}\n-            transactionType={currentTransactionType}\n-          />\n-\n-          <div className=\"max-w-md mb-4 flex\">\n-\n-            <TextInput \n-              name=\"name\"\n-              placeholder=\"Cari\"\n-              value={searchTerm}\n-              onChange={handleSearchChange}\n-              className=\"mr-2 w-3/5\"\n-              icon={HiOutlineSearch} \n-            />\n-\n-            <FilterTransactions className=\"w-2/5\" setTransactions={setTransactions} initialTransaction={reTransactions} />\n-\n-          </div>\n-\n-          <div className='overflow-x-auto'>\n-            <Table hoverable>\n-              <Table.Head>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 w-3/4'>Keterangan</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tanggal</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Nominal</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tipe</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Status</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>\n-                    <span className=\"sr-only\">Edit</span>\n-                </Table.HeadCell>\n-              </Table.Head>\n-              <Table.Body className=\"divide-y\">\n-                \n-                {currentPageData.map((transaction, index) => ( \n-                  <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-                    <Table.Cell className={`py-2 px-2 md:py-3 md:px-3 ${getTextColor(transaction.transaction_type)}`}>\n-                      <span className='flex items-start content-start'>\n-                        <span>{getTypeIcon(transaction.transaction_type)} </span>\n-                        <span className=\"ml-2\">{transaction.description}</span> \n-                      </span>\n-                    </Table.Cell>\n-                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}</Table.Cell>\n-                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{formatCurrency(transaction.amount)}</Table.Cell>\n-                    \n-                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n-                      <span className='flex items-center'>\n-                        {transaction.payment_type} \n-                      </span>\n-                    </Table.Cell>\n-                    <Table.Cell className={`items-center flex justify-center content-center py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n-                      <span className='flex items-center'>\n-                        {getStatusIcon(transaction.status)} \n-                      </span>\n-                    </Table.Cell>\n-                    <Table.Cell className='py-2 px-2 md:py-3 md:px-3 text-xs md:text-base'>\n-                      <Dropdown  className=\"relative z-50 cursor-pointer\" align=\"right\" label=\"\" renderTrigger={() => <span><FaEllipsisH  className=\"h-4 w-4\" /></span>}>\n-                        <Dropdown.Item><FaRegEdit className='mr-1'/><span>Edit</span></Dropdown.Item>\n-                        <Dropdown.Item><FaEye className='mr-1'/><span>View</span></Dropdown.Item>\n-                        <Dropdown.Item><FaRegTrashAlt className='mr-1' onClick={() => handleDeleteTransaction(transaction.id)} /><span>Delete</span></Dropdown.Item>\n-                      </Dropdown>\n-\n-                    </Table.Cell>\n-                </Table.Row>\n-\n-                ))}\n-              </Table.Body>\n-            </Table>\n-          </div>\n-          <nav className='py-6'>\n-          <ReactPaginate\n-                previousLabel={'Previous'}\n-                nextLabel={'Next'}\n-                breakLabel={'...'}\n-                pageCount={Math.ceil(filteredTransactions.length / ITEMS_PER_PAGE)}\n-                marginPagesDisplayed={2}\n-                pageRangeDisplayed={5}\n-                onPageChange={handlePageClick}\n-                containerClassName={'pagination flex justify-center -space-x-px text-sm'}\n-                pageClassName={'page-item'}\n-                pageLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                previousClassName={'page-item'}\n-                previousLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                nextClassName={'page-item'}\n-                nextLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                breakClassName={'page-item'}\n-                breakLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                activeClassName={'active'}\n-                activeLinkClassName={'bg-gray-300'}\n-            />\n-          </nav>\n-\n-        </section>\n-        \n-        <Modal\n-          show={showDeleteModal}\n-          size=\"md\"\n-          popup={true}\n-          onClose={() => setShowDeleteModal(false)}\n-        >\n-          <Modal.Header />\n-          <Modal.Body>\n-          <div className=\"text-center\">\n-            <HiOutlineExclamationCircle className=\"mx-auto mb-4 h-14 w-14 text-gray-400 dark:text-gray-200\" />\n-            <h3 className=\"mb-5 text-lg font-normal text-gray-500 dark:text-gray-400\">\n-            Apakah Anda yakin ingin menghapus transaksi ini?\n-            </h3>\n-            <div className=\"flex justify-center gap-4\">\n-              <Button color=\"failure\" onClick={handleConfirmDelete}>\n-                Hapus\n-              </Button>\n-              <Button color=\"gray\" onClick={() => setShowDeleteModal(false)}>\n-                Batal\n-              </Button>\n-            </div>\n-          </div>\n-          </Modal.Body>\n-          \n-        </Modal>         \n-\n-      </div>\n-      \n-      \n-    </main>\n-    </>\n-  );\n-}\n-\n-export const getServerSideProps = async (context) => {\n-  const session = await getSession(context);\n-  \n-  if (!session) {\n-      return {\n-          redirect: {\n-              destination: '/',\n-              permanent: false,\n-          },\n-      };\n-  }\n-\n-  try {\n-      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n-          headers: {\n-              Authorization: `Bearer ${session.accessToken}`,\n-          },\n-      });\n-      return {\n-          props: {\n-            initialTransaction: res.data,\n-          },\n-      };\n-  } catch (error) {\n-      console.error('Error fetching houses data:', error);\n-      return {\n-          props: {\n-            initialTransaction: [],\n-          },\n-      };\n-  }\n-};\n-\n-export default Transaction;\n"
                },
                {
                    "date": 1722413163667,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -307,9 +307,9 @@\n                         {getStatusIcon(transaction.status)} \n                       </span>\n                     </Table.Cell>\n                     <Table.Cell className='py-2 px-2 md:py-3 md:px-3 text-xs md:text-base'>\n-                      <Dropdown  className=\"relative z-50 cursor-pointer\" align=\"right\" label=\"\" renderTrigger={() => <span><FaEllipsisH  className=\"h-4 w-4\" /></span>}>\n+                      <Dropdown  className=\"relative z-50 cursor-pointer\" align=\"right\" label=\"\" renderTrigger={() => <span><FaEllipsisH  className=\"h-4 w-4 cursor-pointer\" /></span>}>\n                         <Dropdown.Item><FaRegEdit className='mr-1'/><span>Edit</span></Dropdown.Item>\n                         <Dropdown.Item><FaEye className='mr-1'/><span>View</span></Dropdown.Item>\n                         <Dropdown.Item><FaRegTrashAlt className='mr-1' onClick={() => handleDeleteTransaction(transaction.id)} /><span>Delete</span></Dropdown.Item>\n                       </Dropdown>\n"
                },
                {
                    "date": 1722413219172,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,8 +46,9 @@\n   const [showDeleteModal, setShowDeleteModal] = useState(false);\n   const [transactionIdToDelete, setTransactionIdToDelete] = useState(null);\n \n   const handleDeleteTransaction = async (transactionId) => {\n+    console.log('asd')\n     setTransactionIdToDelete(transactionId);\n     setShowDeleteModal(true);\n   };\n \n"
                },
                {
                    "date": 1722413258879,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,417 @@\n+// pages/home.js\n+import { getSession, useSession } from 'next-auth/react';\n+import { useEffect,useState } from 'react';\n+import axios from 'axios';\n+import { useRequireAuth } from '../../utils/authUtils'; \n+import ReactPaginate from 'react-paginate';\n+\n+import Header from '../../components/Header';\n+import SideMenu from '../../components/dashboard/Sidebar';\n+import TransactionDrawer from '../../components/dashboard/TransactionDrawer';\n+import Spinner from '../../components/Spinner';\n+import { HiOutlineExclamationCircle } from \"react-icons/hi\";\n+import { Card, Button,TextInput,Drawer,Select, Table,Dropdown, Alert,Modal } from \"flowbite-react\";\n+import { HiOutlineSearch } from \"react-icons/hi\";\n+import {  FaCheckCircle, FaTimesCircle, FaHourglassHalf,FaRegEdit,FaEye,FaRegTrashAlt } from 'react-icons/fa';\n+import { FaRegArrowAltCircleDown } from \"react-icons/fa\";\n+import { FaRegArrowAltCircleUp } from \"react-icons/fa\";\n+import { FaEllipsisH } from \"react-icons/fa\";\n+import { FaExchangeAlt } from \"react-icons/fa\";\n+import FilterTransactions from '../../components/FilterTransactions';\n+import moment from 'moment';\n+import 'moment/locale/id';\n+moment.locale('id');\n+\n+const ITEMS_PER_PAGE = 15;\n+\n+\n+const Transaction = ({ initialTransaction }) =>  {\n+  const { useAuthRedirect } = useRequireAuth(['admin', 'editor', 'superadmin']);\n+  useAuthRedirect();\n+  const [transactions, setTransactions] = useState([initialTransaction]);\n+  const [reTransactions, setReTransactions] = useState([initialTransaction])\n+  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n+  const [loading, setLoading] = useState(true);\n+  const { data: session, status } = useSession();\n+  const [searchTerm, setSearchTerm] = useState('');\n+  const [currentPage, setCurrentPage] = useState(0);\n+\n+  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n+  const [currentTransactionType, setCurrentTransactionType] = useState('');\n+\n+  const [showAlert, setShowAlert] = useState(false);\n+  const [alertMessage, setAlertMessage] = useState('');\n+  const [alertType, setAlertType] = useState('success');\n+  \n+  const [showDeleteModal, setShowDeleteModal] = useState(false);\n+  const [transactionIdToDelete, setTransactionIdToDelete] = useState(null);\n+\n+  const handleDeleteTransaction = async (transactionId) => {\n+    console.log('asd')\n+    setTransactionIdToDelete(transactionId);\n+    setShowDeleteModal(true);\n+  };\n+\n+  const handleConfirmDelete = async () => {\n+    try {\n+      const response = await axios.delete(\n+        `${process.env.NEXT_PUBLIC_API_URL}/transactions/delete/${transactionIdToDelete}`,\n+        {\n+          headers: {\n+            Authorization: `Bearer ${session.accessToken}`,\n+          },\n+        }\n+      );\n+      setAlertType('success');\n+      setAlertMessage('Transaksi berhasil dihapus');\n+      setShowAlert(true);\n+      fetchTransactions();\n+    } catch (error) {\n+      setAlertType('failure');\n+      setAlertMessage('Gagal menghapus transaksi');\n+      setShowAlert(true);\n+      console.error('Error deleting transaction:', error);\n+    } finally {\n+      setShowDeleteModal(false);\n+    }\n+  };\n+\n+  const toggleSidebar = () => {\n+    setIsSidebarOpen(!isSidebarOpen);\n+  };\n+\n+  const formatCurrency = (amount) => {\n+    return new Intl.NumberFormat('id-ID', {\n+        style: 'currency',\n+        currency: 'IDR',\n+        minimumFractionDigits: 0,\n+    }).format(amount);\n+  };\n+\n+  const fetchTransactions = async () => {\n+    try {\n+        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n+            headers: {\n+              Authorization: `Bearer ${session.accessToken}`,\n+            },\n+        });\n+        setTransactions(res.data.data);\n+        setReTransactions(res.data.data);\n+        setLoading(false);\n+    } catch (error) {\n+        console.error('Error fetching houses data:', error);\n+        setLoading(false);\n+    }\n+ };\n+\n+  useEffect(() => {\n+    if (session) {\n+        fetchTransactions();\n+    }\n+\n+  }, [session, status]);\n+\n+  const handleSearchChange = (event) => {\n+    setSearchTerm(event.target.value);\n+  };\n+\n+  const filteredTransactions = transactions.filter(transaction => \n+    (transaction.description && transaction.description.toLowerCase().includes(searchTerm.toLowerCase()))\n+  );\n+\n+  const offset = currentPage * ITEMS_PER_PAGE;\n+  const currentPageData = filteredTransactions.slice(offset, offset + ITEMS_PER_PAGE);\n+\n+  const handlePageClick = (data) => {\n+    setCurrentPage(data.selected);\n+  };\n+\n+\n+  const getStatusIcon = (status) => {\n+    switch (status) {\n+      case 'berhasil':\n+        return <FaCheckCircle className=\"text-green-500\" />;\n+      case 'gagal':\n+        return <FaTimesCircle className=\"text-red-500\" />;\n+      case 'sedang dicek':\n+        return <FaHourglassHalf className=\"text-yellow-500\" />;\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const getTypeIcon = (type) => {\n+    switch (type) {\n+      case 'income':\n+        return <FaRegArrowAltCircleDown  className=\"text-blue-700 h-4 w-4 md:h-5 md:w-5 \" />;\n+      case 'expense':\n+        return <FaRegArrowAltCircleUp  className=\"text-red-700 h-4 w-4 md:h-5 md:w-5 \" />;\n+      case 'ipl':\n+        return <FaExchangeAlt  className=\"text-green-700  h-3 w-3 md:h-4 md:w-4 \" />;\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const getTextColor = (type) => {\n+    switch (type) {\n+      case 'income':\n+        return \"text-blue-700\";\n+      case 'expense':\n+        return \"text-red-700\";\n+      case 'ipl':\n+        return \"text-green-700\";\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const handlePaymentClick = () => {\n+    setCurrentTransactionType('ipl');\n+    setIsDrawerOpen(true);\n+  };\n+\n+  const handleIncomeClick = () => {\n+    setCurrentTransactionType('income');\n+    setIsDrawerOpen(true);\n+  };\n+\n+  const handleExpenseClick = () => {\n+    setCurrentTransactionType('expense');\n+    setIsDrawerOpen(true);\n+  };\n+\n+  const handleDrawerSubmit = async (transactionData) => {\n+    try {\n+      const response = await axios.post(\n+        `${process.env.NEXT_PUBLIC_API_URL}/transactions/create`, \n+        transactionData, // Hanya data yang dikirim dalam body\n+        {\n+          headers: {\n+            Authorization: `Bearer ${session.accessToken}`, // Tempatkan headers di opsi konfigurasi\n+            'Content-Type': 'application/json',\n+          },\n+        }\n+      );\n+      setAlertType('success');\n+      setAlertMessage('Transaksi berhasil ditambahkan');\n+      setShowAlert(true);\n+     // alert('Transaksi berhasil ditambahkan');\n+      // Refresh data atau navigasi sesuai kebutuhan\n+      fetchTransactions();\n+    } catch (error) {\n+      setAlertType('failure');\n+      setAlertMessage('Gagal menambahkan transaksi');\n+      setShowAlert(true);\n+      console.error('Error creating transaction:', error);\n+    }\n+  };\n+  \n+  const handleAlertDismiss = () => {\n+    setShowAlert(false);\n+  };\n+\n+  if (loading) {\n+    return <Spinner />;\n+  }\n+\n+ // console.log(transactions)\n+\n+  return (\n+    <>\n+   \n+    <Header toggleSidebar={toggleSidebar}/>\n+    <main className='max-w-screen-xl mx-auto'>\n+      <div className='w-full'>\n+        <SideMenu isOpen={isSidebarOpen}/>\n+        <section className='mt-14 px-5 py-5 md:px-8 sm:ml-64'>\n+        {showAlert && (\n+            <Alert className='' color={alertType === 'success' ? 'success' : 'failure'} onDismiss={handleAlertDismiss}>\n+                <span className=\"font-medium\">{alertMessage}</span>\n+            </Alert>\n+        )}\n+          <h1 className='text-xl mb-4 font-semibold text-gray-900 sm:text-2xl dark:text-white'>Data Transaksi</h1>\n+\n+          <Card className='w-full mb-10'>\n+            <h3 className='font-semibold mb-3'>Buat Transaksi Baru</h3>\n+              <div className='flex flex-wrap gap-2'>\n+              <Button size=\"sm\" color=\"success\" onClick={handlePaymentClick}>\n+                <FaExchangeAlt  className=\"mr-2 h-5 w-5\" />\n+                IPL\n+              </Button>\n+\n+              <Button size=\"sm\" color=\"blue\" onClick={handleIncomeClick}>\n+                <FaRegArrowAltCircleDown  className=\"mr-2 h-5 w-5\" />\n+                Masuk\n+              </Button>\n+              <Button size=\"sm\" color=\"failure\" onClick={handleExpenseClick}>\n+                Keluar\n+                <FaRegArrowAltCircleUp  className=\"ml-2 h-5 w-5\" />\n+              </Button>\n+              </div>\n+          </Card>\n+\n+          <TransactionDrawer\n+            isOpen={isDrawerOpen}\n+            onClose={() => setIsDrawerOpen(false)}\n+            onSubmit={handleDrawerSubmit}\n+            transactionType={currentTransactionType}\n+          />\n+\n+          <div className=\"max-w-md mb-4 flex\">\n+\n+            <TextInput \n+              name=\"name\"\n+              placeholder=\"Cari\"\n+              value={searchTerm}\n+              onChange={handleSearchChange}\n+              className=\"mr-2 w-3/5\"\n+              icon={HiOutlineSearch} \n+            />\n+\n+            <FilterTransactions className=\"w-2/5\" setTransactions={setTransactions} initialTransaction={reTransactions} />\n+\n+          </div>\n+\n+          <div className='overflow-x-auto'>\n+            <Table hoverable>\n+              <Table.Head>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 w-3/4'>Keterangan</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tanggal</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Nominal</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tipe</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Status</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>\n+                    <span className=\"sr-only\">Edit</span>\n+                </Table.HeadCell>\n+              </Table.Head>\n+              <Table.Body className=\"divide-y\">\n+                \n+                {currentPageData.map((transaction, index) => ( \n+                  <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n+                    <Table.Cell className={`py-2 px-2 md:py-3 md:px-3 ${getTextColor(transaction.transaction_type)}`}>\n+                      <span className='flex items-start content-start'>\n+                        <span>{getTypeIcon(transaction.transaction_type)} </span>\n+                        <span className=\"ml-2\">{transaction.description}</span> \n+                      </span>\n+                    </Table.Cell>\n+                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}</Table.Cell>\n+                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{formatCurrency(transaction.amount)}</Table.Cell>\n+                    \n+                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n+                      <span className='flex items-center'>\n+                        {transaction.payment_type} \n+                      </span>\n+                    </Table.Cell>\n+                    <Table.Cell className={`items-center flex justify-center content-center py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n+                      <span className='flex items-center'>\n+                        {getStatusIcon(transaction.status)} \n+                      </span>\n+                    </Table.Cell>\n+                    <Table.Cell className='py-2 px-2 md:py-3 md:px-3 text-xs md:text-base'>\n+                      <Dropdown  className=\"relative z-50 cursor-pointer\" align=\"right\" label=\"\" renderTrigger={() => <span><FaEllipsisH  className=\"h-4 w-4 cursor-pointer\" /></span>}>\n+                        <Dropdown.Item><FaRegEdit className='mr-1'/><span>Edit</span></Dropdown.Item>\n+                        <Dropdown.Item><FaEye className='mr-1'/><span>View</span></Dropdown.Item>\n+                        <Dropdown.Item onClick={() => handleDeleteTransaction(transaction.id)} ><FaRegTrashAlt className='mr-1' /><span>Delete</span></Dropdown.Item>\n+                      </Dropdown>\n+\n+                    </Table.Cell>\n+                </Table.Row>\n+\n+                ))}\n+              </Table.Body>\n+            </Table>\n+          </div>\n+          <nav className='py-6'>\n+          <ReactPaginate\n+                previousLabel={'Previous'}\n+                nextLabel={'Next'}\n+                breakLabel={'...'}\n+                pageCount={Math.ceil(filteredTransactions.length / ITEMS_PER_PAGE)}\n+                marginPagesDisplayed={2}\n+                pageRangeDisplayed={5}\n+                onPageChange={handlePageClick}\n+                containerClassName={'pagination flex justify-center -space-x-px text-sm'}\n+                pageClassName={'page-item'}\n+                pageLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                previousClassName={'page-item'}\n+                previousLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                nextClassName={'page-item'}\n+                nextLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                breakClassName={'page-item'}\n+                breakLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                activeClassName={'active'}\n+                activeLinkClassName={'bg-gray-300'}\n+            />\n+          </nav>\n+\n+        </section>\n+        \n+        <Modal\n+          show={showDeleteModal}\n+          size=\"md\"\n+          popup\n+          onClose={() => setShowDeleteModal(false)}\n+        >\n+          <Modal.Header />\n+          <Modal.Body>\n+          <div className=\"text-center\">\n+            <HiOutlineExclamationCircle className=\"mx-auto mb-4 h-14 w-14 text-gray-400 dark:text-gray-200\" />\n+            <h3 className=\"mb-5 text-lg font-normal text-gray-500 dark:text-gray-400\">\n+            Apakah Anda yakin ingin menghapus transaksi ini?\n+            </h3>\n+            <div className=\"flex justify-center gap-4\">\n+              <Button color=\"failure\" onClick={handleConfirmDelete}>\n+                Hapus\n+              </Button>\n+              <Button color=\"gray\" onClick={() => setShowDeleteModal(false)}>\n+                Batal\n+              </Button>\n+            </div>\n+          </div>\n+          </Modal.Body>\n+          \n+        </Modal>         \n+\n+      </div>\n+      \n+      \n+    </main>\n+    </>\n+  );\n+}\n+\n+export const getServerSideProps = async (context) => {\n+  const session = await getSession(context);\n+  \n+  if (!session) {\n+      return {\n+          redirect: {\n+              destination: '/',\n+              permanent: false,\n+          },\n+      };\n+  }\n+\n+  try {\n+      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n+          headers: {\n+              Authorization: `Bearer ${session.accessToken}`,\n+          },\n+      });\n+      return {\n+          props: {\n+            initialTransaction: res.data,\n+          },\n+      };\n+  } catch (error) {\n+      console.error('Error fetching houses data:', error);\n+      return {\n+          props: {\n+            initialTransaction: [],\n+          },\n+      };\n+  }\n+};\n+\n+export default Transaction;\n"
                },
                {
                    "date": 1722413330447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,417 @@\n+// pages/home.js\n+import { getSession, useSession } from 'next-auth/react';\n+import { useEffect,useState } from 'react';\n+import axios from 'axios';\n+import { useRequireAuth } from '../../utils/authUtils'; \n+import ReactPaginate from 'react-paginate';\n+\n+import Header from '../../components/Header';\n+import SideMenu from '../../components/dashboard/Sidebar';\n+import TransactionDrawer from '../../components/dashboard/TransactionDrawer';\n+import Spinner from '../../components/Spinner';\n+import { HiOutlineExclamationCircle } from \"react-icons/hi\";\n+import { Card, Button,TextInput,Drawer,Select, Table,Dropdown, Alert,Modal } from \"flowbite-react\";\n+import { HiOutlineSearch } from \"react-icons/hi\";\n+import {  FaCheckCircle, FaTimesCircle, FaHourglassHalf,FaRegEdit,FaEye,FaRegTrashAlt } from 'react-icons/fa';\n+import { FaRegArrowAltCircleDown } from \"react-icons/fa\";\n+import { FaRegArrowAltCircleUp } from \"react-icons/fa\";\n+import { FaEllipsisH } from \"react-icons/fa\";\n+import { FaExchangeAlt } from \"react-icons/fa\";\n+import FilterTransactions from '../../components/FilterTransactions';\n+import moment from 'moment';\n+import 'moment/locale/id';\n+moment.locale('id');\n+\n+const ITEMS_PER_PAGE = 15;\n+\n+\n+const Transaction = ({ initialTransaction }) =>  {\n+  const { useAuthRedirect } = useRequireAuth(['admin', 'editor', 'superadmin']);\n+  useAuthRedirect();\n+  const [transactions, setTransactions] = useState([initialTransaction]);\n+  const [reTransactions, setReTransactions] = useState([initialTransaction])\n+  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n+  const [loading, setLoading] = useState(true);\n+  const { data: session, status } = useSession();\n+  const [searchTerm, setSearchTerm] = useState('');\n+  const [currentPage, setCurrentPage] = useState(0);\n+\n+  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n+  const [currentTransactionType, setCurrentTransactionType] = useState('');\n+\n+  const [showAlert, setShowAlert] = useState(false);\n+  const [alertMessage, setAlertMessage] = useState('');\n+  const [alertType, setAlertType] = useState('success');\n+  \n+  const [showDeleteModal, setShowDeleteModal] = useState(false);\n+  const [transactionIdToDelete, setTransactionIdToDelete] = useState(null);\n+\n+  const handleDeleteTransaction = async (transactionId) => {\n+    console.log(transactionId)\n+    setTransactionIdToDelete(transactionId);\n+    setShowDeleteModal(true);\n+  };\n+\n+  const handleConfirmDelete = async () => {\n+    try {\n+      const response = await axios.delete(\n+        `${process.env.NEXT_PUBLIC_API_URL}/transactions/delete/${transactionIdToDelete}`,\n+        {\n+          headers: {\n+            Authorization: `Bearer ${session.accessToken}`,\n+          },\n+        }\n+      );\n+      setAlertType('success');\n+      setAlertMessage('Transaksi berhasil dihapus');\n+      setShowAlert(true);\n+      fetchTransactions();\n+    } catch (error) {\n+      setAlertType('failure');\n+      setAlertMessage('Gagal menghapus transaksi');\n+      setShowAlert(true);\n+      console.error('Error deleting transaction:', error);\n+    } finally {\n+      setShowDeleteModal(false);\n+    }\n+  };\n+\n+  const toggleSidebar = () => {\n+    setIsSidebarOpen(!isSidebarOpen);\n+  };\n+\n+  const formatCurrency = (amount) => {\n+    return new Intl.NumberFormat('id-ID', {\n+        style: 'currency',\n+        currency: 'IDR',\n+        minimumFractionDigits: 0,\n+    }).format(amount);\n+  };\n+\n+  const fetchTransactions = async () => {\n+    try {\n+        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n+            headers: {\n+              Authorization: `Bearer ${session.accessToken}`,\n+            },\n+        });\n+        setTransactions(res.data.data);\n+        setReTransactions(res.data.data);\n+        setLoading(false);\n+    } catch (error) {\n+        console.error('Error fetching houses data:', error);\n+        setLoading(false);\n+    }\n+ };\n+\n+  useEffect(() => {\n+    if (session) {\n+        fetchTransactions();\n+    }\n+\n+  }, [session, status]);\n+\n+  const handleSearchChange = (event) => {\n+    setSearchTerm(event.target.value);\n+  };\n+\n+  const filteredTransactions = transactions.filter(transaction => \n+    (transaction.description && transaction.description.toLowerCase().includes(searchTerm.toLowerCase()))\n+  );\n+\n+  const offset = currentPage * ITEMS_PER_PAGE;\n+  const currentPageData = filteredTransactions.slice(offset, offset + ITEMS_PER_PAGE);\n+\n+  const handlePageClick = (data) => {\n+    setCurrentPage(data.selected);\n+  };\n+\n+\n+  const getStatusIcon = (status) => {\n+    switch (status) {\n+      case 'berhasil':\n+        return <FaCheckCircle className=\"text-green-500\" />;\n+      case 'gagal':\n+        return <FaTimesCircle className=\"text-red-500\" />;\n+      case 'sedang dicek':\n+        return <FaHourglassHalf className=\"text-yellow-500\" />;\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const getTypeIcon = (type) => {\n+    switch (type) {\n+      case 'income':\n+        return <FaRegArrowAltCircleDown  className=\"text-blue-700 h-4 w-4 md:h-5 md:w-5 \" />;\n+      case 'expense':\n+        return <FaRegArrowAltCircleUp  className=\"text-red-700 h-4 w-4 md:h-5 md:w-5 \" />;\n+      case 'ipl':\n+        return <FaExchangeAlt  className=\"text-green-700  h-3 w-3 md:h-4 md:w-4 \" />;\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const getTextColor = (type) => {\n+    switch (type) {\n+      case 'income':\n+        return \"text-blue-700\";\n+      case 'expense':\n+        return \"text-red-700\";\n+      case 'ipl':\n+        return \"text-green-700\";\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const handlePaymentClick = () => {\n+    setCurrentTransactionType('ipl');\n+    setIsDrawerOpen(true);\n+  };\n+\n+  const handleIncomeClick = () => {\n+    setCurrentTransactionType('income');\n+    setIsDrawerOpen(true);\n+  };\n+\n+  const handleExpenseClick = () => {\n+    setCurrentTransactionType('expense');\n+    setIsDrawerOpen(true);\n+  };\n+\n+  const handleDrawerSubmit = async (transactionData) => {\n+    try {\n+      const response = await axios.post(\n+        `${process.env.NEXT_PUBLIC_API_URL}/transactions/create`, \n+        transactionData, // Hanya data yang dikirim dalam body\n+        {\n+          headers: {\n+            Authorization: `Bearer ${session.accessToken}`, // Tempatkan headers di opsi konfigurasi\n+            'Content-Type': 'application/json',\n+          },\n+        }\n+      );\n+      setAlertType('success');\n+      setAlertMessage('Transaksi berhasil ditambahkan');\n+      setShowAlert(true);\n+     // alert('Transaksi berhasil ditambahkan');\n+      // Refresh data atau navigasi sesuai kebutuhan\n+      fetchTransactions();\n+    } catch (error) {\n+      setAlertType('failure');\n+      setAlertMessage('Gagal menambahkan transaksi');\n+      setShowAlert(true);\n+      console.error('Error creating transaction:', error);\n+    }\n+  };\n+  \n+  const handleAlertDismiss = () => {\n+    setShowAlert(false);\n+  };\n+\n+  if (loading) {\n+    return <Spinner />;\n+  }\n+\n+ // console.log(transactions)\n+\n+  return (\n+    <>\n+   \n+    <Header toggleSidebar={toggleSidebar}/>\n+    <main className='max-w-screen-xl mx-auto'>\n+      <div className='w-full'>\n+        <SideMenu isOpen={isSidebarOpen}/>\n+        <section className='mt-14 px-5 py-5 md:px-8 sm:ml-64'>\n+        {showAlert && (\n+            <Alert className='' color={alertType === 'success' ? 'success' : 'failure'} onDismiss={handleAlertDismiss}>\n+                <span className=\"font-medium\">{alertMessage}</span>\n+            </Alert>\n+        )}\n+          <h1 className='text-xl mb-4 font-semibold text-gray-900 sm:text-2xl dark:text-white'>Data Transaksi</h1>\n+\n+          <Card className='w-full mb-10'>\n+            <h3 className='font-semibold mb-3'>Buat Transaksi Baru</h3>\n+              <div className='flex flex-wrap gap-2'>\n+              <Button size=\"sm\" color=\"success\" onClick={handlePaymentClick}>\n+                <FaExchangeAlt  className=\"mr-2 h-5 w-5\" />\n+                IPL\n+              </Button>\n+\n+              <Button size=\"sm\" color=\"blue\" onClick={handleIncomeClick}>\n+                <FaRegArrowAltCircleDown  className=\"mr-2 h-5 w-5\" />\n+                Masuk\n+              </Button>\n+              <Button size=\"sm\" color=\"failure\" onClick={handleExpenseClick}>\n+                Keluar\n+                <FaRegArrowAltCircleUp  className=\"ml-2 h-5 w-5\" />\n+              </Button>\n+              </div>\n+          </Card>\n+\n+          <TransactionDrawer\n+            isOpen={isDrawerOpen}\n+            onClose={() => setIsDrawerOpen(false)}\n+            onSubmit={handleDrawerSubmit}\n+            transactionType={currentTransactionType}\n+          />\n+\n+          <div className=\"max-w-md mb-4 flex\">\n+\n+            <TextInput \n+              name=\"name\"\n+              placeholder=\"Cari\"\n+              value={searchTerm}\n+              onChange={handleSearchChange}\n+              className=\"mr-2 w-3/5\"\n+              icon={HiOutlineSearch} \n+            />\n+\n+            <FilterTransactions className=\"w-2/5\" setTransactions={setTransactions} initialTransaction={reTransactions} />\n+\n+          </div>\n+\n+          <div className='overflow-x-auto'>\n+            <Table hoverable>\n+              <Table.Head>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 w-3/4'>Keterangan</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tanggal</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Nominal</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tipe</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Status</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>\n+                    <span className=\"sr-only\">Edit</span>\n+                </Table.HeadCell>\n+              </Table.Head>\n+              <Table.Body className=\"divide-y\">\n+                \n+                {currentPageData.map((transaction, index) => ( \n+                  <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n+                    <Table.Cell className={`py-2 px-2 md:py-3 md:px-3 ${getTextColor(transaction.transaction_type)}`}>\n+                      <span className='flex items-start content-start'>\n+                        <span>{getTypeIcon(transaction.transaction_type)} </span>\n+                        <span className=\"ml-2\">{transaction.description}</span> \n+                      </span>\n+                    </Table.Cell>\n+                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}</Table.Cell>\n+                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{formatCurrency(transaction.amount)}</Table.Cell>\n+                    \n+                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n+                      <span className='flex items-center'>\n+                        {transaction.payment_type} \n+                      </span>\n+                    </Table.Cell>\n+                    <Table.Cell className={`items-center flex justify-center content-center py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n+                      <span className='flex items-center'>\n+                        {getStatusIcon(transaction.status)} \n+                      </span>\n+                    </Table.Cell>\n+                    <Table.Cell className='py-2 px-2 md:py-3 md:px-3 text-xs md:text-base'>\n+                      <Dropdown  className=\"relative z-50 cursor-pointer\" align=\"right\" label=\"\" renderTrigger={() => <span><FaEllipsisH  className=\"h-4 w-4 cursor-pointer\" /></span>}>\n+                        <Dropdown.Item><FaRegEdit className='mr-1'/><span>Edit</span></Dropdown.Item>\n+                        <Dropdown.Item><FaEye className='mr-1'/><span>View</span></Dropdown.Item>\n+                        <Dropdown.Item onClick={() => handleDeleteTransaction(transaction._id)} ><FaRegTrashAlt className='mr-1' /><span>Delete</span></Dropdown.Item>\n+                      </Dropdown>\n+\n+                    </Table.Cell>\n+                </Table.Row>\n+\n+                ))}\n+              </Table.Body>\n+            </Table>\n+          </div>\n+          <nav className='py-6'>\n+          <ReactPaginate\n+                previousLabel={'Previous'}\n+                nextLabel={'Next'}\n+                breakLabel={'...'}\n+                pageCount={Math.ceil(filteredTransactions.length / ITEMS_PER_PAGE)}\n+                marginPagesDisplayed={2}\n+                pageRangeDisplayed={5}\n+                onPageChange={handlePageClick}\n+                containerClassName={'pagination flex justify-center -space-x-px text-sm'}\n+                pageClassName={'page-item'}\n+                pageLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                previousClassName={'page-item'}\n+                previousLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                nextClassName={'page-item'}\n+                nextLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                breakClassName={'page-item'}\n+                breakLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                activeClassName={'active'}\n+                activeLinkClassName={'bg-gray-300'}\n+            />\n+          </nav>\n+\n+        </section>\n+        \n+        <Modal\n+          show={showDeleteModal}\n+          size=\"md\"\n+          popup\n+          onClose={() => setShowDeleteModal(false)}\n+        >\n+          <Modal.Header />\n+          <Modal.Body>\n+          <div className=\"text-center\">\n+            <HiOutlineExclamationCircle className=\"mx-auto mb-4 h-14 w-14 text-gray-400 dark:text-gray-200\" />\n+            <h3 className=\"mb-5 text-lg font-normal text-gray-500 dark:text-gray-400\">\n+            Apakah Anda yakin ingin menghapus transaksi ini?\n+            </h3>\n+            <div className=\"flex justify-center gap-4\">\n+              <Button color=\"failure\" onClick={handleConfirmDelete}>\n+                Hapus\n+              </Button>\n+              <Button color=\"gray\" onClick={() => setShowDeleteModal(false)}>\n+                Batal\n+              </Button>\n+            </div>\n+          </div>\n+          </Modal.Body>\n+          \n+        </Modal>         \n+\n+      </div>\n+      \n+      \n+    </main>\n+    </>\n+  );\n+}\n+\n+export const getServerSideProps = async (context) => {\n+  const session = await getSession(context);\n+  \n+  if (!session) {\n+      return {\n+          redirect: {\n+              destination: '/',\n+              permanent: false,\n+          },\n+      };\n+  }\n+\n+  try {\n+      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n+          headers: {\n+              Authorization: `Bearer ${session.accessToken}`,\n+          },\n+      });\n+      return {\n+          props: {\n+            initialTransaction: res.data,\n+          },\n+      };\n+  } catch (error) {\n+      console.error('Error fetching houses data:', error);\n+      return {\n+          props: {\n+            initialTransaction: [],\n+          },\n+      };\n+  }\n+};\n+\n+export default Transaction;\n"
                },
                {
                    "date": 1722415497370,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,8 +44,9 @@\n   const [alertType, setAlertType] = useState('success');\n   \n   const [showDeleteModal, setShowDeleteModal] = useState(false);\n   const [transactionIdToDelete, setTransactionIdToDelete] = useState(null);\n+  const [transactionToEdit, setTransactionToEdit] = useState(null);\n \n   const handleDeleteTransaction = async (transactionId) => {\n     console.log(transactionId)\n     setTransactionIdToDelete(transactionId);\n@@ -414,838 +415,4 @@\n   }\n };\n \n export default Transaction;\n-// pages/home.js\n-import { getSession, useSession } from 'next-auth/react';\n-import { useEffect,useState } from 'react';\n-import axios from 'axios';\n-import { useRequireAuth } from '../../utils/authUtils'; \n-import ReactPaginate from 'react-paginate';\n-\n-import Header from '../../components/Header';\n-import SideMenu from '../../components/dashboard/Sidebar';\n-import TransactionDrawer from '../../components/dashboard/TransactionDrawer';\n-import Spinner from '../../components/Spinner';\n-import { HiOutlineExclamationCircle } from \"react-icons/hi\";\n-import { Card, Button,TextInput,Drawer,Select, Table,Dropdown, Alert,Modal } from \"flowbite-react\";\n-import { HiOutlineSearch } from \"react-icons/hi\";\n-import {  FaCheckCircle, FaTimesCircle, FaHourglassHalf,FaRegEdit,FaEye,FaRegTrashAlt } from 'react-icons/fa';\n-import { FaRegArrowAltCircleDown } from \"react-icons/fa\";\n-import { FaRegArrowAltCircleUp } from \"react-icons/fa\";\n-import { FaEllipsisH } from \"react-icons/fa\";\n-import { FaExchangeAlt } from \"react-icons/fa\";\n-import FilterTransactions from '../../components/FilterTransactions';\n-import moment from 'moment';\n-import 'moment/locale/id';\n-moment.locale('id');\n-\n-const ITEMS_PER_PAGE = 15;\n-\n-\n-const Transaction = ({ initialTransaction }) =>  {\n-  const { useAuthRedirect } = useRequireAuth(['admin', 'editor', 'superadmin']);\n-  useAuthRedirect();\n-  const [transactions, setTransactions] = useState([initialTransaction]);\n-  const [reTransactions, setReTransactions] = useState([initialTransaction])\n-  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n-  const [loading, setLoading] = useState(true);\n-  const { data: session, status } = useSession();\n-  const [searchTerm, setSearchTerm] = useState('');\n-  const [currentPage, setCurrentPage] = useState(0);\n-\n-  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n-  const [currentTransactionType, setCurrentTransactionType] = useState('');\n-\n-  const [showAlert, setShowAlert] = useState(false);\n-  const [alertMessage, setAlertMessage] = useState('');\n-  const [alertType, setAlertType] = useState('success');\n-  \n-  const [showDeleteModal, setShowDeleteModal] = useState(false);\n-  const [transactionIdToDelete, setTransactionIdToDelete] = useState(null);\n-\n-  const handleDeleteTransaction = async (transactionId) => {\n-    console.log('asd')\n-    setTransactionIdToDelete(transactionId);\n-    setShowDeleteModal(true);\n-  };\n-\n-  const handleConfirmDelete = async () => {\n-    try {\n-      const response = await axios.delete(\n-        `${process.env.NEXT_PUBLIC_API_URL}/transactions/delete/${transactionIdToDelete}`,\n-        {\n-          headers: {\n-            Authorization: `Bearer ${session.accessToken}`,\n-          },\n-        }\n-      );\n-      setAlertType('success');\n-      setAlertMessage('Transaksi berhasil dihapus');\n-      setShowAlert(true);\n-      fetchTransactions();\n-    } catch (error) {\n-      setAlertType('failure');\n-      setAlertMessage('Gagal menghapus transaksi');\n-      setShowAlert(true);\n-      console.error('Error deleting transaction:', error);\n-    } finally {\n-      setShowDeleteModal(false);\n-    }\n-  };\n-\n-  const toggleSidebar = () => {\n-    setIsSidebarOpen(!isSidebarOpen);\n-  };\n-\n-  const formatCurrency = (amount) => {\n-    return new Intl.NumberFormat('id-ID', {\n-        style: 'currency',\n-        currency: 'IDR',\n-        minimumFractionDigits: 0,\n-    }).format(amount);\n-  };\n-\n-  const fetchTransactions = async () => {\n-    try {\n-        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n-            headers: {\n-              Authorization: `Bearer ${session.accessToken}`,\n-            },\n-        });\n-        setTransactions(res.data.data);\n-        setReTransactions(res.data.data);\n-        setLoading(false);\n-    } catch (error) {\n-        console.error('Error fetching houses data:', error);\n-        setLoading(false);\n-    }\n- };\n-\n-  useEffect(() => {\n-    if (session) {\n-        fetchTransactions();\n-    }\n-\n-  }, [session, status]);\n-\n-  const handleSearchChange = (event) => {\n-    setSearchTerm(event.target.value);\n-  };\n-\n-  const filteredTransactions = transactions.filter(transaction => \n-    (transaction.description && transaction.description.toLowerCase().includes(searchTerm.toLowerCase()))\n-  );\n-\n-  const offset = currentPage * ITEMS_PER_PAGE;\n-  const currentPageData = filteredTransactions.slice(offset, offset + ITEMS_PER_PAGE);\n-\n-  const handlePageClick = (data) => {\n-    setCurrentPage(data.selected);\n-  };\n-\n-\n-  const getStatusIcon = (status) => {\n-    switch (status) {\n-      case 'berhasil':\n-        return <FaCheckCircle className=\"text-green-500\" />;\n-      case 'gagal':\n-        return <FaTimesCircle className=\"text-red-500\" />;\n-      case 'sedang dicek':\n-        return <FaHourglassHalf className=\"text-yellow-500\" />;\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const getTypeIcon = (type) => {\n-    switch (type) {\n-      case 'income':\n-        return <FaRegArrowAltCircleDown  className=\"text-blue-700 h-4 w-4 md:h-5 md:w-5 \" />;\n-      case 'expense':\n-        return <FaRegArrowAltCircleUp  className=\"text-red-700 h-4 w-4 md:h-5 md:w-5 \" />;\n-      case 'ipl':\n-        return <FaExchangeAlt  className=\"text-green-700  h-3 w-3 md:h-4 md:w-4 \" />;\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const getTextColor = (type) => {\n-    switch (type) {\n-      case 'income':\n-        return \"text-blue-700\";\n-      case 'expense':\n-        return \"text-red-700\";\n-      case 'ipl':\n-        return \"text-green-700\";\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const handlePaymentClick = () => {\n-    setCurrentTransactionType('ipl');\n-    setIsDrawerOpen(true);\n-  };\n-\n-  const handleIncomeClick = () => {\n-    setCurrentTransactionType('income');\n-    setIsDrawerOpen(true);\n-  };\n-\n-  const handleExpenseClick = () => {\n-    setCurrentTransactionType('expense');\n-    setIsDrawerOpen(true);\n-  };\n-\n-  const handleDrawerSubmit = async (transactionData) => {\n-    try {\n-      const response = await axios.post(\n-        `${process.env.NEXT_PUBLIC_API_URL}/transactions/create`, \n-        transactionData, // Hanya data yang dikirim dalam body\n-        {\n-          headers: {\n-            Authorization: `Bearer ${session.accessToken}`, // Tempatkan headers di opsi konfigurasi\n-            'Content-Type': 'application/json',\n-          },\n-        }\n-      );\n-      setAlertType('success');\n-      setAlertMessage('Transaksi berhasil ditambahkan');\n-      setShowAlert(true);\n-     // alert('Transaksi berhasil ditambahkan');\n-      // Refresh data atau navigasi sesuai kebutuhan\n-      fetchTransactions();\n-    } catch (error) {\n-      setAlertType('failure');\n-      setAlertMessage('Gagal menambahkan transaksi');\n-      setShowAlert(true);\n-      console.error('Error creating transaction:', error);\n-    }\n-  };\n-  \n-  const handleAlertDismiss = () => {\n-    setShowAlert(false);\n-  };\n-\n-  if (loading) {\n-    return <Spinner />;\n-  }\n-\n- // console.log(transactions)\n-\n-  return (\n-    <>\n-   \n-    <Header toggleSidebar={toggleSidebar}/>\n-    <main className='max-w-screen-xl mx-auto'>\n-      <div className='w-full'>\n-        <SideMenu isOpen={isSidebarOpen}/>\n-        <section className='mt-14 px-5 py-5 md:px-8 sm:ml-64'>\n-        {showAlert && (\n-            <Alert className='' color={alertType === 'success' ? 'success' : 'failure'} onDismiss={handleAlertDismiss}>\n-                <span className=\"font-medium\">{alertMessage}</span>\n-            </Alert>\n-        )}\n-          <h1 className='text-xl mb-4 font-semibold text-gray-900 sm:text-2xl dark:text-white'>Data Transaksi</h1>\n-\n-          <Card className='w-full mb-10'>\n-            <h3 className='font-semibold mb-3'>Buat Transaksi Baru</h3>\n-              <div className='flex flex-wrap gap-2'>\n-              <Button size=\"sm\" color=\"success\" onClick={handlePaymentClick}>\n-                <FaExchangeAlt  className=\"mr-2 h-5 w-5\" />\n-                IPL\n-              </Button>\n-\n-              <Button size=\"sm\" color=\"blue\" onClick={handleIncomeClick}>\n-                <FaRegArrowAltCircleDown  className=\"mr-2 h-5 w-5\" />\n-                Masuk\n-              </Button>\n-              <Button size=\"sm\" color=\"failure\" onClick={handleExpenseClick}>\n-                Keluar\n-                <FaRegArrowAltCircleUp  className=\"ml-2 h-5 w-5\" />\n-              </Button>\n-              </div>\n-          </Card>\n-\n-          <TransactionDrawer\n-            isOpen={isDrawerOpen}\n-            onClose={() => setIsDrawerOpen(false)}\n-            onSubmit={handleDrawerSubmit}\n-            transactionType={currentTransactionType}\n-          />\n-\n-          <div className=\"max-w-md mb-4 flex\">\n-\n-            <TextInput \n-              name=\"name\"\n-              placeholder=\"Cari\"\n-              value={searchTerm}\n-              onChange={handleSearchChange}\n-              className=\"mr-2 w-3/5\"\n-              icon={HiOutlineSearch} \n-            />\n-\n-            <FilterTransactions className=\"w-2/5\" setTransactions={setTransactions} initialTransaction={reTransactions} />\n-\n-          </div>\n-\n-          <div className='overflow-x-auto'>\n-            <Table hoverable>\n-              <Table.Head>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 w-3/4'>Keterangan</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tanggal</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Nominal</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tipe</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Status</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>\n-                    <span className=\"sr-only\">Edit</span>\n-                </Table.HeadCell>\n-              </Table.Head>\n-              <Table.Body className=\"divide-y\">\n-                \n-                {currentPageData.map((transaction, index) => ( \n-                  <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-                    <Table.Cell className={`py-2 px-2 md:py-3 md:px-3 ${getTextColor(transaction.transaction_type)}`}>\n-                      <span className='flex items-start content-start'>\n-                        <span>{getTypeIcon(transaction.transaction_type)} </span>\n-                        <span className=\"ml-2\">{transaction.description}</span> \n-                      </span>\n-                    </Table.Cell>\n-                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}</Table.Cell>\n-                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{formatCurrency(transaction.amount)}</Table.Cell>\n-                    \n-                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n-                      <span className='flex items-center'>\n-                        {transaction.payment_type} \n-                      </span>\n-                    </Table.Cell>\n-                    <Table.Cell className={`items-center flex justify-center content-center py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n-                      <span className='flex items-center'>\n-                        {getStatusIcon(transaction.status)} \n-                      </span>\n-                    </Table.Cell>\n-                    <Table.Cell className='py-2 px-2 md:py-3 md:px-3 text-xs md:text-base'>\n-                      <Dropdown  className=\"relative z-50 cursor-pointer\" align=\"right\" label=\"\" renderTrigger={() => <span><FaEllipsisH  className=\"h-4 w-4 cursor-pointer\" /></span>}>\n-                        <Dropdown.Item><FaRegEdit className='mr-1'/><span>Edit</span></Dropdown.Item>\n-                        <Dropdown.Item><FaEye className='mr-1'/><span>View</span></Dropdown.Item>\n-                        <Dropdown.Item onClick={() => handleDeleteTransaction(transaction.id)} ><FaRegTrashAlt className='mr-1' /><span>Delete</span></Dropdown.Item>\n-                      </Dropdown>\n-\n-                    </Table.Cell>\n-                </Table.Row>\n-\n-                ))}\n-              </Table.Body>\n-            </Table>\n-          </div>\n-          <nav className='py-6'>\n-          <ReactPaginate\n-                previousLabel={'Previous'}\n-                nextLabel={'Next'}\n-                breakLabel={'...'}\n-                pageCount={Math.ceil(filteredTransactions.length / ITEMS_PER_PAGE)}\n-                marginPagesDisplayed={2}\n-                pageRangeDisplayed={5}\n-                onPageChange={handlePageClick}\n-                containerClassName={'pagination flex justify-center -space-x-px text-sm'}\n-                pageClassName={'page-item'}\n-                pageLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                previousClassName={'page-item'}\n-                previousLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                nextClassName={'page-item'}\n-                nextLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                breakClassName={'page-item'}\n-                breakLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                activeClassName={'active'}\n-                activeLinkClassName={'bg-gray-300'}\n-            />\n-          </nav>\n-\n-        </section>\n-        \n-        <Modal\n-          show={showDeleteModal}\n-          size=\"md\"\n-          popup\n-          onClose={() => setShowDeleteModal(false)}\n-        >\n-          <Modal.Header />\n-          <Modal.Body>\n-          <div className=\"text-center\">\n-            <HiOutlineExclamationCircle className=\"mx-auto mb-4 h-14 w-14 text-gray-400 dark:text-gray-200\" />\n-            <h3 className=\"mb-5 text-lg font-normal text-gray-500 dark:text-gray-400\">\n-            Apakah Anda yakin ingin menghapus transaksi ini?\n-            </h3>\n-            <div className=\"flex justify-center gap-4\">\n-              <Button color=\"failure\" onClick={handleConfirmDelete}>\n-                Hapus\n-              </Button>\n-              <Button color=\"gray\" onClick={() => setShowDeleteModal(false)}>\n-                Batal\n-              </Button>\n-            </div>\n-          </div>\n-          </Modal.Body>\n-          \n-        </Modal>         \n-\n-      </div>\n-      \n-      \n-    </main>\n-    </>\n-  );\n-}\n-\n-export const getServerSideProps = async (context) => {\n-  const session = await getSession(context);\n-  \n-  if (!session) {\n-      return {\n-          redirect: {\n-              destination: '/',\n-              permanent: false,\n-          },\n-      };\n-  }\n-\n-  try {\n-      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n-          headers: {\n-              Authorization: `Bearer ${session.accessToken}`,\n-          },\n-      });\n-      return {\n-          props: {\n-            initialTransaction: res.data,\n-          },\n-      };\n-  } catch (error) {\n-      console.error('Error fetching houses data:', error);\n-      return {\n-          props: {\n-            initialTransaction: [],\n-          },\n-      };\n-  }\n-};\n-\n-export default Transaction;\n-// pages/home.js\n-import { getSession, useSession } from 'next-auth/react';\n-import { useEffect,useState } from 'react';\n-import axios from 'axios';\n-import { useRequireAuth } from '../../utils/authUtils'; \n-import ReactPaginate from 'react-paginate';\n-\n-import Header from '../../components/Header';\n-import SideMenu from '../../components/dashboard/Sidebar';\n-import TransactionDrawer from '../../components/dashboard/TransactionDrawer';\n-import Spinner from '../../components/Spinner';\n-import { HiOutlineExclamationCircle } from \"react-icons/hi\";\n-import { Card, Button,TextInput,Drawer,Select, Table,Dropdown, Alert,Modal } from \"flowbite-react\";\n-import { HiOutlineSearch } from \"react-icons/hi\";\n-import {  FaCheckCircle, FaTimesCircle, FaHourglassHalf,FaRegEdit,FaEye,FaRegTrashAlt } from 'react-icons/fa';\n-import { FaRegArrowAltCircleDown } from \"react-icons/fa\";\n-import { FaRegArrowAltCircleUp } from \"react-icons/fa\";\n-import { FaEllipsisH } from \"react-icons/fa\";\n-import { FaExchangeAlt } from \"react-icons/fa\";\n-import FilterTransactions from '../../components/FilterTransactions';\n-import moment from 'moment';\n-import 'moment/locale/id';\n-moment.locale('id');\n-\n-const ITEMS_PER_PAGE = 15;\n-\n-\n-const Transaction = ({ initialTransaction }) =>  {\n-  const { useAuthRedirect } = useRequireAuth(['admin', 'editor', 'superadmin']);\n-  useAuthRedirect();\n-  const [transactions, setTransactions] = useState([initialTransaction]);\n-  const [reTransactions, setReTransactions] = useState([initialTransaction])\n-  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n-  const [loading, setLoading] = useState(true);\n-  const { data: session, status } = useSession();\n-  const [searchTerm, setSearchTerm] = useState('');\n-  const [currentPage, setCurrentPage] = useState(0);\n-\n-  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n-  const [currentTransactionType, setCurrentTransactionType] = useState('');\n-\n-  const [showAlert, setShowAlert] = useState(false);\n-  const [alertMessage, setAlertMessage] = useState('');\n-  const [alertType, setAlertType] = useState('success');\n-  \n-  const [showDeleteModal, setShowDeleteModal] = useState(false);\n-  const [transactionIdToDelete, setTransactionIdToDelete] = useState(null);\n-\n-  const handleDeleteTransaction = async (transactionId) => {\n-    console.log('asd')\n-    setTransactionIdToDelete(transactionId);\n-    setShowDeleteModal(true);\n-  };\n-\n-  const handleConfirmDelete = async () => {\n-    try {\n-      const response = await axios.delete(\n-        `${process.env.NEXT_PUBLIC_API_URL}/transactions/delete/${transactionIdToDelete}`,\n-        {\n-          headers: {\n-            Authorization: `Bearer ${session.accessToken}`,\n-          },\n-        }\n-      );\n-      setAlertType('success');\n-      setAlertMessage('Transaksi berhasil dihapus');\n-      setShowAlert(true);\n-      fetchTransactions();\n-    } catch (error) {\n-      setAlertType('failure');\n-      setAlertMessage('Gagal menghapus transaksi');\n-      setShowAlert(true);\n-      console.error('Error deleting transaction:', error);\n-    } finally {\n-      setShowDeleteModal(false);\n-    }\n-  };\n-\n-  const toggleSidebar = () => {\n-    setIsSidebarOpen(!isSidebarOpen);\n-  };\n-\n-  const formatCurrency = (amount) => {\n-    return new Intl.NumberFormat('id-ID', {\n-        style: 'currency',\n-        currency: 'IDR',\n-        minimumFractionDigits: 0,\n-    }).format(amount);\n-  };\n-\n-  const fetchTransactions = async () => {\n-    try {\n-        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n-            headers: {\n-              Authorization: `Bearer ${session.accessToken}`,\n-            },\n-        });\n-        setTransactions(res.data.data);\n-        setReTransactions(res.data.data);\n-        setLoading(false);\n-    } catch (error) {\n-        console.error('Error fetching houses data:', error);\n-        setLoading(false);\n-    }\n- };\n-\n-  useEffect(() => {\n-    if (session) {\n-        fetchTransactions();\n-    }\n-\n-  }, [session, status]);\n-\n-  const handleSearchChange = (event) => {\n-    setSearchTerm(event.target.value);\n-  };\n-\n-  const filteredTransactions = transactions.filter(transaction => \n-    (transaction.description && transaction.description.toLowerCase().includes(searchTerm.toLowerCase()))\n-  );\n-\n-  const offset = currentPage * ITEMS_PER_PAGE;\n-  const currentPageData = filteredTransactions.slice(offset, offset + ITEMS_PER_PAGE);\n-\n-  const handlePageClick = (data) => {\n-    setCurrentPage(data.selected);\n-  };\n-\n-\n-  const getStatusIcon = (status) => {\n-    switch (status) {\n-      case 'berhasil':\n-        return <FaCheckCircle className=\"text-green-500\" />;\n-      case 'gagal':\n-        return <FaTimesCircle className=\"text-red-500\" />;\n-      case 'sedang dicek':\n-        return <FaHourglassHalf className=\"text-yellow-500\" />;\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const getTypeIcon = (type) => {\n-    switch (type) {\n-      case 'income':\n-        return <FaRegArrowAltCircleDown  className=\"text-blue-700 h-4 w-4 md:h-5 md:w-5 \" />;\n-      case 'expense':\n-        return <FaRegArrowAltCircleUp  className=\"text-red-700 h-4 w-4 md:h-5 md:w-5 \" />;\n-      case 'ipl':\n-        return <FaExchangeAlt  className=\"text-green-700  h-3 w-3 md:h-4 md:w-4 \" />;\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const getTextColor = (type) => {\n-    switch (type) {\n-      case 'income':\n-        return \"text-blue-700\";\n-      case 'expense':\n-        return \"text-red-700\";\n-      case 'ipl':\n-        return \"text-green-700\";\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const handlePaymentClick = () => {\n-    setCurrentTransactionType('ipl');\n-    setIsDrawerOpen(true);\n-  };\n-\n-  const handleIncomeClick = () => {\n-    setCurrentTransactionType('income');\n-    setIsDrawerOpen(true);\n-  };\n-\n-  const handleExpenseClick = () => {\n-    setCurrentTransactionType('expense');\n-    setIsDrawerOpen(true);\n-  };\n-\n-  const handleDrawerSubmit = async (transactionData) => {\n-    try {\n-      const response = await axios.post(\n-        `${process.env.NEXT_PUBLIC_API_URL}/transactions/create`, \n-        transactionData, // Hanya data yang dikirim dalam body\n-        {\n-          headers: {\n-            Authorization: `Bearer ${session.accessToken}`, // Tempatkan headers di opsi konfigurasi\n-            'Content-Type': 'application/json',\n-          },\n-        }\n-      );\n-      setAlertType('success');\n-      setAlertMessage('Transaksi berhasil ditambahkan');\n-      setShowAlert(true);\n-     // alert('Transaksi berhasil ditambahkan');\n-      // Refresh data atau navigasi sesuai kebutuhan\n-      fetchTransactions();\n-    } catch (error) {\n-      setAlertType('failure');\n-      setAlertMessage('Gagal menambahkan transaksi');\n-      setShowAlert(true);\n-      console.error('Error creating transaction:', error);\n-    }\n-  };\n-  \n-  const handleAlertDismiss = () => {\n-    setShowAlert(false);\n-  };\n-\n-  if (loading) {\n-    return <Spinner />;\n-  }\n-\n- // console.log(transactions)\n-\n-  return (\n-    <>\n-   \n-    <Header toggleSidebar={toggleSidebar}/>\n-    <main className='max-w-screen-xl mx-auto'>\n-      <div className='w-full'>\n-        <SideMenu isOpen={isSidebarOpen}/>\n-        <section className='mt-14 px-5 py-5 md:px-8 sm:ml-64'>\n-        {showAlert && (\n-            <Alert className='' color={alertType === 'success' ? 'success' : 'failure'} onDismiss={handleAlertDismiss}>\n-                <span className=\"font-medium\">{alertMessage}</span>\n-            </Alert>\n-        )}\n-          <h1 className='text-xl mb-4 font-semibold text-gray-900 sm:text-2xl dark:text-white'>Data Transaksi</h1>\n-\n-          <Card className='w-full mb-10'>\n-            <h3 className='font-semibold mb-3'>Buat Transaksi Baru</h3>\n-              <div className='flex flex-wrap gap-2'>\n-              <Button size=\"sm\" color=\"success\" onClick={handlePaymentClick}>\n-                <FaExchangeAlt  className=\"mr-2 h-5 w-5\" />\n-                IPL\n-              </Button>\n-\n-              <Button size=\"sm\" color=\"blue\" onClick={handleIncomeClick}>\n-                <FaRegArrowAltCircleDown  className=\"mr-2 h-5 w-5\" />\n-                Masuk\n-              </Button>\n-              <Button size=\"sm\" color=\"failure\" onClick={handleExpenseClick}>\n-                Keluar\n-                <FaRegArrowAltCircleUp  className=\"ml-2 h-5 w-5\" />\n-              </Button>\n-              </div>\n-          </Card>\n-\n-          <TransactionDrawer\n-            isOpen={isDrawerOpen}\n-            onClose={() => setIsDrawerOpen(false)}\n-            onSubmit={handleDrawerSubmit}\n-            transactionType={currentTransactionType}\n-          />\n-\n-          <div className=\"max-w-md mb-4 flex\">\n-\n-            <TextInput \n-              name=\"name\"\n-              placeholder=\"Cari\"\n-              value={searchTerm}\n-              onChange={handleSearchChange}\n-              className=\"mr-2 w-3/5\"\n-              icon={HiOutlineSearch} \n-            />\n-\n-            <FilterTransactions className=\"w-2/5\" setTransactions={setTransactions} initialTransaction={reTransactions} />\n-\n-          </div>\n-\n-          <div className='overflow-x-auto'>\n-            <Table hoverable>\n-              <Table.Head>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 w-3/4'>Keterangan</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tanggal</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Nominal</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tipe</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Status</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>\n-                    <span className=\"sr-only\">Edit</span>\n-                </Table.HeadCell>\n-              </Table.Head>\n-              <Table.Body className=\"divide-y\">\n-                \n-                {currentPageData.map((transaction, index) => ( \n-                  <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-                    <Table.Cell className={`py-2 px-2 md:py-3 md:px-3 ${getTextColor(transaction.transaction_type)}`}>\n-                      <span className='flex items-start content-start'>\n-                        <span>{getTypeIcon(transaction.transaction_type)} </span>\n-                        <span className=\"ml-2\">{transaction.description}</span> \n-                      </span>\n-                    </Table.Cell>\n-                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}</Table.Cell>\n-                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{formatCurrency(transaction.amount)}</Table.Cell>\n-                    \n-                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n-                      <span className='flex items-center'>\n-                        {transaction.payment_type} \n-                      </span>\n-                    </Table.Cell>\n-                    <Table.Cell className={`items-center flex justify-center content-center py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n-                      <span className='flex items-center'>\n-                        {getStatusIcon(transaction.status)} \n-                      </span>\n-                    </Table.Cell>\n-                    <Table.Cell className='py-2 px-2 md:py-3 md:px-3 text-xs md:text-base'>\n-                      <Dropdown  className=\"relative z-50 cursor-pointer\" align=\"right\" label=\"\" renderTrigger={() => <span><FaEllipsisH  className=\"h-4 w-4 cursor-pointer\" /></span>}>\n-                        <Dropdown.Item><FaRegEdit className='mr-1'/><span>Edit</span></Dropdown.Item>\n-                        <Dropdown.Item><FaEye className='mr-1'/><span>View</span></Dropdown.Item>\n-                        <Dropdown.Item><FaRegTrashAlt className='mr-1' onClick={() => handleDeleteTransaction(transaction.id)} /><span>Delete</span></Dropdown.Item>\n-                      </Dropdown>\n-\n-                    </Table.Cell>\n-                </Table.Row>\n-\n-                ))}\n-              </Table.Body>\n-            </Table>\n-          </div>\n-          <nav className='py-6'>\n-          <ReactPaginate\n-                previousLabel={'Previous'}\n-                nextLabel={'Next'}\n-                breakLabel={'...'}\n-                pageCount={Math.ceil(filteredTransactions.length / ITEMS_PER_PAGE)}\n-                marginPagesDisplayed={2}\n-                pageRangeDisplayed={5}\n-                onPageChange={handlePageClick}\n-                containerClassName={'pagination flex justify-center -space-x-px text-sm'}\n-                pageClassName={'page-item'}\n-                pageLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                previousClassName={'page-item'}\n-                previousLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                nextClassName={'page-item'}\n-                nextLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                breakClassName={'page-item'}\n-                breakLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                activeClassName={'active'}\n-                activeLinkClassName={'bg-gray-300'}\n-            />\n-          </nav>\n-\n-        </section>\n-        \n-        <Modal\n-          show={showDeleteModal}\n-          size=\"md\"\n-          popup\n-          onClose={() => setShowDeleteModal(false)}\n-        >\n-          <Modal.Header />\n-          <Modal.Body>\n-          <div className=\"text-center\">\n-            <HiOutlineExclamationCircle className=\"mx-auto mb-4 h-14 w-14 text-gray-400 dark:text-gray-200\" />\n-            <h3 className=\"mb-5 text-lg font-normal text-gray-500 dark:text-gray-400\">\n-            Apakah Anda yakin ingin menghapus transaksi ini?\n-            </h3>\n-            <div className=\"flex justify-center gap-4\">\n-              <Button color=\"failure\" onClick={handleConfirmDelete}>\n-                Hapus\n-              </Button>\n-              <Button color=\"gray\" onClick={() => setShowDeleteModal(false)}>\n-                Batal\n-              </Button>\n-            </div>\n-          </div>\n-          </Modal.Body>\n-          \n-        </Modal>         \n-\n-      </div>\n-      \n-      \n-    </main>\n-    </>\n-  );\n-}\n-\n-export const getServerSideProps = async (context) => {\n-  const session = await getSession(context);\n-  \n-  if (!session) {\n-      return {\n-          redirect: {\n-              destination: '/',\n-              permanent: false,\n-          },\n-      };\n-  }\n-\n-  try {\n-      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n-          headers: {\n-              Authorization: `Bearer ${session.accessToken}`,\n-          },\n-      });\n-      return {\n-          props: {\n-            initialTransaction: res.data,\n-          },\n-      };\n-  } catch (error) {\n-      console.error('Error fetching houses data:', error);\n-      return {\n-          props: {\n-            initialTransaction: [],\n-          },\n-      };\n-  }\n-};\n-\n-export default Transaction;\n"
                },
                {
                    "date": 1722415524569,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n   const [transactionIdToDelete, setTransactionIdToDelete] = useState(null);\n   const [transactionToEdit, setTransactionToEdit] = useState(null);\n \n   const handleDeleteTransaction = async (transactionId) => {\n-    console.log(transactionId)\n+    //console.log(transactionId)\n     setTransactionIdToDelete(transactionId);\n     setShowDeleteModal(true);\n   };\n \n"
                },
                {
                    "date": 1722415540987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,8 +76,25 @@\n       setShowDeleteModal(false);\n     }\n   };\n \n+  const handleEditTransaction = async (transactionId) => {\n+    try {\n+      const response = await axios.get(\n+        `${process.env.NEXT_PUBLIC_API_URL}/transactions/update/${transactionId}`,\n+        {\n+          headers: {\n+            Authorization: `Bearer ${session.accessToken}`,\n+          },\n+        }\n+      );\n+      setTransactionToEdit(response.data);\n+      setIsDrawerOpen(true);\n+    } catch (error) {\n+      console.error('Error fetching transaction data:', error);\n+    }\n+  };\n+\n   const toggleSidebar = () => {\n     setIsSidebarOpen(!isSidebarOpen);\n   };\n \n"
                },
                {
                    "date": 1722415546082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,9 +86,9 @@\n             Authorization: `Bearer ${session.accessToken}`,\n           },\n         }\n       );\n-      setTransactionToEdit(response.data);\n+     // setTransactionToEdit(response.data);\n       setIsDrawerOpen(true);\n     } catch (error) {\n       console.error('Error fetching transaction data:', error);\n     }\n"
                },
                {
                    "date": 1722415592887,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -327,9 +327,9 @@\n                       </span>\n                     </Table.Cell>\n                     <Table.Cell className='py-2 px-2 md:py-3 md:px-3 text-xs md:text-base'>\n                       <Dropdown  className=\"relative z-50 cursor-pointer\" align=\"right\" label=\"\" renderTrigger={() => <span><FaEllipsisH  className=\"h-4 w-4 cursor-pointer\" /></span>}>\n-                        <Dropdown.Item><FaRegEdit className='mr-1'/><span>Edit</span></Dropdown.Item>\n+                        <Dropdown.Item onClick={() => handleEditTransaction(transaction._id)}><FaRegEdit className='mr-1'/><span>Edit</span></Dropdown.Item>\n                         <Dropdown.Item><FaEye className='mr-1'/><span>View</span></Dropdown.Item>\n                         <Dropdown.Item onClick={() => handleDeleteTransaction(transaction._id)} ><FaRegTrashAlt className='mr-1' /><span>Delete</span></Dropdown.Item>\n                       </Dropdown>\n \n"
                },
                {
                    "date": 1722415732962,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,15 +86,38 @@\n             Authorization: `Bearer ${session.accessToken}`,\n           },\n         }\n       );\n-     // setTransactionToEdit(response.data);\n+      setTransactionToEdit(response.data);\n       setIsDrawerOpen(true);\n     } catch (error) {\n       console.error('Error fetching transaction data:', error);\n     }\n   };\n \n+  const handleUpdateTransaction = async (transactionData) => {\n+    try {\n+      const response = await axios.put(\n+        `${process.env.NEXT_PUBLIC_API_URL}/transactions/${transactionToEdit._id}`,\n+        transactionData,\n+        {\n+          headers: {\n+            Authorization: `Bearer ${session.accessToken}`,\n+          },\n+        }\n+      );\n+      setAlertType('success');\n+      setAlertMessage('Transaksi berhasil diupdate');\n+      setShowAlert(true);\n+      fetchTransactions();\n+    } catch (error) {\n+      setAlertType('failure');\n+      setAlertMessage('Gagal mengupdate transaksi');\n+      setShowAlert(true);\n+      console.error('Error updating transaction:', error);\n+    }\n+  };\n+\n   const toggleSidebar = () => {\n     setIsSidebarOpen(!isSidebarOpen);\n   };\n \n@@ -271,10 +294,11 @@\n \n           <TransactionDrawer\n             isOpen={isDrawerOpen}\n             onClose={() => setIsDrawerOpen(false)}\n-            onSubmit={handleDrawerSubmit}\n+            onSubmit={transactionToEdit ? handleUpdateTransaction : handleDrawerSubmit}\n             transactionType={currentTransactionType}\n+            transactionToEdit={transactionToEdit}\n           />\n \n           <div className=\"max-w-md mb-4 flex\">\n \n"
                },
                {
                    "date": 1722415843259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,9 @@\n \n   const handleEditTransaction = async (transactionId) => {\n     try {\n       const response = await axios.get(\n-        `${process.env.NEXT_PUBLIC_API_URL}/transactions/update/${transactionId}`,\n+        `${process.env.NEXT_PUBLIC_API_URL}/transactions/${transactionId}`,\n         {\n           headers: {\n             Authorization: `Bearer ${session.accessToken}`,\n           },\n"
                },
                {
                    "date": 1722415848554,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,9 +96,9 @@\n \n   const handleUpdateTransaction = async (transactionData) => {\n     try {\n       const response = await axios.put(\n-        `${process.env.NEXT_PUBLIC_API_URL}/transactions/${transactionToEdit._id}`,\n+        `${process.env.NEXT_PUBLIC_API_URL}/transactions/update/${transactionToEdit._id}`,\n         transactionData,\n         {\n           headers: {\n             Authorization: `Bearer ${session.accessToken}`,\n"
                },
                {
                    "date": 1722424765171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -251,8 +251,14 @@\n   const handleAlertDismiss = () => {\n     setShowAlert(false);\n   };\n \n+  const handleAlertTimeout = (timeoutDuration) => {\n+    setTimeout(() => {\n+      setShowAlert(false);\n+    }, timeoutDuration);\n+  };\n+\n   if (loading) {\n     return <Spinner />;\n   }\n \n"
                },
                {
                    "date": 1722424783281,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -248,9 +248,9 @@\n     }\n   };\n   \n   const handleAlertDismiss = () => {\n-    setShowAlert(false);\n+    handleAlertTimeout(0);\n   };\n \n   const handleAlertTimeout = (timeoutDuration) => {\n     setTimeout(() => {\n"
                },
                {
                    "date": 1722424819053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,467 @@\n+// pages/home.js\n+import { getSession, useSession } from 'next-auth/react';\n+import { useEffect,useState } from 'react';\n+import axios from 'axios';\n+import { useRequireAuth } from '../../utils/authUtils'; \n+import ReactPaginate from 'react-paginate';\n+\n+import Header from '../../components/Header';\n+import SideMenu from '../../components/dashboard/Sidebar';\n+import TransactionDrawer from '../../components/dashboard/TransactionDrawer';\n+import Spinner from '../../components/Spinner';\n+import { HiOutlineExclamationCircle } from \"react-icons/hi\";\n+import { Card, Button,TextInput,Drawer,Select, Table,Dropdown, Alert,Modal } from \"flowbite-react\";\n+import { HiOutlineSearch } from \"react-icons/hi\";\n+import {  FaCheckCircle, FaTimesCircle, FaHourglassHalf,FaRegEdit,FaEye,FaRegTrashAlt } from 'react-icons/fa';\n+import { FaRegArrowAltCircleDown } from \"react-icons/fa\";\n+import { FaRegArrowAltCircleUp } from \"react-icons/fa\";\n+import { FaEllipsisH } from \"react-icons/fa\";\n+import { FaExchangeAlt } from \"react-icons/fa\";\n+import FilterTransactions from '../../components/FilterTransactions';\n+import moment from 'moment';\n+import 'moment/locale/id';\n+moment.locale('id');\n+\n+const ITEMS_PER_PAGE = 15;\n+\n+\n+const Transaction = ({ initialTransaction }) =>  {\n+  const { useAuthRedirect } = useRequireAuth(['admin', 'editor', 'superadmin']);\n+  useAuthRedirect();\n+  const [transactions, setTransactions] = useState([initialTransaction]);\n+  const [reTransactions, setReTransactions] = useState([initialTransaction])\n+  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n+  const [loading, setLoading] = useState(true);\n+  const { data: session, status } = useSession();\n+  const [searchTerm, setSearchTerm] = useState('');\n+  const [currentPage, setCurrentPage] = useState(0);\n+\n+  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n+  const [currentTransactionType, setCurrentTransactionType] = useState('');\n+\n+  const [showAlert, setShowAlert] = useState(false);\n+  const [alertMessage, setAlertMessage] = useState('');\n+  const [alertType, setAlertType] = useState('success');\n+  \n+  const [showDeleteModal, setShowDeleteModal] = useState(false);\n+  const [transactionIdToDelete, setTransactionIdToDelete] = useState(null);\n+  const [transactionToEdit, setTransactionToEdit] = useState(null);\n+\n+  const handleDeleteTransaction = async (transactionId) => {\n+    //console.log(transactionId)\n+    setTransactionIdToDelete(transactionId);\n+    setShowDeleteModal(true);\n+  };\n+\n+  const handleConfirmDelete = async () => {\n+    try {\n+      const response = await axios.delete(\n+        `${process.env.NEXT_PUBLIC_API_URL}/transactions/delete/${transactionIdToDelete}`,\n+        {\n+          headers: {\n+            Authorization: `Bearer ${session.accessToken}`,\n+          },\n+        }\n+      );\n+      setAlertType('success');\n+      setAlertMessage('Transaksi berhasil dihapus');\n+      setShowAlert(true);\n+      fetchTransactions();\n+    } catch (error) {\n+      setAlertType('failure');\n+      setAlertMessage('Gagal menghapus transaksi');\n+      setShowAlert(true);\n+      console.error('Error deleting transaction:', error);\n+    } finally {\n+      setShowDeleteModal(false);\n+    }\n+  };\n+\n+  const handleEditTransaction = async (transactionId) => {\n+    try {\n+      const response = await axios.get(\n+        `${process.env.NEXT_PUBLIC_API_URL}/transactions/${transactionId}`,\n+        {\n+          headers: {\n+            Authorization: `Bearer ${session.accessToken}`,\n+          },\n+        }\n+      );\n+      setTransactionToEdit(response.data);\n+      setIsDrawerOpen(true);\n+    } catch (error) {\n+      console.error('Error fetching transaction data:', error);\n+    }\n+  };\n+\n+  const handleUpdateTransaction = async (transactionData) => {\n+    try {\n+      const response = await axios.put(\n+        `${process.env.NEXT_PUBLIC_API_URL}/transactions/update/${transactionToEdit._id}`,\n+        transactionData,\n+        {\n+          headers: {\n+            Authorization: `Bearer ${session.accessToken}`,\n+          },\n+        }\n+      );\n+      setAlertType('success');\n+      setAlertMessage('Transaksi berhasil diupdate');\n+      setShowAlert(true);\n+      handleAlertTimeout(3000);\n+      fetchTransactions();\n+    } catch (error) {\n+      setAlertType('failure');\n+      setAlertMessage('Gagal mengupdate transaksi');\n+      setShowAlert(true);\n+      handleAlertTimeout(3000);\n+      console.error('Error updating transaction:', error);\n+    }\n+  };\n+\n+  const toggleSidebar = () => {\n+    setIsSidebarOpen(!isSidebarOpen);\n+  };\n+\n+  const formatCurrency = (amount) => {\n+    return new Intl.NumberFormat('id-ID', {\n+        style: 'currency',\n+        currency: 'IDR',\n+        minimumFractionDigits: 0,\n+    }).format(amount);\n+  };\n+\n+  const fetchTransactions = async () => {\n+    try {\n+        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n+            headers: {\n+              Authorization: `Bearer ${session.accessToken}`,\n+            },\n+        });\n+        setTransactions(res.data.data);\n+        setReTransactions(res.data.data);\n+        setLoading(false);\n+    } catch (error) {\n+        console.error('Error fetching houses data:', error);\n+        setLoading(false);\n+    }\n+ };\n+\n+  useEffect(() => {\n+    if (session) {\n+        fetchTransactions();\n+    }\n+\n+  }, [session, status]);\n+\n+  const handleSearchChange = (event) => {\n+    setSearchTerm(event.target.value);\n+  };\n+\n+  const filteredTransactions = transactions.filter(transaction => \n+    (transaction.description && transaction.description.toLowerCase().includes(searchTerm.toLowerCase()))\n+  );\n+\n+  const offset = currentPage * ITEMS_PER_PAGE;\n+  const currentPageData = filteredTransactions.slice(offset, offset + ITEMS_PER_PAGE);\n+\n+  const handlePageClick = (data) => {\n+    setCurrentPage(data.selected);\n+  };\n+\n+\n+  const getStatusIcon = (status) => {\n+    switch (status) {\n+      case 'berhasil':\n+        return <FaCheckCircle className=\"text-green-500\" />;\n+      case 'gagal':\n+        return <FaTimesCircle className=\"text-red-500\" />;\n+      case 'sedang dicek':\n+        return <FaHourglassHalf className=\"text-yellow-500\" />;\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const getTypeIcon = (type) => {\n+    switch (type) {\n+      case 'income':\n+        return <FaRegArrowAltCircleDown  className=\"text-blue-700 h-4 w-4 md:h-5 md:w-5 \" />;\n+      case 'expense':\n+        return <FaRegArrowAltCircleUp  className=\"text-red-700 h-4 w-4 md:h-5 md:w-5 \" />;\n+      case 'ipl':\n+        return <FaExchangeAlt  className=\"text-green-700  h-3 w-3 md:h-4 md:w-4 \" />;\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const getTextColor = (type) => {\n+    switch (type) {\n+      case 'income':\n+        return \"text-blue-700\";\n+      case 'expense':\n+        return \"text-red-700\";\n+      case 'ipl':\n+        return \"text-green-700\";\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const handlePaymentClick = () => {\n+    setCurrentTransactionType('ipl');\n+    setIsDrawerOpen(true);\n+  };\n+\n+  const handleIncomeClick = () => {\n+    setCurrentTransactionType('income');\n+    setIsDrawerOpen(true);\n+  };\n+\n+  const handleExpenseClick = () => {\n+    setCurrentTransactionType('expense');\n+    setIsDrawerOpen(true);\n+  };\n+\n+  const handleDrawerSubmit = async (transactionData) => {\n+    try {\n+      const response = await axios.post(\n+        `${process.env.NEXT_PUBLIC_API_URL}/transactions/create`, \n+        transactionData, // Hanya data yang dikirim dalam body\n+        {\n+          headers: {\n+            Authorization: `Bearer ${session.accessToken}`, // Tempatkan headers di opsi konfigurasi\n+            'Content-Type': 'application/json',\n+          },\n+        }\n+      );\n+      setAlertType('success');\n+      setAlertMessage('Transaksi berhasil ditambahkan');\n+      setShowAlert(true);\n+     // alert('Transaksi berhasil ditambahkan');\n+      // Refresh data atau navigasi sesuai kebutuhan\n+      fetchTransactions();\n+    } catch (error) {\n+      setAlertType('failure');\n+      setAlertMessage('Gagal menambahkan transaksi');\n+      setShowAlert(true);\n+      console.error('Error creating transaction:', error);\n+    }\n+  };\n+  \n+  const handleAlertDismiss = () => {\n+    handleAlertTimeout(0);\n+  };\n+\n+  const handleAlertTimeout = (timeoutDuration) => {\n+    setTimeout(() => {\n+      setShowAlert(false);\n+    }, timeoutDuration);\n+  };\n+\n+  if (loading) {\n+    return <Spinner />;\n+  }\n+\n+ // console.log(transactions)\n+\n+  return (\n+    <>\n+   \n+    <Header toggleSidebar={toggleSidebar}/>\n+    <main className='max-w-screen-xl mx-auto'>\n+      <div className='w-full'>\n+        <SideMenu isOpen={isSidebarOpen}/>\n+        <section className='mt-14 px-5 py-5 md:px-8 sm:ml-64'>\n+        {showAlert && (\n+            <Alert className='' color={alertType === 'success' ? 'success' : 'failure'} onDismiss={handleAlertDismiss}>\n+                <span className=\"font-medium\">{alertMessage}</span>\n+            </Alert>\n+        )}\n+          <h1 className='text-xl mb-4 font-semibold text-gray-900 sm:text-2xl dark:text-white'>Data Transaksi</h1>\n+\n+          <Card className='w-full mb-10'>\n+            <h3 className='font-semibold mb-3'>Buat Transaksi Baru</h3>\n+              <div className='flex flex-wrap gap-2'>\n+              <Button size=\"sm\" color=\"success\" onClick={handlePaymentClick}>\n+                <FaExchangeAlt  className=\"mr-2 h-5 w-5\" />\n+                IPL\n+              </Button>\n+\n+              <Button size=\"sm\" color=\"blue\" onClick={handleIncomeClick}>\n+                <FaRegArrowAltCircleDown  className=\"mr-2 h-5 w-5\" />\n+                Masuk\n+              </Button>\n+              <Button size=\"sm\" color=\"failure\" onClick={handleExpenseClick}>\n+                Keluar\n+                <FaRegArrowAltCircleUp  className=\"ml-2 h-5 w-5\" />\n+              </Button>\n+              </div>\n+          </Card>\n+\n+          <TransactionDrawer\n+            isOpen={isDrawerOpen}\n+            onClose={() => setIsDrawerOpen(false)}\n+            onSubmit={transactionToEdit ? handleUpdateTransaction : handleDrawerSubmit}\n+            transactionType={currentTransactionType}\n+            transactionToEdit={transactionToEdit}\n+          />\n+\n+          <div className=\"max-w-md mb-4 flex\">\n+\n+            <TextInput \n+              name=\"name\"\n+              placeholder=\"Cari\"\n+              value={searchTerm}\n+              onChange={handleSearchChange}\n+              className=\"mr-2 w-3/5\"\n+              icon={HiOutlineSearch} \n+            />\n+\n+            <FilterTransactions className=\"w-2/5\" setTransactions={setTransactions} initialTransaction={reTransactions} />\n+\n+          </div>\n+\n+          <div className='overflow-x-auto'>\n+            <Table hoverable>\n+              <Table.Head>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 w-3/4'>Keterangan</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tanggal</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Nominal</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tipe</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Status</Table.HeadCell>\n+                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>\n+                    <span className=\"sr-only\">Edit</span>\n+                </Table.HeadCell>\n+              </Table.Head>\n+              <Table.Body className=\"divide-y\">\n+                \n+                {currentPageData.map((transaction, index) => ( \n+                  <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n+                    <Table.Cell className={`py-2 px-2 md:py-3 md:px-3 ${getTextColor(transaction.transaction_type)}`}>\n+                      <span className='flex items-start content-start'>\n+                        <span>{getTypeIcon(transaction.transaction_type)} </span>\n+                        <span className=\"ml-2\">{transaction.description}</span> \n+                      </span>\n+                    </Table.Cell>\n+                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}</Table.Cell>\n+                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{formatCurrency(transaction.amount)}</Table.Cell>\n+                    \n+                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n+                      <span className='flex items-center'>\n+                        {transaction.payment_type} \n+                      </span>\n+                    </Table.Cell>\n+                    <Table.Cell className={`items-center flex justify-center content-center py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n+                      <span className='flex items-center'>\n+                        {getStatusIcon(transaction.status)} \n+                      </span>\n+                    </Table.Cell>\n+                    <Table.Cell className='py-2 px-2 md:py-3 md:px-3 text-xs md:text-base'>\n+                      <Dropdown  className=\"relative z-50 cursor-pointer\" align=\"right\" label=\"\" renderTrigger={() => <span><FaEllipsisH  className=\"h-4 w-4 cursor-pointer\" /></span>}>\n+                        <Dropdown.Item onClick={() => handleEditTransaction(transaction._id)}><FaRegEdit className='mr-1'/><span>Edit</span></Dropdown.Item>\n+                        <Dropdown.Item><FaEye className='mr-1'/><span>View</span></Dropdown.Item>\n+                        <Dropdown.Item onClick={() => handleDeleteTransaction(transaction._id)} ><FaRegTrashAlt className='mr-1' /><span>Delete</span></Dropdown.Item>\n+                      </Dropdown>\n+\n+                    </Table.Cell>\n+                </Table.Row>\n+\n+                ))}\n+              </Table.Body>\n+            </Table>\n+          </div>\n+          <nav className='py-6'>\n+          <ReactPaginate\n+                previousLabel={'Previous'}\n+                nextLabel={'Next'}\n+                breakLabel={'...'}\n+                pageCount={Math.ceil(filteredTransactions.length / ITEMS_PER_PAGE)}\n+                marginPagesDisplayed={2}\n+                pageRangeDisplayed={5}\n+                onPageChange={handlePageClick}\n+                containerClassName={'pagination flex justify-center -space-x-px text-sm'}\n+                pageClassName={'page-item'}\n+                pageLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                previousClassName={'page-item'}\n+                previousLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                nextClassName={'page-item'}\n+                nextLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                breakClassName={'page-item'}\n+                breakLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n+                activeClassName={'active'}\n+                activeLinkClassName={'bg-gray-300'}\n+            />\n+          </nav>\n+\n+        </section>\n+        \n+        <Modal\n+          show={showDeleteModal}\n+          size=\"md\"\n+          popup\n+          onClose={() => setShowDeleteModal(false)}\n+        >\n+          <Modal.Header />\n+          <Modal.Body>\n+          <div className=\"text-center\">\n+            <HiOutlineExclamationCircle className=\"mx-auto mb-4 h-14 w-14 text-gray-400 dark:text-gray-200\" />\n+            <h3 className=\"mb-5 text-lg font-normal text-gray-500 dark:text-gray-400\">\n+            Apakah Anda yakin ingin menghapus transaksi ini?\n+            </h3>\n+            <div className=\"flex justify-center gap-4\">\n+              <Button color=\"failure\" onClick={handleConfirmDelete}>\n+                Hapus\n+              </Button>\n+              <Button color=\"gray\" onClick={() => setShowDeleteModal(false)}>\n+                Batal\n+              </Button>\n+            </div>\n+          </div>\n+          </Modal.Body>\n+          \n+        </Modal>         \n+\n+      </div>\n+      \n+      \n+    </main>\n+    </>\n+  );\n+}\n+\n+export const getServerSideProps = async (context) => {\n+  const session = await getSession(context);\n+  \n+  if (!session) {\n+      return {\n+          redirect: {\n+              destination: '/',\n+              permanent: false,\n+          },\n+      };\n+  }\n+\n+  try {\n+      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n+          headers: {\n+              Authorization: `Bearer ${session.accessToken}`,\n+          },\n+      });\n+      return {\n+          props: {\n+            initialTransaction: res.data,\n+          },\n+      };\n+  } catch (error) {\n+      console.error('Error fetching houses data:', error);\n+      return {\n+          props: {\n+            initialTransaction: [],\n+          },\n+      };\n+  }\n+};\n+\n+export default Transaction;\n"
                },
                {
                    "date": 1722424832898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,13 +65,15 @@\n       );\n       setAlertType('success');\n       setAlertMessage('Transaksi berhasil dihapus');\n       setShowAlert(true);\n+      handleAlertTimeout(3000);\n       fetchTransactions();\n     } catch (error) {\n       setAlertType('failure');\n       setAlertMessage('Gagal menghapus transaksi');\n       setShowAlert(true);\n+      handleAlertTimeout(3000);\n       console.error('Error deleting transaction:', error);\n     } finally {\n       setShowDeleteModal(false);\n     }\n@@ -464,469 +466,4 @@\n   }\n };\n \n export default Transaction;\n-// pages/home.js\n-import { getSession, useSession } from 'next-auth/react';\n-import { useEffect,useState } from 'react';\n-import axios from 'axios';\n-import { useRequireAuth } from '../../utils/authUtils'; \n-import ReactPaginate from 'react-paginate';\n-\n-import Header from '../../components/Header';\n-import SideMenu from '../../components/dashboard/Sidebar';\n-import TransactionDrawer from '../../components/dashboard/TransactionDrawer';\n-import Spinner from '../../components/Spinner';\n-import { HiOutlineExclamationCircle } from \"react-icons/hi\";\n-import { Card, Button,TextInput,Drawer,Select, Table,Dropdown, Alert,Modal } from \"flowbite-react\";\n-import { HiOutlineSearch } from \"react-icons/hi\";\n-import {  FaCheckCircle, FaTimesCircle, FaHourglassHalf,FaRegEdit,FaEye,FaRegTrashAlt } from 'react-icons/fa';\n-import { FaRegArrowAltCircleDown } from \"react-icons/fa\";\n-import { FaRegArrowAltCircleUp } from \"react-icons/fa\";\n-import { FaEllipsisH } from \"react-icons/fa\";\n-import { FaExchangeAlt } from \"react-icons/fa\";\n-import FilterTransactions from '../../components/FilterTransactions';\n-import moment from 'moment';\n-import 'moment/locale/id';\n-moment.locale('id');\n-\n-const ITEMS_PER_PAGE = 15;\n-\n-\n-const Transaction = ({ initialTransaction }) =>  {\n-  const { useAuthRedirect } = useRequireAuth(['admin', 'editor', 'superadmin']);\n-  useAuthRedirect();\n-  const [transactions, setTransactions] = useState([initialTransaction]);\n-  const [reTransactions, setReTransactions] = useState([initialTransaction])\n-  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n-  const [loading, setLoading] = useState(true);\n-  const { data: session, status } = useSession();\n-  const [searchTerm, setSearchTerm] = useState('');\n-  const [currentPage, setCurrentPage] = useState(0);\n-\n-  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n-  const [currentTransactionType, setCurrentTransactionType] = useState('');\n-\n-  const [showAlert, setShowAlert] = useState(false);\n-  const [alertMessage, setAlertMessage] = useState('');\n-  const [alertType, setAlertType] = useState('success');\n-  \n-  const [showDeleteModal, setShowDeleteModal] = useState(false);\n-  const [transactionIdToDelete, setTransactionIdToDelete] = useState(null);\n-  const [transactionToEdit, setTransactionToEdit] = useState(null);\n-\n-  const handleDeleteTransaction = async (transactionId) => {\n-    //console.log(transactionId)\n-    setTransactionIdToDelete(transactionId);\n-    setShowDeleteModal(true);\n-  };\n-\n-  const handleConfirmDelete = async () => {\n-    try {\n-      const response = await axios.delete(\n-        `${process.env.NEXT_PUBLIC_API_URL}/transactions/delete/${transactionIdToDelete}`,\n-        {\n-          headers: {\n-            Authorization: `Bearer ${session.accessToken}`,\n-          },\n-        }\n-      );\n-      setAlertType('success');\n-      setAlertMessage('Transaksi berhasil dihapus');\n-      setShowAlert(true);\n-      fetchTransactions();\n-    } catch (error) {\n-      setAlertType('failure');\n-      setAlertMessage('Gagal menghapus transaksi');\n-      setShowAlert(true);\n-      console.error('Error deleting transaction:', error);\n-    } finally {\n-      setShowDeleteModal(false);\n-    }\n-  };\n-\n-  const handleEditTransaction = async (transactionId) => {\n-    try {\n-      const response = await axios.get(\n-        `${process.env.NEXT_PUBLIC_API_URL}/transactions/${transactionId}`,\n-        {\n-          headers: {\n-            Authorization: `Bearer ${session.accessToken}`,\n-          },\n-        }\n-      );\n-      setTransactionToEdit(response.data);\n-      setIsDrawerOpen(true);\n-    } catch (error) {\n-      console.error('Error fetching transaction data:', error);\n-    }\n-  };\n-\n-  const handleUpdateTransaction = async (transactionData) => {\n-    try {\n-      const response = await axios.put(\n-        `${process.env.NEXT_PUBLIC_API_URL}/transactions/update/${transactionToEdit._id}`,\n-        transactionData,\n-        {\n-          headers: {\n-            Authorization: `Bearer ${session.accessToken}`,\n-          },\n-        }\n-      );\n-      setAlertType('success');\n-      setAlertMessage('Transaksi berhasil diupdate');\n-      setShowAlert(true);\n-      fetchTransactions();\n-    } catch (error) {\n-      setAlertType('failure');\n-      setAlertMessage('Gagal mengupdate transaksi');\n-      setShowAlert(true);\n-      console.error('Error updating transaction:', error);\n-    }\n-  };\n-\n-  const toggleSidebar = () => {\n-    setIsSidebarOpen(!isSidebarOpen);\n-  };\n-\n-  const formatCurrency = (amount) => {\n-    return new Intl.NumberFormat('id-ID', {\n-        style: 'currency',\n-        currency: 'IDR',\n-        minimumFractionDigits: 0,\n-    }).format(amount);\n-  };\n-\n-  const fetchTransactions = async () => {\n-    try {\n-        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n-            headers: {\n-              Authorization: `Bearer ${session.accessToken}`,\n-            },\n-        });\n-        setTransactions(res.data.data);\n-        setReTransactions(res.data.data);\n-        setLoading(false);\n-    } catch (error) {\n-        console.error('Error fetching houses data:', error);\n-        setLoading(false);\n-    }\n- };\n-\n-  useEffect(() => {\n-    if (session) {\n-        fetchTransactions();\n-    }\n-\n-  }, [session, status]);\n-\n-  const handleSearchChange = (event) => {\n-    setSearchTerm(event.target.value);\n-  };\n-\n-  const filteredTransactions = transactions.filter(transaction => \n-    (transaction.description && transaction.description.toLowerCase().includes(searchTerm.toLowerCase()))\n-  );\n-\n-  const offset = currentPage * ITEMS_PER_PAGE;\n-  const currentPageData = filteredTransactions.slice(offset, offset + ITEMS_PER_PAGE);\n-\n-  const handlePageClick = (data) => {\n-    setCurrentPage(data.selected);\n-  };\n-\n-\n-  const getStatusIcon = (status) => {\n-    switch (status) {\n-      case 'berhasil':\n-        return <FaCheckCircle className=\"text-green-500\" />;\n-      case 'gagal':\n-        return <FaTimesCircle className=\"text-red-500\" />;\n-      case 'sedang dicek':\n-        return <FaHourglassHalf className=\"text-yellow-500\" />;\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const getTypeIcon = (type) => {\n-    switch (type) {\n-      case 'income':\n-        return <FaRegArrowAltCircleDown  className=\"text-blue-700 h-4 w-4 md:h-5 md:w-5 \" />;\n-      case 'expense':\n-        return <FaRegArrowAltCircleUp  className=\"text-red-700 h-4 w-4 md:h-5 md:w-5 \" />;\n-      case 'ipl':\n-        return <FaExchangeAlt  className=\"text-green-700  h-3 w-3 md:h-4 md:w-4 \" />;\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const getTextColor = (type) => {\n-    switch (type) {\n-      case 'income':\n-        return \"text-blue-700\";\n-      case 'expense':\n-        return \"text-red-700\";\n-      case 'ipl':\n-        return \"text-green-700\";\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const handlePaymentClick = () => {\n-    setCurrentTransactionType('ipl');\n-    setIsDrawerOpen(true);\n-  };\n-\n-  const handleIncomeClick = () => {\n-    setCurrentTransactionType('income');\n-    setIsDrawerOpen(true);\n-  };\n-\n-  const handleExpenseClick = () => {\n-    setCurrentTransactionType('expense');\n-    setIsDrawerOpen(true);\n-  };\n-\n-  const handleDrawerSubmit = async (transactionData) => {\n-    try {\n-      const response = await axios.post(\n-        `${process.env.NEXT_PUBLIC_API_URL}/transactions/create`, \n-        transactionData, // Hanya data yang dikirim dalam body\n-        {\n-          headers: {\n-            Authorization: `Bearer ${session.accessToken}`, // Tempatkan headers di opsi konfigurasi\n-            'Content-Type': 'application/json',\n-          },\n-        }\n-      );\n-      setAlertType('success');\n-      setAlertMessage('Transaksi berhasil ditambahkan');\n-      setShowAlert(true);\n-     // alert('Transaksi berhasil ditambahkan');\n-      // Refresh data atau navigasi sesuai kebutuhan\n-      fetchTransactions();\n-    } catch (error) {\n-      setAlertType('failure');\n-      setAlertMessage('Gagal menambahkan transaksi');\n-      setShowAlert(true);\n-      console.error('Error creating transaction:', error);\n-    }\n-  };\n-  \n-  const handleAlertDismiss = () => {\n-    handleAlertTimeout(0);\n-  };\n-\n-  const handleAlertTimeout = (timeoutDuration) => {\n-    setTimeout(() => {\n-      setShowAlert(false);\n-    }, timeoutDuration);\n-  };\n-\n-  if (loading) {\n-    return <Spinner />;\n-  }\n-\n- // console.log(transactions)\n-\n-  return (\n-    <>\n-   \n-    <Header toggleSidebar={toggleSidebar}/>\n-    <main className='max-w-screen-xl mx-auto'>\n-      <div className='w-full'>\n-        <SideMenu isOpen={isSidebarOpen}/>\n-        <section className='mt-14 px-5 py-5 md:px-8 sm:ml-64'>\n-        {showAlert && (\n-            <Alert className='' color={alertType === 'success' ? 'success' : 'failure'} onDismiss={handleAlertDismiss}>\n-                <span className=\"font-medium\">{alertMessage}</span>\n-            </Alert>\n-        )}\n-          <h1 className='text-xl mb-4 font-semibold text-gray-900 sm:text-2xl dark:text-white'>Data Transaksi</h1>\n-\n-          <Card className='w-full mb-10'>\n-            <h3 className='font-semibold mb-3'>Buat Transaksi Baru</h3>\n-              <div className='flex flex-wrap gap-2'>\n-              <Button size=\"sm\" color=\"success\" onClick={handlePaymentClick}>\n-                <FaExchangeAlt  className=\"mr-2 h-5 w-5\" />\n-                IPL\n-              </Button>\n-\n-              <Button size=\"sm\" color=\"blue\" onClick={handleIncomeClick}>\n-                <FaRegArrowAltCircleDown  className=\"mr-2 h-5 w-5\" />\n-                Masuk\n-              </Button>\n-              <Button size=\"sm\" color=\"failure\" onClick={handleExpenseClick}>\n-                Keluar\n-                <FaRegArrowAltCircleUp  className=\"ml-2 h-5 w-5\" />\n-              </Button>\n-              </div>\n-          </Card>\n-\n-          <TransactionDrawer\n-            isOpen={isDrawerOpen}\n-            onClose={() => setIsDrawerOpen(false)}\n-            onSubmit={transactionToEdit ? handleUpdateTransaction : handleDrawerSubmit}\n-            transactionType={currentTransactionType}\n-            transactionToEdit={transactionToEdit}\n-          />\n-\n-          <div className=\"max-w-md mb-4 flex\">\n-\n-            <TextInput \n-              name=\"name\"\n-              placeholder=\"Cari\"\n-              value={searchTerm}\n-              onChange={handleSearchChange}\n-              className=\"mr-2 w-3/5\"\n-              icon={HiOutlineSearch} \n-            />\n-\n-            <FilterTransactions className=\"w-2/5\" setTransactions={setTransactions} initialTransaction={reTransactions} />\n-\n-          </div>\n-\n-          <div className='overflow-x-auto'>\n-            <Table hoverable>\n-              <Table.Head>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 w-3/4'>Keterangan</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tanggal</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Nominal</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tipe</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Status</Table.HeadCell>\n-                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>\n-                    <span className=\"sr-only\">Edit</span>\n-                </Table.HeadCell>\n-              </Table.Head>\n-              <Table.Body className=\"divide-y\">\n-                \n-                {currentPageData.map((transaction, index) => ( \n-                  <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-                    <Table.Cell className={`py-2 px-2 md:py-3 md:px-3 ${getTextColor(transaction.transaction_type)}`}>\n-                      <span className='flex items-start content-start'>\n-                        <span>{getTypeIcon(transaction.transaction_type)} </span>\n-                        <span className=\"ml-2\">{transaction.description}</span> \n-                      </span>\n-                    </Table.Cell>\n-                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}</Table.Cell>\n-                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{formatCurrency(transaction.amount)}</Table.Cell>\n-                    \n-                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n-                      <span className='flex items-center'>\n-                        {transaction.payment_type} \n-                      </span>\n-                    </Table.Cell>\n-                    <Table.Cell className={`items-center flex justify-center content-center py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n-                      <span className='flex items-center'>\n-                        {getStatusIcon(transaction.status)} \n-                      </span>\n-                    </Table.Cell>\n-                    <Table.Cell className='py-2 px-2 md:py-3 md:px-3 text-xs md:text-base'>\n-                      <Dropdown  className=\"relative z-50 cursor-pointer\" align=\"right\" label=\"\" renderTrigger={() => <span><FaEllipsisH  className=\"h-4 w-4 cursor-pointer\" /></span>}>\n-                        <Dropdown.Item onClick={() => handleEditTransaction(transaction._id)}><FaRegEdit className='mr-1'/><span>Edit</span></Dropdown.Item>\n-                        <Dropdown.Item><FaEye className='mr-1'/><span>View</span></Dropdown.Item>\n-                        <Dropdown.Item onClick={() => handleDeleteTransaction(transaction._id)} ><FaRegTrashAlt className='mr-1' /><span>Delete</span></Dropdown.Item>\n-                      </Dropdown>\n-\n-                    </Table.Cell>\n-                </Table.Row>\n-\n-                ))}\n-              </Table.Body>\n-            </Table>\n-          </div>\n-          <nav className='py-6'>\n-          <ReactPaginate\n-                previousLabel={'Previous'}\n-                nextLabel={'Next'}\n-                breakLabel={'...'}\n-                pageCount={Math.ceil(filteredTransactions.length / ITEMS_PER_PAGE)}\n-                marginPagesDisplayed={2}\n-                pageRangeDisplayed={5}\n-                onPageChange={handlePageClick}\n-                containerClassName={'pagination flex justify-center -space-x-px text-sm'}\n-                pageClassName={'page-item'}\n-                pageLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                previousClassName={'page-item'}\n-                previousLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                nextClassName={'page-item'}\n-                nextLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                breakClassName={'page-item'}\n-                breakLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n-                activeClassName={'active'}\n-                activeLinkClassName={'bg-gray-300'}\n-            />\n-          </nav>\n-\n-        </section>\n-        \n-        <Modal\n-          show={showDeleteModal}\n-          size=\"md\"\n-          popup\n-          onClose={() => setShowDeleteModal(false)}\n-        >\n-          <Modal.Header />\n-          <Modal.Body>\n-          <div className=\"text-center\">\n-            <HiOutlineExclamationCircle className=\"mx-auto mb-4 h-14 w-14 text-gray-400 dark:text-gray-200\" />\n-            <h3 className=\"mb-5 text-lg font-normal text-gray-500 dark:text-gray-400\">\n-            Apakah Anda yakin ingin menghapus transaksi ini?\n-            </h3>\n-            <div className=\"flex justify-center gap-4\">\n-              <Button color=\"failure\" onClick={handleConfirmDelete}>\n-                Hapus\n-              </Button>\n-              <Button color=\"gray\" onClick={() => setShowDeleteModal(false)}>\n-                Batal\n-              </Button>\n-            </div>\n-          </div>\n-          </Modal.Body>\n-          \n-        </Modal>         \n-\n-      </div>\n-      \n-      \n-    </main>\n-    </>\n-  );\n-}\n-\n-export const getServerSideProps = async (context) => {\n-  const session = await getSession(context);\n-  \n-  if (!session) {\n-      return {\n-          redirect: {\n-              destination: '/',\n-              permanent: false,\n-          },\n-      };\n-  }\n-\n-  try {\n-      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n-          headers: {\n-              Authorization: `Bearer ${session.accessToken}`,\n-          },\n-      });\n-      return {\n-          props: {\n-            initialTransaction: res.data,\n-          },\n-      };\n-  } catch (error) {\n-      console.error('Error fetching houses data:', error);\n-      return {\n-          props: {\n-            initialTransaction: [],\n-          },\n-      };\n-  }\n-};\n-\n-export default Transaction;\n"
                }
            ],
            "date": 1722400040456,
            "name": "Commit-0",
            "content": "// pages/home.js\nimport { getSession, useSession } from 'next-auth/react';\nimport { useEffect,useState } from 'react';\nimport axios from 'axios';\nimport { useRequireAuth } from '../../utils/authUtils'; \nimport ReactPaginate from 'react-paginate';\n\nimport Header from '../../components/Header';\nimport SideMenu from '../../components/dashboard/Sidebar';\nimport TransactionDrawer from '../../components/dashboard/TransactionDrawer';\nimport Spinner from '../../components/Spinner';\nimport { Card, Button,TextInput,Drawer,Select, Table,Dropdown, Alert  } from \"flowbite-react\";\nimport { HiOutlineSearch } from \"react-icons/hi\";\nimport {  FaCheckCircle, FaTimesCircle, FaHourglassHalf } from 'react-icons/fa';\nimport { FaRegArrowAltCircleDown } from \"react-icons/fa\";\nimport { FaRegArrowAltCircleUp } from \"react-icons/fa\";\nimport { FaEllipsisH } from \"react-icons/fa\";\nimport { FaExchangeAlt } from \"react-icons/fa\";\nimport FilterTransactions from '../../components/FilterTransactions';\nimport moment from 'moment';\nimport 'moment/locale/id';\nmoment.locale('id');\n\nconst ITEMS_PER_PAGE = 15;\n\n\nconst Transaction = ({ initialTransaction }) =>  {\n  const { useAuthRedirect } = useRequireAuth(['admin', 'editor', 'superadmin']);\n  useAuthRedirect();\n  const [transactions, setTransactions] = useState([initialTransaction]);\n  const [reTransactions, setReTransactions] = useState([initialTransaction])\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const { data: session, status } = useSession();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [currentPage, setCurrentPage] = useState(0);\n\n  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n  const [currentTransactionType, setCurrentTransactionType] = useState('');\n\n  const [showAlert, setShowAlert] = useState(false);\n  const [alertMessage, setAlertMessage] = useState('');\n  const [alertType, setAlertType] = useState('success');\n  \n  \n\n  const toggleSidebar = () => {\n    setIsSidebarOpen(!isSidebarOpen);\n  };\n\n  const formatCurrency = (amount) => {\n    return new Intl.NumberFormat('id-ID', {\n        style: 'currency',\n        currency: 'IDR',\n        minimumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const fetchTransactions = async () => {\n    try {\n        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n            headers: {\n              Authorization: `Bearer ${session.accessToken}`,\n            },\n        });\n        setTransactions(res.data.data);\n        setReTransactions(res.data.data);\n        setLoading(false);\n    } catch (error) {\n        console.error('Error fetching houses data:', error);\n        setLoading(false);\n    }\n };\n\n  useEffect(() => {\n    if (session) {\n        fetchTransactions();\n    }\n\n  }, [session, status]);\n\n  const handleSearchChange = (event) => {\n    setSearchTerm(event.target.value);\n  };\n\n  const filteredTransactions = transactions.filter(transaction => \n    (transaction.description && transaction.description.toLowerCase().includes(searchTerm.toLowerCase()))\n  );\n\n  const offset = currentPage * ITEMS_PER_PAGE;\n  const currentPageData = filteredTransactions.slice(offset, offset + ITEMS_PER_PAGE);\n\n  const handlePageClick = (data) => {\n    setCurrentPage(data.selected);\n  };\n\n\n  const getStatusIcon = (status) => {\n    switch (status) {\n      case 'berhasil':\n        return <FaCheckCircle className=\"text-green-500\" />;\n      case 'gagal':\n        return <FaTimesCircle className=\"text-red-500\" />;\n      case 'sedang dicek':\n        return <FaHourglassHalf className=\"text-yellow-500\" />;\n      default:\n        return null;\n    }\n  };\n\n  const getTypeIcon = (type) => {\n    switch (type) {\n      case 'income':\n        return <FaRegArrowAltCircleDown  className=\"text-blue-700 h-4 w-4 md:h-5 md:w-5 \" />;\n      case 'expense':\n        return <FaRegArrowAltCircleUp  className=\"text-red-700 h-4 w-4 md:h-5 md:w-5 \" />;\n      case 'ipl':\n        return <FaExchangeAlt  className=\"text-green-700  h-3 w-3 md:h-4 md:w-4 \" />;\n      default:\n        return null;\n    }\n  };\n\n  const getTextColor = (type) => {\n    switch (type) {\n      case 'income':\n        return \"text-blue-700\";\n      case 'expense':\n        return \"text-red-700\";\n      case 'ipl':\n        return \"text-green-700\";\n      default:\n        return null;\n    }\n  };\n\n  const handlePaymentClick = () => {\n    setCurrentTransactionType('ipl');\n    setIsDrawerOpen(true);\n  };\n\n  const handleIncomeClick = () => {\n    setCurrentTransactionType('income');\n    setIsDrawerOpen(true);\n  };\n\n  const handleExpenseClick = () => {\n    setCurrentTransactionType('expense');\n    setIsDrawerOpen(true);\n  };\n\n  const handleDrawerSubmit = async (transactionData) => {\n    try {\n      const response = await axios.post(\n        `${process.env.NEXT_PUBLIC_API_URL}/transactions/create`, \n        transactionData, // Hanya data yang dikirim dalam body\n        {\n          headers: {\n            Authorization: `Bearer ${session.accessToken}`, // Tempatkan headers di opsi konfigurasi\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n      setAlertType('success');\n      setAlertMessage('Transaksi berhasil ditambahkan');\n      setShowAlert(true);\n     // alert('Transaksi berhasil ditambahkan');\n      // Refresh data atau navigasi sesuai kebutuhan\n      fetchTransactions();\n    } catch (error) {\n      setAlertType('failure');\n      setAlertMessage('Gagal menambahkan transaksi');\n      setShowAlert(true);\n      console.error('Error creating transaction:', error);\n    }\n  };\n  \n  const handleAlertDismiss = () => {\n    setShowAlert(false);\n  };\n\n  if (loading) {\n    return <Spinner />;\n  }\n\n // console.log(transactions)\n\n  return (\n    <>\n   \n    <Header toggleSidebar={toggleSidebar}/>\n    <main className='max-w-screen-xl mx-auto'>\n      <div className='w-full'>\n        <SideMenu isOpen={isSidebarOpen}/>\n        <section className='mt-14 px-5 py-5 md:px-8 sm:ml-64'>\n        {showAlert && (\n            <Alert className='' color={alertType === 'success' ? 'success' : 'failure'} onDismiss={handleAlertDismiss}>\n                <span className=\"font-medium\">{alertMessage}</span>\n            </Alert>\n        )}\n          <h1 className='text-xl mb-4 font-semibold text-gray-900 sm:text-2xl dark:text-white'>Data Transaksi</h1>\n\n          <Card className='w-full mb-10'>\n            <h3 className='font-semibold mb-3'>Buat Transaksi Baru</h3>\n              <div className='flex flex-wrap gap-2'>\n              <Button size=\"sm\" color=\"success\" onClick={handlePaymentClick}>\n                <FaExchangeAlt  className=\"mr-2 h-5 w-5\" />\n                IPL\n              </Button>\n\n              <Button size=\"sm\" color=\"blue\" onClick={handleIncomeClick}>\n                <FaRegArrowAltCircleDown  className=\"mr-2 h-5 w-5\" />\n                Masuk\n              </Button>\n              <Button size=\"sm\" color=\"failure\" onClick={handleExpenseClick}>\n                Keluar\n                <FaRegArrowAltCircleUp  className=\"ml-2 h-5 w-5\" />\n              </Button>\n              </div>\n          </Card>\n\n          <TransactionDrawer\n            isOpen={isDrawerOpen}\n            onClose={() => setIsDrawerOpen(false)}\n            onSubmit={handleDrawerSubmit}\n            transactionType={currentTransactionType}\n          />\n\n          <div className=\"max-w-md mb-4 flex\">\n\n            <TextInput \n              name=\"name\"\n              placeholder=\"Cari\"\n              value={searchTerm}\n              onChange={handleSearchChange}\n              className=\"mr-2 w-3/5\"\n              icon={HiOutlineSearch} \n            />\n\n            <FilterTransactions className=\"w-2/5\" setTransactions={setTransactions} initialTransaction={reTransactions} />\n\n          </div>\n\n          <div className='overflow-x-auto'>\n            <Table hoverable>\n              <Table.Head>\n                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 w-3/4'>Keterangan</Table.HeadCell>\n                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tanggal</Table.HeadCell>\n                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Nominal</Table.HeadCell>\n                {/* <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Status</Table.HeadCell> */}\n                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>Tipe</Table.HeadCell>\n                <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3'>\n                    <span className=\"sr-only\">Edit</span>\n                </Table.HeadCell>\n              </Table.Head>\n              <Table.Body className=\"divide-y\">\n                \n                {currentPageData.map((transaction, index) => ( \n                  <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n                    <Table.Cell className={`py-2 px-2 md:py-3 md:px-3 ${getTextColor(transaction.transaction_type)}`}>\n                      <span className='flex items-start content-start'>\n                        <span>{getTypeIcon(transaction.transaction_type)} </span>\n                        <span className=\"ml-2\">{transaction.description}</span> \n                      </span>\n                    </Table.Cell>\n                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}</Table.Cell>\n                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>{formatCurrency(transaction.amount)}</Table.Cell>\n                    \n                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n                      <span className='flex items-center'>\n                        {getStatusIcon(transaction.payment_type)} \n                      </span>\n                    </Table.Cell>\n                    <Table.Cell className={`items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base ${getTextColor(transaction.transaction_type)}`}>\n                      <span className='flex items-center'>\n                        {getStatusIcon(transaction.status)} \n                      </span>\n                    </Table.Cell>\n                    <Table.Cell className='py-2 px-2 md:py-3 md:px-3 text-xs md:text-base'>\n                      <Dropdown  className=\"relative z-10\" align=\"right\" label=\"\" renderTrigger={() => <span><FaEllipsisH  className=\"h-4 w-4\" /></span>}>\n                        <Dropdown.Item>Edit</Dropdown.Item>\n                        <Dropdown.Item>View</Dropdown.Item>\n                        <Dropdown.Item>Delete</Dropdown.Item>\n                      </Dropdown>\n\n                    </Table.Cell>\n                </Table.Row>\n\n                ))}\n              </Table.Body>\n            </Table>\n          </div>\n          <nav className='py-6'>\n          <ReactPaginate\n                previousLabel={'Previous'}\n                nextLabel={'Next'}\n                breakLabel={'...'}\n                pageCount={Math.ceil(filteredTransactions.length / ITEMS_PER_PAGE)}\n                marginPagesDisplayed={2}\n                pageRangeDisplayed={5}\n                onPageChange={handlePageClick}\n                containerClassName={'pagination flex justify-center -space-x-px text-sm'}\n                pageClassName={'page-item'}\n                pageLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n                previousClassName={'page-item'}\n                previousLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n                nextClassName={'page-item'}\n                nextLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n                breakClassName={'page-item'}\n                breakLinkClassName={'flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}\n                activeClassName={'active'}\n                activeLinkClassName={'bg-gray-300'}\n            />\n          </nav>\n\n        </section>\n\n      </div>\n      \n      \n    </main>\n    </>\n  );\n}\n\nexport const getServerSideProps = async (context) => {\n  const session = await getSession(context);\n  \n  if (!session) {\n      return {\n          redirect: {\n              destination: '/',\n              permanent: false,\n          },\n      };\n  }\n\n  try {\n      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n          headers: {\n              Authorization: `Bearer ${session.accessToken}`,\n          },\n      });\n      return {\n          props: {\n            initialTransaction: res.data,\n          },\n      };\n  } catch (error) {\n      console.error('Error fetching houses data:', error);\n      return {\n          props: {\n            initialTransaction: [],\n          },\n      };\n  }\n};\n\nexport default Transaction;\n"
        }
    ]
}