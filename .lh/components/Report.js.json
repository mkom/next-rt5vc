{
    "sourceFile": "components/Report.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 47,
            "patches": [
                {
                    "date": 1722339068735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1722339150047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -300,8 +300,49 @@\n                           <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white '>Nominal</Table.HeadCell>\n                           <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white '></Table.HeadCell>\n                       </Table.Head>\n                       <Table.Body className=\"divide-y\">\n+                      {Object.keys(groupedTransactions).map((transactionType, index) => (\n+    <React.Fragment key={index}>\n+      <Table.Row className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n+        <Table.Cell colSpan=\"3\" className=\"py-2 px-2 md:py-3 md:px-3 text-xs md:text-base  font-bold trans\">\n+          {transactionType === 'ipl' ? (\n+            <span>{transactionType}</span>\n+          ) : (\n+            <Accordion>\n+              <Accordion.Item>\n+                <Accordion.Header>{transactionType}</Accordion.Header>\n+                <Accordion.Panel>\n+                  {groupedTransactions[transactionType].map((transaction, subIndex) => (\n+                    <Table.Row key={subIndex} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n+                      <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                        <span className='flex items-start'>\n+                          <span>{getTypeIcon(transaction.transaction_type)} </span>\n+                          <span className=\"ml-2\">{transaction.description}</span>\n+                        </span>\n+                      </Table.Cell>\n+                      <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                        {moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}\n+                      </Table.Cell>\n+                      <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                        {formatCurrency(transaction.amount)}\n+                      </Table.Cell>\n+                    </Table.Row>\n+                  ))}\n+                </Accordion.Panel>\n+              </Accordion.Item>\n+            </Accordion>\n+          )}\n+        </Table.Cell>\n+      </Table.Row>\n+      {transactionType !== 'ipl' && (\n+        <Table.Row className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n+          <Table.Cell colSpan=\"2\" className=\"text-right font-bold\">Total {transactionType}</Table.Cell>\n+          <Table.Cell className=\"text-right font-bold\">{formatCurrency(groupedTransactions[transactionType].reduce((acc, curr) => acc + curr.amount, 0))}</Table.Cell>\n+        </Table.Row>\n+      )}\n+    </React.Fragment>\n+  ))}\n                         \n                       {/* {transactions && transactions.length > 0 && transactions[0] !== undefined ? (\n                           transactions.map((transaction, index) => (\n                               <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n"
                },
                {
                    "date": 1722339194062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -303,44 +303,30 @@\n                       <Table.Body className=\"divide-y\">\n                       {Object.keys(groupedTransactions).map((transactionType, index) => (\n     <React.Fragment key={index}>\n       <Table.Row className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-        <Table.Cell colSpan=\"3\" className=\"py-2 px-2 md:py-3 md:px-3 text-xs md:text-base  font-bold trans\">\n-          {transactionType === 'ipl' ? (\n-            <span>{transactionType}</span>\n-          ) : (\n-            <Accordion>\n-              <Accordion.Item>\n-                <Accordion.Header>{transactionType}</Accordion.Header>\n-                <Accordion.Panel>\n-                  {groupedTransactions[transactionType].map((transaction, subIndex) => (\n-                    <Table.Row key={subIndex} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-                      <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                        <span className='flex items-start'>\n-                          <span>{getTypeIcon(transaction.transaction_type)} </span>\n-                          <span className=\"ml-2\">{transaction.description}</span>\n-                        </span>\n-                      </Table.Cell>\n-                      <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                        {moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}\n-                      </Table.Cell>\n-                      <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                        {formatCurrency(transaction.amount)}\n-                      </Table.Cell>\n-                    </Table.Row>\n-                  ))}\n-                </Accordion.Panel>\n-              </Accordion.Item>\n-            </Accordion>\n-          )}\n-        </Table.Cell>\n+        <Table.Cell colSpan=\"3\" className=\"text-center font-bold\">{transactionType}</Table.Cell>\n       </Table.Row>\n-      {transactionType !== 'ipl' && (\n-        <Table.Row className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-          <Table.Cell colSpan=\"2\" className=\"text-right font-bold\">Total {transactionType}</Table.Cell>\n-          <Table.Cell className=\"text-right font-bold\">{formatCurrency(groupedTransactions[transactionType].reduce((acc, curr) => acc + curr.amount, 0))}</Table.Cell>\n+      {groupedTransactions[transactionType].map((transaction, subIndex) => (\n+        <Table.Row key={subIndex} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n+          <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+            <span className='flex items-start'>\n+              <span>{getTypeIcon(transaction.transaction_type)} </span>\n+              <span className=\"ml-2\">{transaction.description}</span>\n+            </span>\n+          </Table.Cell>\n+          <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+            {moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}\n+          </Table.Cell>\n+          <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+            {formatCurrency(transaction.amount)}\n+          </Table.Cell>\n         </Table.Row>\n-      )}\n+      ))}\n+      <Table.Row className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n+        <Table.Cell colSpan=\"2\" className=\"text-right font-bold\">Total {transactionType}</Table.Cell>\n+        <Table.Cell className=\"text-right font-bold\">{formatCurrency(groupedTransactions[transactionType].reduce((acc, curr) => acc + curr.amount, 0))}</Table.Cell>\n+      </Table.Row>\n     </React.Fragment>\n   ))}\n                         \n                       {/* {transactions && transactions.length > 0 && transactions[0] !== undefined ? (\n"
                },
                {
                    "date": 1722339233265,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -301,34 +301,34 @@\n                           <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white '></Table.HeadCell>\n                       </Table.Head>\n                       <Table.Body className=\"divide-y\">\n                       {Object.keys(groupedTransactions).map((transactionType, index) => (\n-    <React.Fragment key={index}>\n-      <Table.Row className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-        <Table.Cell colSpan=\"3\" className=\"text-center font-bold\">{transactionType}</Table.Cell>\n-      </Table.Row>\n-      {groupedTransactions[transactionType].map((transaction, subIndex) => (\n-        <Table.Row key={subIndex} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-          <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-            <span className='flex items-start'>\n-              <span>{getTypeIcon(transaction.transaction_type)} </span>\n-              <span className=\"ml-2\">{transaction.description}</span>\n-            </span>\n-          </Table.Cell>\n-          <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-            {moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}\n-          </Table.Cell>\n-          <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-            {formatCurrency(transaction.amount)}\n-          </Table.Cell>\n-        </Table.Row>\n-      ))}\n-      <Table.Row className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-        <Table.Cell colSpan=\"2\" className=\"text-right font-bold\">Total {transactionType}</Table.Cell>\n-        <Table.Cell className=\"text-right font-bold\">{formatCurrency(groupedTransactions[transactionType].reduce((acc, curr) => acc + curr.amount, 0))}</Table.Cell>\n-      </Table.Row>\n-    </React.Fragment>\n-  ))}\n+                        <React.Fragment key={index}>\n+                          <Table.Row className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n+                            <Table.Cell colSpan=\"3\" className=\"text-center font-bold\">{transactionType}</Table.Cell>\n+                          </Table.Row>\n+                          {groupedTransactions[transactionType].map((transaction, subIndex) => (\n+                            <Table.Row key={subIndex} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n+                              <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                <span className='flex items-start'>\n+                                  <span>{getTypeIcon(transaction.transaction_type)} </span>\n+                                  <span className=\"ml-2\">{transaction.description}</span>\n+                                </span>\n+                              </Table.Cell>\n+                              <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                {moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}\n+                              </Table.Cell>\n+                              <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                {formatCurrency(transaction.amount)}\n+                              </Table.Cell>\n+                            </Table.Row>\n+                          ))}\n+                          <Table.Row className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n+                            <Table.Cell colSpan=\"2\" className=\"text-right font-bold\">Total {transactionType}</Table.Cell>\n+                            <Table.Cell className=\"text-right font-bold\">{formatCurrency(groupedTransactions[transactionType].reduce((acc, curr) => acc + curr.amount, 0))}</Table.Cell>\n+                          </Table.Row>\n+                        </React.Fragment>\n+                      ))}\n                         \n                       {/* {transactions && transactions.length > 0 && transactions[0] !== undefined ? (\n                           transactions.map((transaction, index) => (\n                               <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n"
                },
                {
                    "date": 1722339318779,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -302,11 +302,14 @@\n                       </Table.Head>\n                       <Table.Body className=\"divide-y\">\n                       {Object.keys(groupedTransactions).map((transactionType, index) => (\n                         <React.Fragment key={index}>\n-                          <Table.Row className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-                            <Table.Cell colSpan=\"3\" className=\"text-center font-bold\">{transactionType}</Table.Cell>\n-                          </Table.Row>\n+                          {groupedTransactions[transactionType].length > 0 && (\n+                             <Table.Row className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n+                             <Table.Cell colSpan=\"3\" className=\"text-center font-bold\">{transactionType}</Table.Cell>\n+                              </Table.Row>\n+                          )}\n+                         \n                           {groupedTransactions[transactionType].map((transaction, subIndex) => (\n                             <Table.Row key={subIndex} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n                               <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n                                 <span className='flex items-start'>\n"
                },
                {
                    "date": 1722339340246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -304,9 +304,9 @@\n                       {Object.keys(groupedTransactions).map((transactionType, index) => (\n                         <React.Fragment key={index}>\n                           {groupedTransactions[transactionType].length > 0 && (\n                              <Table.Row className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-                             <Table.Cell colSpan=\"3\" className=\"text-center font-bold\">{transactionType}</Table.Cell>\n+                             <Table.Cell colSpan=\"3\" className=\"text-center font-bold\">{transactionType === 'ipl' ? 'Pemasukan IPL' : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}</Table.Cell>\n                               </Table.Row>\n                           )}\n                          \n                           {groupedTransactions[transactionType].map((transaction, subIndex) => (\n"
                },
                {
                    "date": 1722339367156,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -304,9 +304,9 @@\n                       {Object.keys(groupedTransactions).map((transactionType, index) => (\n                         <React.Fragment key={index}>\n                           {groupedTransactions[transactionType].length > 0 && (\n                              <Table.Row className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-                             <Table.Cell colSpan=\"3\" className=\"text-center font-bold\">{transactionType === 'ipl' ? 'Pemasukan IPL' : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}</Table.Cell>\n+                             <Table.Cell colSpan=\"4\" className=\"py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold\">{transactionType === 'ipl' ? 'Pemasukan IPL' : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}</Table.Cell>\n                               </Table.Row>\n                           )}\n                          \n                           {groupedTransactions[transactionType].map((transaction, subIndex) => (\n"
                },
                {
                    "date": 1722339442244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -303,11 +303,12 @@\n                       <Table.Body className=\"divide-y\">\n                       {Object.keys(groupedTransactions).map((transactionType, index) => (\n                         <React.Fragment key={index}>\n                           {groupedTransactions[transactionType].length > 0 && (\n-                             <Table.Row className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-                             <Table.Cell colSpan=\"4\" className=\"py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold\">{transactionType === 'ipl' ? 'Pemasukan IPL' : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}</Table.Cell>\n-                              </Table.Row>\n+                            <Table.Row className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n+                              <Table.Cell colSpan=\"3\" className=\"py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold\">{transactionType === 'ipl' ? 'Pemasukan IPL' : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}</Table.Cell>\n+                              <Table.Cell className=\"text-right font-bold\">{formatCurrency(groupedTransactions[transactionType].reduce((acc, curr) => acc + curr.amount, 0))}</Table.Cell>\n+                            </Table.Row>\n                           )}\n                          \n                           {groupedTransactions[transactionType].map((transaction, subIndex) => (\n                             <Table.Row key={subIndex} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n"
                },
                {
                    "date": 1722339468203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -304,9 +304,9 @@\n                       {Object.keys(groupedTransactions).map((transactionType, index) => (\n                         <React.Fragment key={index}>\n                           {groupedTransactions[transactionType].length > 0 && (\n                             <Table.Row className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-                              <Table.Cell colSpan=\"3\" className=\"py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold\">{transactionType === 'ipl' ? 'Pemasukan IPL' : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}</Table.Cell>\n+                              <Table.Cell colSpan=\"2\" className=\"py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold\">{transactionType === 'ipl' ? 'Pemasukan IPL' : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}</Table.Cell>\n                               <Table.Cell className=\"text-right font-bold\">{formatCurrency(groupedTransactions[transactionType].reduce((acc, curr) => acc + curr.amount, 0))}</Table.Cell>\n                             </Table.Row>\n                           )}\n                          \n"
                },
                {
                    "date": 1722339492093,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -305,9 +305,9 @@\n                         <React.Fragment key={index}>\n                           {groupedTransactions[transactionType].length > 0 && (\n                             <Table.Row className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n                               <Table.Cell colSpan=\"2\" className=\"py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold\">{transactionType === 'ipl' ? 'Pemasukan IPL' : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}</Table.Cell>\n-                              <Table.Cell className=\"text-right font-bold\">{formatCurrency(groupedTransactions[transactionType].reduce((acc, curr) => acc + curr.amount, 0))}</Table.Cell>\n+                              <Table.Cell className=\"items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base` font-bold\">{formatCurrency(groupedTransactions[transactionType].reduce((acc, curr) => acc + curr.amount, 0))}</Table.Cell>\n                             </Table.Row>\n                           )}\n                          \n                           {groupedTransactions[transactionType].map((transaction, subIndex) => (\n"
                },
                {
                    "date": 1722339498526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -305,9 +305,9 @@\n                         <React.Fragment key={index}>\n                           {groupedTransactions[transactionType].length > 0 && (\n                             <Table.Row className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n                               <Table.Cell colSpan=\"2\" className=\"py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold\">{transactionType === 'ipl' ? 'Pemasukan IPL' : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}</Table.Cell>\n-                              <Table.Cell className=\"items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base` font-bold\">{formatCurrency(groupedTransactions[transactionType].reduce((acc, curr) => acc + curr.amount, 0))}</Table.Cell>\n+                              <Table.Cell className=\"items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold\">{formatCurrency(groupedTransactions[transactionType].reduce((acc, curr) => acc + curr.amount, 0))}</Table.Cell>\n                             </Table.Row>\n                           )}\n                          \n                           {groupedTransactions[transactionType].map((transaction, subIndex) => (\n"
                },
                {
                    "date": 1722339537047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,9 +186,9 @@\n   };\n \n   const groupedTransactions = _.groupBy(transactions, 'transaction_type');\n \n-  // console.log(groupedTransactions)\n+   console.log(groupedTransactions)\n   // console.log()\n \n   if (loading) {\n     return <Spinner />;\n"
                },
                {
                    "date": 1722339643323,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,466 @@\n+// pages/home.js\n+import React from 'react';\n+import {useSession ,getSession} from 'next-auth/react';\n+import { useEffect,useState } from 'react';\n+import _ from 'lodash';\n+import axios from 'axios';\n+import Spinner from './Spinner';\n+import CustomThemeProviderSecond from './CustomThemeSecond';\n+import { Card, Button, Table, Accordion } from 'flowbite-react';\n+import { GrMoney } from \"react-icons/gr\";\n+import {FaRegArrowAltCircleDown, FaRegArrowAltCircleUp } from 'react-icons/fa';\n+\n+import { HiHome } from \"react-icons/hi\";\n+\n+import Select from 'react-select';\n+import 'react-datepicker/dist/react-datepicker.css';\n+import moment from 'moment';\n+import 'moment/locale/id';\n+moment.locale('id');\n+import MonthOptions from './MonthOptions';\n+\n+const Report = ({ initialTransaction }) =>  {\n+  \n+  const [loading, setLoading] = useState(true);\n+  const { data: session, status } = useSession();\n+  const [transactions, setTransactions] = useState([initialTransaction]);\n+  const [reTransactions, setReTransactions] = useState([initialTransaction]);\n+  const [totalBalance, setTotalBalance] = useState(null);\n+  const [totalIncome, setTotalIncome] = useState(null);\n+  const [totalExpense, setTotalExpense] = useState(null);\n+  const [selectedPeriod, setSelectedPeriod] = useState(moment().format('YYYY-MM')); // Format YYYY-MM moment().format('YYYY-MM')\n+  const [monthlyBalances, setMonthlyBalances] = useState([]);\n+  const [totalIncomePeriod, setTotalIncomePeriod] = useState(0);\n+  const [totalExpensePeriod, setTotalExpensePeriod] = useState(0);\n+  const [totalHousesPaid, setTotalHousesPaid] = useState(0);\n+  const [totalHouses, setTotalHouses] = useState(0);\n+  const [lastUpdate, setLastUpdate] = useState();\n+  const [percentage, setPercentage] = useState(0);\n+\n+  \n+  const formatCurrency = (amount) => {\n+    return new Intl.NumberFormat('id-ID', {\n+        style: 'currency',\n+        currency: 'IDR',\n+        minimumFractionDigits: 0,\n+    }).format(amount);\n+  };\n+\n+  const fetchTransactions = async () => {\n+    try {\n+        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n+            params: {\n+              period: selectedPeriod\n+          }\n+        });\n+        //console.log(res.data)\n+        setTransactions(res.data.data);\n+        setReTransactions(res.data.data);\n+        setLastUpdate(res.data.lastUpdate);\n+        \n+        setLoading(false);\n+    } catch (error) {\n+        console.error('Error fetching houses data:', error);\n+        setLoading(false);\n+    }\n+  };\n+\n+  const fetchTotalBalance = async () => {\n+    try {\n+        const response = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/balance`, {\n+           \n+        });\n+       // console.log(response.data)\n+        setTotalBalance(response.data.totalBalance);\n+        setTotalIncome(response.data.totalIncome);\n+        setTotalExpense(response.data.totalExpense);\n+        setLoading(false);\n+    } catch (error) {\n+        console.error('Error fetching total balance:', error);\n+        setLoading(false);\n+    }\n+  };\n+\n+  const fetchMonthlyBalances = async () => {\n+    //console.log(selectedPeriod)\n+    try {\n+        const response = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/balance-monthly`, {\n+            params: {\n+                period: selectedPeriod\n+            }\n+        });\n+\n+        //console.log('Response data:', response.data);\n+\n+        if (Array.isArray(response.data) && response.data.length > 0) {\n+            // Gunakan data yang ada jika valid\n+            setMonthlyBalances(response.data);\n+            setTotalIncomePeriod(response.data[0].totalIncome || 0);\n+            setTotalExpensePeriod(response.data[0].totalExpense || 0);\n+        } else {\n+            // Tangani kasus jika data tidak sesuai\n+            setMonthlyBalances([]);\n+            setTotalIncomePeriod(0);\n+            setTotalExpensePeriod(0);\n+        }\n+       \n+    } catch (error) {\n+        console.error('Error fetching monthly balances:', error);\n+        setMonthlyBalances([]);\n+        setTotalIncomePeriod(0);\n+        setTotalExpensePeriod(0);\n+    }\n+  };\n+\n+  const fetchMonthlyPaid = async () => {\n+    try {\n+      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/houses/fee`, {\n+         \n+          params: {\n+            period: selectedPeriod\n+        }\n+      });\n+     // console.log(res.data)\n+      setTotalHousesPaid(res.data.total_houses_paid);\n+      setTotalHouses(res.data.total);\n+      setPercentage(res.data.percentage_paid);\n+    } catch (error) {\n+        console.error('Error fetching houses data:', error);\n+        setLoading(false);\n+    }\n+  };\n+\n+\n+  const [relatedMonths, setRelatedMonths] = useState({\n+    value: moment().format('YYYY-MM'),\n+    label: moment().format('MMMM YYYY')\n+  });\n+  \n+  const handleMonthChange = (selectedOption) => {\n+    setSelectedPeriod(selectedOption.value);\n+  };\n+\n+\n+  useEffect(() => {\n+    // Set nilai bulan saat ini saat komponen pertama kali dimuat\n+    const currentMonthOption = MonthOptions().find(\n+      (option) => option.value === moment().format('YYYY-MM')\n+    );\n+    setRelatedMonths(currentMonthOption);\n+  }, []);\n+\n+  useEffect(() => {\n+    fetchTransactions();\n+    fetchTotalBalance();\n+    fetchMonthlyPaid();\n+    fetchMonthlyBalances();\n+\n+  }, [selectedPeriod]);\n+  \n+\n+\n+  const getTypeIcon = (type) => {\n+    switch (type) {\n+      case 'income':\n+        return <FaRegArrowAltCircleDown  className=\"text-green-500 h-4 w-4 md:h-5 md:w-5 \" />;\n+      case 'expense':\n+        return <FaRegArrowAltCircleUp  className=\"text-red-500 h-4 w-4 md:h-5 md:w-5 \" />;\n+      case 'ipl':\n+        return <FaRegArrowAltCircleDown  className=\"text-green-500  h-4 w-4 md:h-5 md:w-5 \" />;\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const getTextColor = (type) => {\n+    switch (type) {\n+      case 'income':\n+        return \"text-green-500\";\n+      case 'expense':\n+        return \"text-red-500\";\n+      case 'ipl':\n+        return \"text-green-500\";\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const groupedTransactions = _.groupBy(transactions, 'transaction_type');\n+\n+   console.log(groupedTransactions)\n+  // console.log()\n+\n+  if (loading) {\n+    return <Spinner />;\n+  }\n+\n+  return (\n+    <>\n+    <CustomThemeProviderSecond>\n+          <Card className='mb-5 shadow-none'>\n+            <div className='flex flex-col lg:flex-row justify-between gap-3'>\n+              <div className='flex flex-col border-cyan-700 gap-3 border-2 p-3 rounded-md lg:w-1/2'>\n+                <div className='flex items-center content-center gap-2  md:gap-3 '>\n+                  <span className='items-center content-center'>\n+                    <GrMoney className=\"h-7 w-7 lg:h-10 lg:w-10 text-cyan-700\" />\n+                  </span>\n+                  <div>\n+                    <h2 className='md:text-2xl text-xl font-bold text-cyan-700 '>{formatCurrency(totalBalance)}</h2>\n+                    \n+                  </div>\n+                </div>\n+                <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Saldo Akhir</h3>\n+                \n+              </div>\n+             <div className='flex lg:flex-row gap-2 lg:gap-4 justify-between lg:justify-start'>\n+                <div className='flex flex-col items-center content-center  gap-2  md:gap-3 p-2 lg:p-3 border-green-500 border-2 rounded-md'>\n+                    <div className='flex items-center content-center gap-2  md:gap-3 '>\n+                      <span className=''>\n+                        <FaRegArrowAltCircleDown className=\"h-7 w-7 lg:h-10 lg:w-10 text-green-500\" />\n+                      </span>\n+                      <div>\n+                        <h2 className='md:text-2xl text-md font-bold text-green-500 '>{formatCurrency(totalIncome)}</h2>\n+                        {/* <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pemasukan</h3> */}\n+                      </div>\n+                    </div>\n+                    <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pemasukan</h3>\n+                </div>\n+                <div className='flex flex-col items-center content-center gap-2  md:gap-3 border-2 border-red-500 p-2 lg:p-3 rounded-md'>\n+                  <div className='flex items-center content-center gap-2  md:gap-3 '>\n+                    <span className=''>\n+                      <FaRegArrowAltCircleUp className=\"h-7 w-7 lg:h-10 lg:w-10 text-red-500\" />\n+                    </span>\n+                    <div>\n+                      <h2 className='md:text-2xl text-md font-bold text-red-500 '>{formatCurrency(totalExpense)}</h2>\n+                      {/* <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pengaluaran</h3> */}\n+                    </div>\n+                  </div>\n+                  <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pengaluaran</h3> \n+                   \n+                </div>\n+\n+             </div>\n+            </div>\n+          </Card>\n+    </CustomThemeProviderSecond>\n+        \n+    <CustomThemeProviderSecond>\n+        <Card>\n+            <div className='flex items-center justify-start gap-4 mb-4 mt-3 bg-cyan-700 rounded-md p-3 '>\n+                <div>\n+                    <span className='font-semibold text-white'>PERIODE</span>\n+                </div>\n+                <Select\n+                    id=\"relatedMonths\"\n+                    options={MonthOptions()}\n+                    value={MonthOptions().find(option => option.value === selectedPeriod)}\n+                    onChange={handleMonthChange}\n+                    placeholder=\"Pilih bulan\"\n+                    className='bg-cyan-700 rounded w-full md:w-1/3'\n+                    styles={{\n+                      control: (baseStyles, state) => ({\n+                        ...baseStyles,\n+                        backgroundColor: '#0e7490',\n+                      }),\n+                      input: (styles) => ({ ...styles, color: '#fff' }),\n+                      placeholder: (styles) => ({ ...styles, color: '#fff' }),\n+                      singleValue: (styles, { data }) => ({ ...styles, color: '#fff' }),\n+                    }}\n+                />\n+            </div>\n+            <div className='flex gap-1 md:gap-4 justify-between flex-row mb-4'>\n+            \n+                <Card className='bg-green-700 text-white w-1/3'>\n+                <h3 className='font-bold text-sm md:text-xl flex flex-col lg:flex-row  items-start lg:items-center content-center'>\n+                  <span className='flex'>\n+                    <span><HiHome className=\"h-5 w-5  md:h-7 md:w-7 mr-1 lg:mr-2\" /></span>\n+                    <span>IPL</span>\n+                  </span>\n+                  <span className='text-xs lg:text-sm font-normal lg:ml-3'>{`${totalHousesPaid} / ${totalHouses} Rumah`}</span>\n+                  </h3>\n+                <span className='font-semibold text-sm md:text-lg'>{percentage}</span>\n+                </Card>\n+                <Card className='bg-green-500 text-white w-1/3'>\n+                <h3 className='font-bold text-sm md:text-xl flex items-start'><span><FaRegArrowAltCircleDown className=\"h-5 w-5  md:h-7 md:w-7 mr-2\" /></span><span>Masuk</span></h3>\n+                <span className='font-semibold text-xs md:text-lg'>{formatCurrency(totalIncomePeriod)}</span>\n+                </Card>\n+                <Card className='bg-red-500 text-white w-1/3'>\n+                <h3 className='font-bold text-sm md:text-xl flex items-start'><span><FaRegArrowAltCircleUp className=\"h-5 w-5  md:h-7 md:w-7 mr-2\" /></span><span>Keluar</span></h3>\n+                <span className='font-semibold text-xs md:text-lg'>{formatCurrency(totalExpensePeriod)}</span>\n+                </Card>\n+            \n+            </div>\n+            {/* <div>{`Last Update: ${moment(lastUpdate).format('DD MMM yyyy')}`}</div> */}\n+            <CustomThemeProviderSecond>\n+              <div className=\"overflow-x-auto\">\n+                  <Table>\n+                      <Table.Head className='' >\n+                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white'>Keterangan</Table.HeadCell>\n+                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white'>Tanggal</Table.HeadCell>\n+                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white '>Nominal</Table.HeadCell>\n+                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white '></Table.HeadCell>\n+                      </Table.Head>\n+                      <Table.Body className=\"divide-y\">\n+                      {Object.keys(groupedTransactions).map((transactionType, index) => (\n+                        <React.Fragment key={index}>\n+                          {groupedTransactions[transactionType].length > 0 && (\n+                            <Table.Row className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n+                              <Table.Cell colSpan=\"2\" className={`${getTextColor(transactionType)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>{transactionType === 'ipl' ? 'Pemasukan IPL' : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}</Table.Cell>\n+                              <Table.Cell className=\"items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold\">{formatCurrency(groupedTransactions[transactionType].reduce((acc, curr) => acc + curr.amount, 0))}</Table.Cell>\n+                            </Table.Row>\n+                          )}\n+                         \n+                          {groupedTransactions[transactionType].map((transaction, subIndex) => (\n+                            <Table.Row key={subIndex} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n+                              <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                <span className='flex items-start'>\n+                                  <span>{getTypeIcon(transaction.transaction_type)} </span>\n+                                  <span className=\"ml-2\">{transaction.description}</span>\n+                                </span>\n+                              </Table.Cell>\n+                              <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                {moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}\n+                              </Table.Cell>\n+                              <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                {formatCurrency(transaction.amount)}\n+                              </Table.Cell>\n+                            </Table.Row>\n+                          ))}\n+                            {/* <Table.Row className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n+                              <Table.Cell colSpan=\"2\" className=\"text-right font-bold\">Total {transactionType}</Table.Cell>\n+                              <Table.Cell className=\"text-right font-bold\">{formatCurrency(groupedTransactions[transactionType].reduce((acc, curr) => acc + curr.amount, 0))}</Table.Cell>\n+                            </Table.Row> */}\n+                        </React.Fragment>\n+                      ))}\n+                        \n+                      {/* {transactions && transactions.length > 0 && transactions[0] !== undefined ? (\n+                          transactions.map((transaction, index) => (\n+                              <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n+                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                      <span className='flex items-start'>\n+                                      <span>{getTypeIcon(transaction.transaction_type)} </span>\n+                                      <span className=\"ml-2\">{transaction.description}</span>\n+                                      </span>\n+                                  </Table.Cell>\n+                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                      {moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}\n+                                  </Table.Cell>\n+                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                      {formatCurrency(transaction.amount)}\n+                                  </Table.Cell>\n+                              </Table.Row>\n+                          ))\n+                          ) : (\n+                          <Table.Row>\n+                              <Table.Cell colSpan=\"3\" className=\"text-center\">Data tidak tersedia</Table.Cell>\n+                          </Table.Row>\n+                      )} */}\n+\n+                      \n+                      \n+                      </Table.Body>\n+                  </Table>\n+                  {/* {groupedTransactions? (\n+                    <>\n+                    {Object.keys(groupedTransactions).map((transactionType, index) => (\n+                      <React.Fragment key={index}>\n+                       {groupedTransactions[transactionType].length > 0 && (\n+                          <Accordion>\n+                            <Accordion.Panel>\n+                              <Accordion.Title className='py-2 px-2 md:py-3 md:px-3 '>{transactionType === 'ipl' ? 'Pemasukan IPL' : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}</Accordion.Title>\n+                              <Accordion.Panel>\n+                                sds\n+                              </Accordion.Panel>\n+                            </Accordion.Panel>\n+                          </Accordion>\n+                       )}\n+                      </React.Fragment>\n+                    ))}\n+                    </>\n+                  ) :(\n+                    <></>\n+                  )} */}\n+\n+                  {/* {groupedTransactions? (\n+                          <>\n+                            {Object.keys(groupedTransactions).map((transactionType, index) => (\n+                              <React.Fragment key={index}>\n+                                \n+                                {groupedTransactions[transactionType].length > 0 && (\n+                                  <Table.Row>\n+                                  <Table.Cell colSpan=\"4\" className='p-0'>\n+                                  <Accordion collapseAll>\n+                                  <Accordion.Panel className='rounded-none'>\n+                                  <Accordion.Title className='py-2 px-2 md:py-3 md:px-3 '>{transactionType === 'ipl' ? 'Pemasukan IPL' : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}</Accordion.Title>\n+                                    {groupedTransactions[transactionType].map((transaction, subIndex) =>(\n+                                      <Accordion.Content key={subIndex} >\n+                                        <Table  striped>\n+                                        <Table.Body>\n+                                        <Table.Row className=' border-gray-700 '>\n+                                          <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                              {`sadsa`}\n+                                          </Table.Cell>\n+                                        </Table.Row>\n+                                        </Table.Body>\n+                                        </Table>\n+                                        \n+                                      </Accordion.Content>\n+                                    ))}\n+                                  </Accordion.Panel>\n+                                </Accordion>\n+                                  </Table.Cell>\n+                                  </Table.Row>\n+                                  \n+                                )}\n+                              \n+                              </React.Fragment>\n+                            ))}\n+                          </>\n+                        ): (\n+                          <Table.Row>\n+                              <Table.Cell colSpan=\"4\" className=\"text-center\">Data belum tersedia</Table.Cell>\n+                          </Table.Row>\n+                        )} */}\n+              </div>\n+            </CustomThemeProviderSecond>\n+            \n+        </Card>\n+    </CustomThemeProviderSecond>\n+    </>\n+  );\n+}\n+\n+export const getServerSideProps = async (context) => {\n+    const session = await getSession(context);\n+    \n+    // if (!session) {\n+    //     return {\n+    //         redirect: {\n+    //             destination: '/',\n+    //             permanent: false,\n+    //         },\n+    //     };\n+    // }\n+  \n+    try {\n+        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n+            // headers: {\n+            //     Authorization: `Bearer ${session.accessToken}`,\n+            // },\n+        });\n+        return {\n+            props: {\n+              initialTransaction: res.data.data,\n+            },\n+        };\n+    } catch (error) {\n+        console.error('Error fetching tra data:', error);\n+        return {\n+            props: {\n+              initialTransaction: [],\n+            },\n+        };\n+    }\n+  };\n+\n+export default Report;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722339725082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -178,9 +178,9 @@\n         return \"text-green-500\";\n       case 'expense':\n         return \"text-red-500\";\n       case 'ipl':\n-        return \"text-green-500\";\n+        return \"text-green-700\";\n       default:\n         return null;\n     }\n   };\n"
                },
                {
                    "date": 1722339772702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,466 @@\n+// pages/home.js\n+import React from 'react';\n+import {useSession ,getSession} from 'next-auth/react';\n+import { useEffect,useState } from 'react';\n+import _ from 'lodash';\n+import axios from 'axios';\n+import Spinner from './Spinner';\n+import CustomThemeProviderSecond from './CustomThemeSecond';\n+import { Card, Button, Table, Accordion } from 'flowbite-react';\n+import { GrMoney } from \"react-icons/gr\";\n+import {FaRegArrowAltCircleDown, FaRegArrowAltCircleUp } from 'react-icons/fa';\n+\n+import { HiHome } from \"react-icons/hi\";\n+\n+import Select from 'react-select';\n+import 'react-datepicker/dist/react-datepicker.css';\n+import moment from 'moment';\n+import 'moment/locale/id';\n+moment.locale('id');\n+import MonthOptions from './MonthOptions';\n+\n+const Report = ({ initialTransaction }) =>  {\n+  \n+  const [loading, setLoading] = useState(true);\n+  const { data: session, status } = useSession();\n+  const [transactions, setTransactions] = useState([initialTransaction]);\n+  const [reTransactions, setReTransactions] = useState([initialTransaction]);\n+  const [totalBalance, setTotalBalance] = useState(null);\n+  const [totalIncome, setTotalIncome] = useState(null);\n+  const [totalExpense, setTotalExpense] = useState(null);\n+  const [selectedPeriod, setSelectedPeriod] = useState(moment().format('YYYY-MM')); // Format YYYY-MM moment().format('YYYY-MM')\n+  const [monthlyBalances, setMonthlyBalances] = useState([]);\n+  const [totalIncomePeriod, setTotalIncomePeriod] = useState(0);\n+  const [totalExpensePeriod, setTotalExpensePeriod] = useState(0);\n+  const [totalHousesPaid, setTotalHousesPaid] = useState(0);\n+  const [totalHouses, setTotalHouses] = useState(0);\n+  const [lastUpdate, setLastUpdate] = useState();\n+  const [percentage, setPercentage] = useState(0);\n+\n+  \n+  const formatCurrency = (amount) => {\n+    return new Intl.NumberFormat('id-ID', {\n+        style: 'currency',\n+        currency: 'IDR',\n+        minimumFractionDigits: 0,\n+    }).format(amount);\n+  };\n+\n+  const fetchTransactions = async () => {\n+    try {\n+        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n+            params: {\n+              period: selectedPeriod\n+          }\n+        });\n+        //console.log(res.data)\n+        setTransactions(res.data.data);\n+        setReTransactions(res.data.data);\n+        setLastUpdate(res.data.lastUpdate);\n+        \n+        setLoading(false);\n+    } catch (error) {\n+        console.error('Error fetching houses data:', error);\n+        setLoading(false);\n+    }\n+  };\n+\n+  const fetchTotalBalance = async () => {\n+    try {\n+        const response = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/balance`, {\n+           \n+        });\n+       // console.log(response.data)\n+        setTotalBalance(response.data.totalBalance);\n+        setTotalIncome(response.data.totalIncome);\n+        setTotalExpense(response.data.totalExpense);\n+        setLoading(false);\n+    } catch (error) {\n+        console.error('Error fetching total balance:', error);\n+        setLoading(false);\n+    }\n+  };\n+\n+  const fetchMonthlyBalances = async () => {\n+    //console.log(selectedPeriod)\n+    try {\n+        const response = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/balance-monthly`, {\n+            params: {\n+                period: selectedPeriod\n+            }\n+        });\n+\n+        //console.log('Response data:', response.data);\n+\n+        if (Array.isArray(response.data) && response.data.length > 0) {\n+            // Gunakan data yang ada jika valid\n+            setMonthlyBalances(response.data);\n+            setTotalIncomePeriod(response.data[0].totalIncome || 0);\n+            setTotalExpensePeriod(response.data[0].totalExpense || 0);\n+        } else {\n+            // Tangani kasus jika data tidak sesuai\n+            setMonthlyBalances([]);\n+            setTotalIncomePeriod(0);\n+            setTotalExpensePeriod(0);\n+        }\n+       \n+    } catch (error) {\n+        console.error('Error fetching monthly balances:', error);\n+        setMonthlyBalances([]);\n+        setTotalIncomePeriod(0);\n+        setTotalExpensePeriod(0);\n+    }\n+  };\n+\n+  const fetchMonthlyPaid = async () => {\n+    try {\n+      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/houses/fee`, {\n+         \n+          params: {\n+            period: selectedPeriod\n+        }\n+      });\n+     // console.log(res.data)\n+      setTotalHousesPaid(res.data.total_houses_paid);\n+      setTotalHouses(res.data.total);\n+      setPercentage(res.data.percentage_paid);\n+    } catch (error) {\n+        console.error('Error fetching houses data:', error);\n+        setLoading(false);\n+    }\n+  };\n+\n+\n+  const [relatedMonths, setRelatedMonths] = useState({\n+    value: moment().format('YYYY-MM'),\n+    label: moment().format('MMMM YYYY')\n+  });\n+  \n+  const handleMonthChange = (selectedOption) => {\n+    setSelectedPeriod(selectedOption.value);\n+  };\n+\n+\n+  useEffect(() => {\n+    // Set nilai bulan saat ini saat komponen pertama kali dimuat\n+    const currentMonthOption = MonthOptions().find(\n+      (option) => option.value === moment().format('YYYY-MM')\n+    );\n+    setRelatedMonths(currentMonthOption);\n+  }, []);\n+\n+  useEffect(() => {\n+    fetchTransactions();\n+    fetchTotalBalance();\n+    fetchMonthlyPaid();\n+    fetchMonthlyBalances();\n+\n+  }, [selectedPeriod]);\n+  \n+\n+\n+  const getTypeIcon = (type) => {\n+    switch (type) {\n+      case 'income':\n+        return <FaRegArrowAltCircleDown  className=\"text-green-500 h-4 w-4 md:h-5 md:w-5 \" />;\n+      case 'expense':\n+        return <FaRegArrowAltCircleUp  className=\"text-red-500 h-4 w-4 md:h-5 md:w-5 \" />;\n+      case 'ipl':\n+        return <FaRegArrowAltCircleDown  className=\"text-green-700  h-4 w-4 md:h-5 md:w-5 \" />;\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const getTextColor = (type) => {\n+    switch (type) {\n+      case 'income':\n+        return \"text-green-500\";\n+      case 'expense':\n+        return \"text-red-500\";\n+      case 'ipl':\n+        return \"text-green-700\";\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const groupedTransactions = _.groupBy(transactions, 'transaction_type');\n+\n+   console.log(groupedTransactions)\n+  // console.log()\n+\n+  if (loading) {\n+    return <Spinner />;\n+  }\n+\n+  return (\n+    <>\n+    <CustomThemeProviderSecond>\n+          <Card className='mb-5 shadow-none'>\n+            <div className='flex flex-col lg:flex-row justify-between gap-3'>\n+              <div className='flex flex-col border-cyan-700 gap-3 border-2 p-3 rounded-md lg:w-1/2'>\n+                <div className='flex items-center content-center gap-2  md:gap-3 '>\n+                  <span className='items-center content-center'>\n+                    <GrMoney className=\"h-7 w-7 lg:h-10 lg:w-10 text-cyan-700\" />\n+                  </span>\n+                  <div>\n+                    <h2 className='md:text-2xl text-xl font-bold text-cyan-700 '>{formatCurrency(totalBalance)}</h2>\n+                    \n+                  </div>\n+                </div>\n+                <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Saldo Akhir</h3>\n+                \n+              </div>\n+             <div className='flex lg:flex-row gap-2 lg:gap-4 justify-between lg:justify-start'>\n+                <div className='flex flex-col items-center content-center  gap-2  md:gap-3 p-2 lg:p-3 border-green-500 border-2 rounded-md'>\n+                    <div className='flex items-center content-center gap-2  md:gap-3 '>\n+                      <span className=''>\n+                        <FaRegArrowAltCircleDown className=\"h-7 w-7 lg:h-10 lg:w-10 text-green-500\" />\n+                      </span>\n+                      <div>\n+                        <h2 className='md:text-2xl text-md font-bold text-green-500 '>{formatCurrency(totalIncome)}</h2>\n+                        {/* <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pemasukan</h3> */}\n+                      </div>\n+                    </div>\n+                    <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pemasukan</h3>\n+                </div>\n+                <div className='flex flex-col items-center content-center gap-2  md:gap-3 border-2 border-red-500 p-2 lg:p-3 rounded-md'>\n+                  <div className='flex items-center content-center gap-2  md:gap-3 '>\n+                    <span className=''>\n+                      <FaRegArrowAltCircleUp className=\"h-7 w-7 lg:h-10 lg:w-10 text-red-500\" />\n+                    </span>\n+                    <div>\n+                      <h2 className='md:text-2xl text-md font-bold text-red-500 '>{formatCurrency(totalExpense)}</h2>\n+                      {/* <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pengaluaran</h3> */}\n+                    </div>\n+                  </div>\n+                  <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pengaluaran</h3> \n+                   \n+                </div>\n+\n+             </div>\n+            </div>\n+          </Card>\n+    </CustomThemeProviderSecond>\n+        \n+    <CustomThemeProviderSecond>\n+        <Card>\n+            <div className='flex items-center justify-start gap-4 mb-4 mt-3 bg-cyan-700 rounded-md p-3 '>\n+                <div>\n+                    <span className='font-semibold text-white'>PERIODE</span>\n+                </div>\n+                <Select\n+                    id=\"relatedMonths\"\n+                    options={MonthOptions()}\n+                    value={MonthOptions().find(option => option.value === selectedPeriod)}\n+                    onChange={handleMonthChange}\n+                    placeholder=\"Pilih bulan\"\n+                    className='bg-cyan-700 rounded w-full md:w-1/3'\n+                    styles={{\n+                      control: (baseStyles, state) => ({\n+                        ...baseStyles,\n+                        backgroundColor: '#0e7490',\n+                      }),\n+                      input: (styles) => ({ ...styles, color: '#fff' }),\n+                      placeholder: (styles) => ({ ...styles, color: '#fff' }),\n+                      singleValue: (styles, { data }) => ({ ...styles, color: '#fff' }),\n+                    }}\n+                />\n+            </div>\n+            <div className='flex gap-1 md:gap-4 justify-between flex-row mb-4'>\n+            \n+                <Card className='bg-green-700 text-white w-1/3'>\n+                <h3 className='font-bold text-sm md:text-xl flex flex-col lg:flex-row  items-start lg:items-center content-center'>\n+                  <span className='flex'>\n+                    <span><HiHome className=\"h-5 w-5  md:h-7 md:w-7 mr-1 lg:mr-2\" /></span>\n+                    <span>IPL</span>\n+                  </span>\n+                  <span className='text-xs lg:text-sm font-normal lg:ml-3'>{`${totalHousesPaid} / ${totalHouses} Rumah`}</span>\n+                  </h3>\n+                <span className='font-semibold text-sm md:text-lg'>{percentage}</span>\n+                </Card>\n+                <Card className='bg-green-500 text-white w-1/3'>\n+                <h3 className='font-bold text-sm md:text-xl flex items-start'><span><FaRegArrowAltCircleDown className=\"h-5 w-5  md:h-7 md:w-7 mr-2\" /></span><span>Masuk</span></h3>\n+                <span className='font-semibold text-xs md:text-lg'>{formatCurrency(totalIncomePeriod)}</span>\n+                </Card>\n+                <Card className='bg-red-500 text-white w-1/3'>\n+                <h3 className='font-bold text-sm md:text-xl flex items-start'><span><FaRegArrowAltCircleUp className=\"h-5 w-5  md:h-7 md:w-7 mr-2\" /></span><span>Keluar</span></h3>\n+                <span className='font-semibold text-xs md:text-lg'>{formatCurrency(totalExpensePeriod)}</span>\n+                </Card>\n+            \n+            </div>\n+            {/* <div>{`Last Update: ${moment(lastUpdate).format('DD MMM yyyy')}`}</div> */}\n+            <CustomThemeProviderSecond>\n+              <div className=\"overflow-x-auto\">\n+                  <Table>\n+                      <Table.Head className='' >\n+                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white'>Keterangan</Table.HeadCell>\n+                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white'>Tanggal</Table.HeadCell>\n+                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white '>Nominal</Table.HeadCell>\n+                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white '></Table.HeadCell>\n+                      </Table.Head>\n+                      <Table.Body className=\"divide-y\">\n+                      {Object.keys(groupedTransactions).map((transactionType, index) => (\n+                        <React.Fragment key={index}>\n+                          {groupedTransactions[transactionType].length > 0 && (\n+                            <Table.Row className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n+                              <Table.Cell colSpan=\"2\" className={`${getTextColor(transactionType)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>{transactionType === 'ipl' ? 'Pemasukan IPL' : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}</Table.Cell>\n+                              <Table.Cell className={`${getTextColor(transactionType)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>{formatCurrency(groupedTransactions[transactionType].reduce((acc, curr) => acc + curr.amount, 0))}</Table.Cell>\n+                            </Table.Row>\n+                          )}\n+                         \n+                          {groupedTransactions[transactionType].map((transaction, subIndex) => (\n+                            <Table.Row key={subIndex} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n+                              <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                <span className='flex items-start'>\n+                                  <span>{getTypeIcon(transaction.transaction_type)} </span>\n+                                  <span className=\"ml-2\">{transaction.description}</span>\n+                                </span>\n+                              </Table.Cell>\n+                              <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                {moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}\n+                              </Table.Cell>\n+                              <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                {formatCurrency(transaction.amount)}\n+                              </Table.Cell>\n+                            </Table.Row>\n+                          ))}\n+                            {/* <Table.Row className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n+                              <Table.Cell colSpan=\"2\" className=\"text-right font-bold\">Total {transactionType}</Table.Cell>\n+                              <Table.Cell className=\"text-right font-bold\">{formatCurrency(groupedTransactions[transactionType].reduce((acc, curr) => acc + curr.amount, 0))}</Table.Cell>\n+                            </Table.Row> */}\n+                        </React.Fragment>\n+                      ))}\n+                        \n+                      {/* {transactions && transactions.length > 0 && transactions[0] !== undefined ? (\n+                          transactions.map((transaction, index) => (\n+                              <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n+                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                      <span className='flex items-start'>\n+                                      <span>{getTypeIcon(transaction.transaction_type)} </span>\n+                                      <span className=\"ml-2\">{transaction.description}</span>\n+                                      </span>\n+                                  </Table.Cell>\n+                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                      {moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}\n+                                  </Table.Cell>\n+                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                      {formatCurrency(transaction.amount)}\n+                                  </Table.Cell>\n+                              </Table.Row>\n+                          ))\n+                          ) : (\n+                          <Table.Row>\n+                              <Table.Cell colSpan=\"3\" className=\"text-center\">Data tidak tersedia</Table.Cell>\n+                          </Table.Row>\n+                      )} */}\n+\n+                      \n+                      \n+                      </Table.Body>\n+                  </Table>\n+                  {/* {groupedTransactions? (\n+                    <>\n+                    {Object.keys(groupedTransactions).map((transactionType, index) => (\n+                      <React.Fragment key={index}>\n+                       {groupedTransactions[transactionType].length > 0 && (\n+                          <Accordion>\n+                            <Accordion.Panel>\n+                              <Accordion.Title className='py-2 px-2 md:py-3 md:px-3 '>{transactionType === 'ipl' ? 'Pemasukan IPL' : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}</Accordion.Title>\n+                              <Accordion.Panel>\n+                                sds\n+                              </Accordion.Panel>\n+                            </Accordion.Panel>\n+                          </Accordion>\n+                       )}\n+                      </React.Fragment>\n+                    ))}\n+                    </>\n+                  ) :(\n+                    <></>\n+                  )} */}\n+\n+                  {/* {groupedTransactions? (\n+                          <>\n+                            {Object.keys(groupedTransactions).map((transactionType, index) => (\n+                              <React.Fragment key={index}>\n+                                \n+                                {groupedTransactions[transactionType].length > 0 && (\n+                                  <Table.Row>\n+                                  <Table.Cell colSpan=\"4\" className='p-0'>\n+                                  <Accordion collapseAll>\n+                                  <Accordion.Panel className='rounded-none'>\n+                                  <Accordion.Title className='py-2 px-2 md:py-3 md:px-3 '>{transactionType === 'ipl' ? 'Pemasukan IPL' : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}</Accordion.Title>\n+                                    {groupedTransactions[transactionType].map((transaction, subIndex) =>(\n+                                      <Accordion.Content key={subIndex} >\n+                                        <Table  striped>\n+                                        <Table.Body>\n+                                        <Table.Row className=' border-gray-700 '>\n+                                          <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                              {`sadsa`}\n+                                          </Table.Cell>\n+                                        </Table.Row>\n+                                        </Table.Body>\n+                                        </Table>\n+                                        \n+                                      </Accordion.Content>\n+                                    ))}\n+                                  </Accordion.Panel>\n+                                </Accordion>\n+                                  </Table.Cell>\n+                                  </Table.Row>\n+                                  \n+                                )}\n+                              \n+                              </React.Fragment>\n+                            ))}\n+                          </>\n+                        ): (\n+                          <Table.Row>\n+                              <Table.Cell colSpan=\"4\" className=\"text-center\">Data belum tersedia</Table.Cell>\n+                          </Table.Row>\n+                        )} */}\n+              </div>\n+            </CustomThemeProviderSecond>\n+            \n+        </Card>\n+    </CustomThemeProviderSecond>\n+    </>\n+  );\n+}\n+\n+export const getServerSideProps = async (context) => {\n+    const session = await getSession(context);\n+    \n+    // if (!session) {\n+    //     return {\n+    //         redirect: {\n+    //             destination: '/',\n+    //             permanent: false,\n+    //         },\n+    //     };\n+    // }\n+  \n+    try {\n+        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n+            // headers: {\n+            //     Authorization: `Bearer ${session.accessToken}`,\n+            // },\n+        });\n+        return {\n+            props: {\n+              initialTransaction: res.data.data,\n+            },\n+        };\n+    } catch (error) {\n+        console.error('Error fetching tra data:', error);\n+        return {\n+            props: {\n+              initialTransaction: [],\n+            },\n+        };\n+    }\n+  };\n+\n+export default Report;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722340002203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -304,9 +304,11 @@\n                       {Object.keys(groupedTransactions).map((transactionType, index) => (\n                         <React.Fragment key={index}>\n                           {groupedTransactions[transactionType].length > 0 && (\n                             <Table.Row className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-                              <Table.Cell colSpan=\"2\" className={`${getTextColor(transactionType)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>{transactionType === 'ipl' ? 'Pemasukan IPL' : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}</Table.Cell>\n+                              <Table.Cell colSpan=\"2\" className={`${getTextColor(transactionType)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>\n+                                {transactionType === 'ipl' ? 'Pemasukan IPL' : transactionType === 'income' ? `{${totalHousesPaid} / ${totalHouses} Rumah}` : transactionType === 'expense' ? 'Pengeluaran' : ''}\n+                                </Table.Cell>\n                               <Table.Cell className={`${getTextColor(transactionType)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>{formatCurrency(groupedTransactions[transactionType].reduce((acc, curr) => acc + curr.amount, 0))}</Table.Cell>\n                             </Table.Row>\n                           )}\n                          \n@@ -325,12 +327,9 @@\n                                 {formatCurrency(transaction.amount)}\n                               </Table.Cell>\n                             </Table.Row>\n                           ))}\n-                            {/* <Table.Row className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-                              <Table.Cell colSpan=\"2\" className=\"text-right font-bold\">Total {transactionType}</Table.Cell>\n-                              <Table.Cell className=\"text-right font-bold\">{formatCurrency(groupedTransactions[transactionType].reduce((acc, curr) => acc + curr.amount, 0))}</Table.Cell>\n-                            </Table.Row> */}\n+                           \n                         </React.Fragment>\n                       ))}\n                         \n                       {/* {transactions && transactions.length > 0 && transactions[0] !== undefined ? (\n@@ -359,69 +358,9 @@\n                       \n                       \n                       </Table.Body>\n                   </Table>\n-                  {/* {groupedTransactions? (\n-                    <>\n-                    {Object.keys(groupedTransactions).map((transactionType, index) => (\n-                      <React.Fragment key={index}>\n-                       {groupedTransactions[transactionType].length > 0 && (\n-                          <Accordion>\n-                            <Accordion.Panel>\n-                              <Accordion.Title className='py-2 px-2 md:py-3 md:px-3 '>{transactionType === 'ipl' ? 'Pemasukan IPL' : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}</Accordion.Title>\n-                              <Accordion.Panel>\n-                                sds\n-                              </Accordion.Panel>\n-                            </Accordion.Panel>\n-                          </Accordion>\n-                       )}\n-                      </React.Fragment>\n-                    ))}\n-                    </>\n-                  ) :(\n-                    <></>\n-                  )} */}\n-\n-                  {/* {groupedTransactions? (\n-                          <>\n-                            {Object.keys(groupedTransactions).map((transactionType, index) => (\n-                              <React.Fragment key={index}>\n-                                \n-                                {groupedTransactions[transactionType].length > 0 && (\n-                                  <Table.Row>\n-                                  <Table.Cell colSpan=\"4\" className='p-0'>\n-                                  <Accordion collapseAll>\n-                                  <Accordion.Panel className='rounded-none'>\n-                                  <Accordion.Title className='py-2 px-2 md:py-3 md:px-3 '>{transactionType === 'ipl' ? 'Pemasukan IPL' : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}</Accordion.Title>\n-                                    {groupedTransactions[transactionType].map((transaction, subIndex) =>(\n-                                      <Accordion.Content key={subIndex} >\n-                                        <Table  striped>\n-                                        <Table.Body>\n-                                        <Table.Row className=' border-gray-700 '>\n-                                          <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                              {`sadsa`}\n-                                          </Table.Cell>\n-                                        </Table.Row>\n-                                        </Table.Body>\n-                                        </Table>\n-                                        \n-                                      </Accordion.Content>\n-                                    ))}\n-                                  </Accordion.Panel>\n-                                </Accordion>\n-                                  </Table.Cell>\n-                                  </Table.Row>\n-                                  \n-                                )}\n-                              \n-                              </React.Fragment>\n-                            ))}\n-                          </>\n-                        ): (\n-                          <Table.Row>\n-                              <Table.Cell colSpan=\"4\" className=\"text-center\">Data belum tersedia</Table.Cell>\n-                          </Table.Row>\n-                        )} */}\n+                  \n               </div>\n             </CustomThemeProviderSecond>\n             \n         </Card>\n@@ -462,937 +401,5 @@\n         };\n     }\n   };\n \n-export default Report;\n-// pages/home.js\n-import React from 'react';\n-import {useSession ,getSession} from 'next-auth/react';\n-import { useEffect,useState } from 'react';\n-import _ from 'lodash';\n-import axios from 'axios';\n-import Spinner from './Spinner';\n-import CustomThemeProviderSecond from './CustomThemeSecond';\n-import { Card, Button, Table, Accordion } from 'flowbite-react';\n-import { GrMoney } from \"react-icons/gr\";\n-import {FaRegArrowAltCircleDown, FaRegArrowAltCircleUp } from 'react-icons/fa';\n-\n-import { HiHome } from \"react-icons/hi\";\n-\n-import Select from 'react-select';\n-import 'react-datepicker/dist/react-datepicker.css';\n-import moment from 'moment';\n-import 'moment/locale/id';\n-moment.locale('id');\n-import MonthOptions from './MonthOptions';\n-\n-const Report = ({ initialTransaction }) =>  {\n-  \n-  const [loading, setLoading] = useState(true);\n-  const { data: session, status } = useSession();\n-  const [transactions, setTransactions] = useState([initialTransaction]);\n-  const [reTransactions, setReTransactions] = useState([initialTransaction]);\n-  const [totalBalance, setTotalBalance] = useState(null);\n-  const [totalIncome, setTotalIncome] = useState(null);\n-  const [totalExpense, setTotalExpense] = useState(null);\n-  const [selectedPeriod, setSelectedPeriod] = useState(moment().format('YYYY-MM')); // Format YYYY-MM moment().format('YYYY-MM')\n-  const [monthlyBalances, setMonthlyBalances] = useState([]);\n-  const [totalIncomePeriod, setTotalIncomePeriod] = useState(0);\n-  const [totalExpensePeriod, setTotalExpensePeriod] = useState(0);\n-  const [totalHousesPaid, setTotalHousesPaid] = useState(0);\n-  const [totalHouses, setTotalHouses] = useState(0);\n-  const [lastUpdate, setLastUpdate] = useState();\n-  const [percentage, setPercentage] = useState(0);\n-\n-  \n-  const formatCurrency = (amount) => {\n-    return new Intl.NumberFormat('id-ID', {\n-        style: 'currency',\n-        currency: 'IDR',\n-        minimumFractionDigits: 0,\n-    }).format(amount);\n-  };\n-\n-  const fetchTransactions = async () => {\n-    try {\n-        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n-            params: {\n-              period: selectedPeriod\n-          }\n-        });\n-        //console.log(res.data)\n-        setTransactions(res.data.data);\n-        setReTransactions(res.data.data);\n-        setLastUpdate(res.data.lastUpdate);\n-        \n-        setLoading(false);\n-    } catch (error) {\n-        console.error('Error fetching houses data:', error);\n-        setLoading(false);\n-    }\n-  };\n-\n-  const fetchTotalBalance = async () => {\n-    try {\n-        const response = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/balance`, {\n-           \n-        });\n-       // console.log(response.data)\n-        setTotalBalance(response.data.totalBalance);\n-        setTotalIncome(response.data.totalIncome);\n-        setTotalExpense(response.data.totalExpense);\n-        setLoading(false);\n-    } catch (error) {\n-        console.error('Error fetching total balance:', error);\n-        setLoading(false);\n-    }\n-  };\n-\n-  const fetchMonthlyBalances = async () => {\n-    //console.log(selectedPeriod)\n-    try {\n-        const response = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/balance-monthly`, {\n-            params: {\n-                period: selectedPeriod\n-            }\n-        });\n-\n-        //console.log('Response data:', response.data);\n-\n-        if (Array.isArray(response.data) && response.data.length > 0) {\n-            // Gunakan data yang ada jika valid\n-            setMonthlyBalances(response.data);\n-            setTotalIncomePeriod(response.data[0].totalIncome || 0);\n-            setTotalExpensePeriod(response.data[0].totalExpense || 0);\n-        } else {\n-            // Tangani kasus jika data tidak sesuai\n-            setMonthlyBalances([]);\n-            setTotalIncomePeriod(0);\n-            setTotalExpensePeriod(0);\n-        }\n-       \n-    } catch (error) {\n-        console.error('Error fetching monthly balances:', error);\n-        setMonthlyBalances([]);\n-        setTotalIncomePeriod(0);\n-        setTotalExpensePeriod(0);\n-    }\n-  };\n-\n-  const fetchMonthlyPaid = async () => {\n-    try {\n-      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/houses/fee`, {\n-         \n-          params: {\n-            period: selectedPeriod\n-        }\n-      });\n-     // console.log(res.data)\n-      setTotalHousesPaid(res.data.total_houses_paid);\n-      setTotalHouses(res.data.total);\n-      setPercentage(res.data.percentage_paid);\n-    } catch (error) {\n-        console.error('Error fetching houses data:', error);\n-        setLoading(false);\n-    }\n-  };\n-\n-\n-  const [relatedMonths, setRelatedMonths] = useState({\n-    value: moment().format('YYYY-MM'),\n-    label: moment().format('MMMM YYYY')\n-  });\n-  \n-  const handleMonthChange = (selectedOption) => {\n-    setSelectedPeriod(selectedOption.value);\n-  };\n-\n-\n-  useEffect(() => {\n-    // Set nilai bulan saat ini saat komponen pertama kali dimuat\n-    const currentMonthOption = MonthOptions().find(\n-      (option) => option.value === moment().format('YYYY-MM')\n-    );\n-    setRelatedMonths(currentMonthOption);\n-  }, []);\n-\n-  useEffect(() => {\n-    fetchTransactions();\n-    fetchTotalBalance();\n-    fetchMonthlyPaid();\n-    fetchMonthlyBalances();\n-\n-  }, [selectedPeriod]);\n-  \n-\n-\n-  const getTypeIcon = (type) => {\n-    switch (type) {\n-      case 'income':\n-        return <FaRegArrowAltCircleDown  className=\"text-green-500 h-4 w-4 md:h-5 md:w-5 \" />;\n-      case 'expense':\n-        return <FaRegArrowAltCircleUp  className=\"text-red-500 h-4 w-4 md:h-5 md:w-5 \" />;\n-      case 'ipl':\n-        return <FaRegArrowAltCircleDown  className=\"text-green-500  h-4 w-4 md:h-5 md:w-5 \" />;\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const getTextColor = (type) => {\n-    switch (type) {\n-      case 'income':\n-        return \"text-green-500\";\n-      case 'expense':\n-        return \"text-red-500\";\n-      case 'ipl':\n-        return \"text-green-700\";\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const groupedTransactions = _.groupBy(transactions, 'transaction_type');\n-\n-   console.log(groupedTransactions)\n-  // console.log()\n-\n-  if (loading) {\n-    return <Spinner />;\n-  }\n-\n-  return (\n-    <>\n-    <CustomThemeProviderSecond>\n-          <Card className='mb-5 shadow-none'>\n-            <div className='flex flex-col lg:flex-row justify-between gap-3'>\n-              <div className='flex flex-col border-cyan-700 gap-3 border-2 p-3 rounded-md lg:w-1/2'>\n-                <div className='flex items-center content-center gap-2  md:gap-3 '>\n-                  <span className='items-center content-center'>\n-                    <GrMoney className=\"h-7 w-7 lg:h-10 lg:w-10 text-cyan-700\" />\n-                  </span>\n-                  <div>\n-                    <h2 className='md:text-2xl text-xl font-bold text-cyan-700 '>{formatCurrency(totalBalance)}</h2>\n-                    \n-                  </div>\n-                </div>\n-                <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Saldo Akhir</h3>\n-                \n-              </div>\n-             <div className='flex lg:flex-row gap-2 lg:gap-4 justify-between lg:justify-start'>\n-                <div className='flex flex-col items-center content-center  gap-2  md:gap-3 p-2 lg:p-3 border-green-500 border-2 rounded-md'>\n-                    <div className='flex items-center content-center gap-2  md:gap-3 '>\n-                      <span className=''>\n-                        <FaRegArrowAltCircleDown className=\"h-7 w-7 lg:h-10 lg:w-10 text-green-500\" />\n-                      </span>\n-                      <div>\n-                        <h2 className='md:text-2xl text-md font-bold text-green-500 '>{formatCurrency(totalIncome)}</h2>\n-                        {/* <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pemasukan</h3> */}\n-                      </div>\n-                    </div>\n-                    <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pemasukan</h3>\n-                </div>\n-                <div className='flex flex-col items-center content-center gap-2  md:gap-3 border-2 border-red-500 p-2 lg:p-3 rounded-md'>\n-                  <div className='flex items-center content-center gap-2  md:gap-3 '>\n-                    <span className=''>\n-                      <FaRegArrowAltCircleUp className=\"h-7 w-7 lg:h-10 lg:w-10 text-red-500\" />\n-                    </span>\n-                    <div>\n-                      <h2 className='md:text-2xl text-md font-bold text-red-500 '>{formatCurrency(totalExpense)}</h2>\n-                      {/* <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pengaluaran</h3> */}\n-                    </div>\n-                  </div>\n-                  <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pengaluaran</h3> \n-                   \n-                </div>\n-\n-             </div>\n-            </div>\n-          </Card>\n-    </CustomThemeProviderSecond>\n-        \n-    <CustomThemeProviderSecond>\n-        <Card>\n-            <div className='flex items-center justify-start gap-4 mb-4 mt-3 bg-cyan-700 rounded-md p-3 '>\n-                <div>\n-                    <span className='font-semibold text-white'>PERIODE</span>\n-                </div>\n-                <Select\n-                    id=\"relatedMonths\"\n-                    options={MonthOptions()}\n-                    value={MonthOptions().find(option => option.value === selectedPeriod)}\n-                    onChange={handleMonthChange}\n-                    placeholder=\"Pilih bulan\"\n-                    className='bg-cyan-700 rounded w-full md:w-1/3'\n-                    styles={{\n-                      control: (baseStyles, state) => ({\n-                        ...baseStyles,\n-                        backgroundColor: '#0e7490',\n-                      }),\n-                      input: (styles) => ({ ...styles, color: '#fff' }),\n-                      placeholder: (styles) => ({ ...styles, color: '#fff' }),\n-                      singleValue: (styles, { data }) => ({ ...styles, color: '#fff' }),\n-                    }}\n-                />\n-            </div>\n-            <div className='flex gap-1 md:gap-4 justify-between flex-row mb-4'>\n-            \n-                <Card className='bg-green-700 text-white w-1/3'>\n-                <h3 className='font-bold text-sm md:text-xl flex flex-col lg:flex-row  items-start lg:items-center content-center'>\n-                  <span className='flex'>\n-                    <span><HiHome className=\"h-5 w-5  md:h-7 md:w-7 mr-1 lg:mr-2\" /></span>\n-                    <span>IPL</span>\n-                  </span>\n-                  <span className='text-xs lg:text-sm font-normal lg:ml-3'>{`${totalHousesPaid} / ${totalHouses} Rumah`}</span>\n-                  </h3>\n-                <span className='font-semibold text-sm md:text-lg'>{percentage}</span>\n-                </Card>\n-                <Card className='bg-green-500 text-white w-1/3'>\n-                <h3 className='font-bold text-sm md:text-xl flex items-start'><span><FaRegArrowAltCircleDown className=\"h-5 w-5  md:h-7 md:w-7 mr-2\" /></span><span>Masuk</span></h3>\n-                <span className='font-semibold text-xs md:text-lg'>{formatCurrency(totalIncomePeriod)}</span>\n-                </Card>\n-                <Card className='bg-red-500 text-white w-1/3'>\n-                <h3 className='font-bold text-sm md:text-xl flex items-start'><span><FaRegArrowAltCircleUp className=\"h-5 w-5  md:h-7 md:w-7 mr-2\" /></span><span>Keluar</span></h3>\n-                <span className='font-semibold text-xs md:text-lg'>{formatCurrency(totalExpensePeriod)}</span>\n-                </Card>\n-            \n-            </div>\n-            {/* <div>{`Last Update: ${moment(lastUpdate).format('DD MMM yyyy')}`}</div> */}\n-            <CustomThemeProviderSecond>\n-              <div className=\"overflow-x-auto\">\n-                  <Table>\n-                      <Table.Head className='' >\n-                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white'>Keterangan</Table.HeadCell>\n-                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white'>Tanggal</Table.HeadCell>\n-                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white '>Nominal</Table.HeadCell>\n-                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white '></Table.HeadCell>\n-                      </Table.Head>\n-                      <Table.Body className=\"divide-y\">\n-                      {Object.keys(groupedTransactions).map((transactionType, index) => (\n-                        <React.Fragment key={index}>\n-                          {groupedTransactions[transactionType].length > 0 && (\n-                            <Table.Row className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-                              <Table.Cell colSpan=\"2\" className={`${getTextColor(transactionType)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>{transactionType === 'ipl' ? 'Pemasukan IPL' : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}</Table.Cell>\n-                              <Table.Cell className=\"items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold\">{formatCurrency(groupedTransactions[transactionType].reduce((acc, curr) => acc + curr.amount, 0))}</Table.Cell>\n-                            </Table.Row>\n-                          )}\n-                         \n-                          {groupedTransactions[transactionType].map((transaction, subIndex) => (\n-                            <Table.Row key={subIndex} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-                              <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                <span className='flex items-start'>\n-                                  <span>{getTypeIcon(transaction.transaction_type)} </span>\n-                                  <span className=\"ml-2\">{transaction.description}</span>\n-                                </span>\n-                              </Table.Cell>\n-                              <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                {moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}\n-                              </Table.Cell>\n-                              <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                {formatCurrency(transaction.amount)}\n-                              </Table.Cell>\n-                            </Table.Row>\n-                          ))}\n-                            {/* <Table.Row className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-                              <Table.Cell colSpan=\"2\" className=\"text-right font-bold\">Total {transactionType}</Table.Cell>\n-                              <Table.Cell className=\"text-right font-bold\">{formatCurrency(groupedTransactions[transactionType].reduce((acc, curr) => acc + curr.amount, 0))}</Table.Cell>\n-                            </Table.Row> */}\n-                        </React.Fragment>\n-                      ))}\n-                        \n-                      {/* {transactions && transactions.length > 0 && transactions[0] !== undefined ? (\n-                          transactions.map((transaction, index) => (\n-                              <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                      <span className='flex items-start'>\n-                                      <span>{getTypeIcon(transaction.transaction_type)} </span>\n-                                      <span className=\"ml-2\">{transaction.description}</span>\n-                                      </span>\n-                                  </Table.Cell>\n-                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                      {moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}\n-                                  </Table.Cell>\n-                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                      {formatCurrency(transaction.amount)}\n-                                  </Table.Cell>\n-                              </Table.Row>\n-                          ))\n-                          ) : (\n-                          <Table.Row>\n-                              <Table.Cell colSpan=\"3\" className=\"text-center\">Data tidak tersedia</Table.Cell>\n-                          </Table.Row>\n-                      )} */}\n-\n-                      \n-                      \n-                      </Table.Body>\n-                  </Table>\n-                  {/* {groupedTransactions? (\n-                    <>\n-                    {Object.keys(groupedTransactions).map((transactionType, index) => (\n-                      <React.Fragment key={index}>\n-                       {groupedTransactions[transactionType].length > 0 && (\n-                          <Accordion>\n-                            <Accordion.Panel>\n-                              <Accordion.Title className='py-2 px-2 md:py-3 md:px-3 '>{transactionType === 'ipl' ? 'Pemasukan IPL' : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}</Accordion.Title>\n-                              <Accordion.Panel>\n-                                sds\n-                              </Accordion.Panel>\n-                            </Accordion.Panel>\n-                          </Accordion>\n-                       )}\n-                      </React.Fragment>\n-                    ))}\n-                    </>\n-                  ) :(\n-                    <></>\n-                  )} */}\n-\n-                  {/* {groupedTransactions? (\n-                          <>\n-                            {Object.keys(groupedTransactions).map((transactionType, index) => (\n-                              <React.Fragment key={index}>\n-                                \n-                                {groupedTransactions[transactionType].length > 0 && (\n-                                  <Table.Row>\n-                                  <Table.Cell colSpan=\"4\" className='p-0'>\n-                                  <Accordion collapseAll>\n-                                  <Accordion.Panel className='rounded-none'>\n-                                  <Accordion.Title className='py-2 px-2 md:py-3 md:px-3 '>{transactionType === 'ipl' ? 'Pemasukan IPL' : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}</Accordion.Title>\n-                                    {groupedTransactions[transactionType].map((transaction, subIndex) =>(\n-                                      <Accordion.Content key={subIndex} >\n-                                        <Table  striped>\n-                                        <Table.Body>\n-                                        <Table.Row className=' border-gray-700 '>\n-                                          <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                              {`sadsa`}\n-                                          </Table.Cell>\n-                                        </Table.Row>\n-                                        </Table.Body>\n-                                        </Table>\n-                                        \n-                                      </Accordion.Content>\n-                                    ))}\n-                                  </Accordion.Panel>\n-                                </Accordion>\n-                                  </Table.Cell>\n-                                  </Table.Row>\n-                                  \n-                                )}\n-                              \n-                              </React.Fragment>\n-                            ))}\n-                          </>\n-                        ): (\n-                          <Table.Row>\n-                              <Table.Cell colSpan=\"4\" className=\"text-center\">Data belum tersedia</Table.Cell>\n-                          </Table.Row>\n-                        )} */}\n-              </div>\n-            </CustomThemeProviderSecond>\n-            \n-        </Card>\n-    </CustomThemeProviderSecond>\n-    </>\n-  );\n-}\n-\n-export const getServerSideProps = async (context) => {\n-    const session = await getSession(context);\n-    \n-    // if (!session) {\n-    //     return {\n-    //         redirect: {\n-    //             destination: '/',\n-    //             permanent: false,\n-    //         },\n-    //     };\n-    // }\n-  \n-    try {\n-        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n-            // headers: {\n-            //     Authorization: `Bearer ${session.accessToken}`,\n-            // },\n-        });\n-        return {\n-            props: {\n-              initialTransaction: res.data.data,\n-            },\n-        };\n-    } catch (error) {\n-        console.error('Error fetching tra data:', error);\n-        return {\n-            props: {\n-              initialTransaction: [],\n-            },\n-        };\n-    }\n-  };\n-\n-export default Report;\n-// pages/home.js\n-import React from 'react';\n-import {useSession ,getSession} from 'next-auth/react';\n-import { useEffect,useState } from 'react';\n-import _ from 'lodash';\n-import axios from 'axios';\n-import Spinner from './Spinner';\n-import CustomThemeProviderSecond from './CustomThemeSecond';\n-import { Card, Button, Table, Accordion } from 'flowbite-react';\n-import { GrMoney } from \"react-icons/gr\";\n-import {FaRegArrowAltCircleDown, FaRegArrowAltCircleUp } from 'react-icons/fa';\n-\n-import { HiHome } from \"react-icons/hi\";\n-\n-import Select from 'react-select';\n-import 'react-datepicker/dist/react-datepicker.css';\n-import moment from 'moment';\n-import 'moment/locale/id';\n-moment.locale('id');\n-import MonthOptions from './MonthOptions';\n-\n-const Report = ({ initialTransaction }) =>  {\n-  \n-  const [loading, setLoading] = useState(true);\n-  const { data: session, status } = useSession();\n-  const [transactions, setTransactions] = useState([initialTransaction]);\n-  const [reTransactions, setReTransactions] = useState([initialTransaction]);\n-  const [totalBalance, setTotalBalance] = useState(null);\n-  const [totalIncome, setTotalIncome] = useState(null);\n-  const [totalExpense, setTotalExpense] = useState(null);\n-  const [selectedPeriod, setSelectedPeriod] = useState(moment().format('YYYY-MM')); // Format YYYY-MM moment().format('YYYY-MM')\n-  const [monthlyBalances, setMonthlyBalances] = useState([]);\n-  const [totalIncomePeriod, setTotalIncomePeriod] = useState(0);\n-  const [totalExpensePeriod, setTotalExpensePeriod] = useState(0);\n-  const [totalHousesPaid, setTotalHousesPaid] = useState(0);\n-  const [totalHouses, setTotalHouses] = useState(0);\n-  const [lastUpdate, setLastUpdate] = useState();\n-  const [percentage, setPercentage] = useState(0);\n-\n-  \n-  const formatCurrency = (amount) => {\n-    return new Intl.NumberFormat('id-ID', {\n-        style: 'currency',\n-        currency: 'IDR',\n-        minimumFractionDigits: 0,\n-    }).format(amount);\n-  };\n-\n-  const fetchTransactions = async () => {\n-    try {\n-        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n-            params: {\n-              period: selectedPeriod\n-          }\n-        });\n-        //console.log(res.data)\n-        setTransactions(res.data.data);\n-        setReTransactions(res.data.data);\n-        setLastUpdate(res.data.lastUpdate);\n-        \n-        setLoading(false);\n-    } catch (error) {\n-        console.error('Error fetching houses data:', error);\n-        setLoading(false);\n-    }\n-  };\n-\n-  const fetchTotalBalance = async () => {\n-    try {\n-        const response = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/balance`, {\n-           \n-        });\n-       // console.log(response.data)\n-        setTotalBalance(response.data.totalBalance);\n-        setTotalIncome(response.data.totalIncome);\n-        setTotalExpense(response.data.totalExpense);\n-        setLoading(false);\n-    } catch (error) {\n-        console.error('Error fetching total balance:', error);\n-        setLoading(false);\n-    }\n-  };\n-\n-  const fetchMonthlyBalances = async () => {\n-    //console.log(selectedPeriod)\n-    try {\n-        const response = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/balance-monthly`, {\n-            params: {\n-                period: selectedPeriod\n-            }\n-        });\n-\n-        //console.log('Response data:', response.data);\n-\n-        if (Array.isArray(response.data) && response.data.length > 0) {\n-            // Gunakan data yang ada jika valid\n-            setMonthlyBalances(response.data);\n-            setTotalIncomePeriod(response.data[0].totalIncome || 0);\n-            setTotalExpensePeriod(response.data[0].totalExpense || 0);\n-        } else {\n-            // Tangani kasus jika data tidak sesuai\n-            setMonthlyBalances([]);\n-            setTotalIncomePeriod(0);\n-            setTotalExpensePeriod(0);\n-        }\n-       \n-    } catch (error) {\n-        console.error('Error fetching monthly balances:', error);\n-        setMonthlyBalances([]);\n-        setTotalIncomePeriod(0);\n-        setTotalExpensePeriod(0);\n-    }\n-  };\n-\n-  const fetchMonthlyPaid = async () => {\n-    try {\n-      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/houses/fee`, {\n-         \n-          params: {\n-            period: selectedPeriod\n-        }\n-      });\n-     // console.log(res.data)\n-      setTotalHousesPaid(res.data.total_houses_paid);\n-      setTotalHouses(res.data.total);\n-      setPercentage(res.data.percentage_paid);\n-    } catch (error) {\n-        console.error('Error fetching houses data:', error);\n-        setLoading(false);\n-    }\n-  };\n-\n-\n-  const [relatedMonths, setRelatedMonths] = useState({\n-    value: moment().format('YYYY-MM'),\n-    label: moment().format('MMMM YYYY')\n-  });\n-  \n-  const handleMonthChange = (selectedOption) => {\n-    setSelectedPeriod(selectedOption.value);\n-  };\n-\n-\n-  useEffect(() => {\n-    // Set nilai bulan saat ini saat komponen pertama kali dimuat\n-    const currentMonthOption = MonthOptions().find(\n-      (option) => option.value === moment().format('YYYY-MM')\n-    );\n-    setRelatedMonths(currentMonthOption);\n-  }, []);\n-\n-  useEffect(() => {\n-    fetchTransactions();\n-    fetchTotalBalance();\n-    fetchMonthlyPaid();\n-    fetchMonthlyBalances();\n-\n-  }, [selectedPeriod]);\n-  \n-\n-\n-  const getTypeIcon = (type) => {\n-    switch (type) {\n-      case 'income':\n-        return <FaRegArrowAltCircleDown  className=\"text-green-500 h-4 w-4 md:h-5 md:w-5 \" />;\n-      case 'expense':\n-        return <FaRegArrowAltCircleUp  className=\"text-red-500 h-4 w-4 md:h-5 md:w-5 \" />;\n-      case 'ipl':\n-        return <FaRegArrowAltCircleDown  className=\"text-green-500  h-4 w-4 md:h-5 md:w-5 \" />;\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const getTextColor = (type) => {\n-    switch (type) {\n-      case 'income':\n-        return \"text-green-500\";\n-      case 'expense':\n-        return \"text-red-500\";\n-      case 'ipl':\n-        return \"text-green-500\";\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const groupedTransactions = _.groupBy(transactions, 'transaction_type');\n-\n-   console.log(groupedTransactions)\n-  // console.log()\n-\n-  if (loading) {\n-    return <Spinner />;\n-  }\n-\n-  return (\n-    <>\n-    <CustomThemeProviderSecond>\n-          <Card className='mb-5 shadow-none'>\n-            <div className='flex flex-col lg:flex-row justify-between gap-3'>\n-              <div className='flex flex-col border-cyan-700 gap-3 border-2 p-3 rounded-md lg:w-1/2'>\n-                <div className='flex items-center content-center gap-2  md:gap-3 '>\n-                  <span className='items-center content-center'>\n-                    <GrMoney className=\"h-7 w-7 lg:h-10 lg:w-10 text-cyan-700\" />\n-                  </span>\n-                  <div>\n-                    <h2 className='md:text-2xl text-xl font-bold text-cyan-700 '>{formatCurrency(totalBalance)}</h2>\n-                    \n-                  </div>\n-                </div>\n-                <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Saldo Akhir</h3>\n-                \n-              </div>\n-             <div className='flex lg:flex-row gap-2 lg:gap-4 justify-between lg:justify-start'>\n-                <div className='flex flex-col items-center content-center  gap-2  md:gap-3 p-2 lg:p-3 border-green-500 border-2 rounded-md'>\n-                    <div className='flex items-center content-center gap-2  md:gap-3 '>\n-                      <span className=''>\n-                        <FaRegArrowAltCircleDown className=\"h-7 w-7 lg:h-10 lg:w-10 text-green-500\" />\n-                      </span>\n-                      <div>\n-                        <h2 className='md:text-2xl text-md font-bold text-green-500 '>{formatCurrency(totalIncome)}</h2>\n-                        {/* <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pemasukan</h3> */}\n-                      </div>\n-                    </div>\n-                    <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pemasukan</h3>\n-                </div>\n-                <div className='flex flex-col items-center content-center gap-2  md:gap-3 border-2 border-red-500 p-2 lg:p-3 rounded-md'>\n-                  <div className='flex items-center content-center gap-2  md:gap-3 '>\n-                    <span className=''>\n-                      <FaRegArrowAltCircleUp className=\"h-7 w-7 lg:h-10 lg:w-10 text-red-500\" />\n-                    </span>\n-                    <div>\n-                      <h2 className='md:text-2xl text-md font-bold text-red-500 '>{formatCurrency(totalExpense)}</h2>\n-                      {/* <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pengaluaran</h3> */}\n-                    </div>\n-                  </div>\n-                  <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pengaluaran</h3> \n-                   \n-                </div>\n-\n-             </div>\n-            </div>\n-          </Card>\n-    </CustomThemeProviderSecond>\n-        \n-    <CustomThemeProviderSecond>\n-        <Card>\n-            <div className='flex items-center justify-start gap-4 mb-4 mt-3 bg-cyan-700 rounded-md p-3 '>\n-                <div>\n-                    <span className='font-semibold text-white'>PERIODE</span>\n-                </div>\n-                <Select\n-                    id=\"relatedMonths\"\n-                    options={MonthOptions()}\n-                    value={MonthOptions().find(option => option.value === selectedPeriod)}\n-                    onChange={handleMonthChange}\n-                    placeholder=\"Pilih bulan\"\n-                    className='bg-cyan-700 rounded w-full md:w-1/3'\n-                    styles={{\n-                      control: (baseStyles, state) => ({\n-                        ...baseStyles,\n-                        backgroundColor: '#0e7490',\n-                      }),\n-                      input: (styles) => ({ ...styles, color: '#fff' }),\n-                      placeholder: (styles) => ({ ...styles, color: '#fff' }),\n-                      singleValue: (styles, { data }) => ({ ...styles, color: '#fff' }),\n-                    }}\n-                />\n-            </div>\n-            <div className='flex gap-1 md:gap-4 justify-between flex-row mb-4'>\n-            \n-                <Card className='bg-green-700 text-white w-1/3'>\n-                <h3 className='font-bold text-sm md:text-xl flex flex-col lg:flex-row  items-start lg:items-center content-center'>\n-                  <span className='flex'>\n-                    <span><HiHome className=\"h-5 w-5  md:h-7 md:w-7 mr-1 lg:mr-2\" /></span>\n-                    <span>IPL</span>\n-                  </span>\n-                  <span className='text-xs lg:text-sm font-normal lg:ml-3'>{`${totalHousesPaid} / ${totalHouses} Rumah`}</span>\n-                  </h3>\n-                <span className='font-semibold text-sm md:text-lg'>{percentage}</span>\n-                </Card>\n-                <Card className='bg-green-500 text-white w-1/3'>\n-                <h3 className='font-bold text-sm md:text-xl flex items-start'><span><FaRegArrowAltCircleDown className=\"h-5 w-5  md:h-7 md:w-7 mr-2\" /></span><span>Masuk</span></h3>\n-                <span className='font-semibold text-xs md:text-lg'>{formatCurrency(totalIncomePeriod)}</span>\n-                </Card>\n-                <Card className='bg-red-500 text-white w-1/3'>\n-                <h3 className='font-bold text-sm md:text-xl flex items-start'><span><FaRegArrowAltCircleUp className=\"h-5 w-5  md:h-7 md:w-7 mr-2\" /></span><span>Keluar</span></h3>\n-                <span className='font-semibold text-xs md:text-lg'>{formatCurrency(totalExpensePeriod)}</span>\n-                </Card>\n-            \n-            </div>\n-            {/* <div>{`Last Update: ${moment(lastUpdate).format('DD MMM yyyy')}`}</div> */}\n-            <CustomThemeProviderSecond>\n-              <div className=\"overflow-x-auto\">\n-                  <Table>\n-                      <Table.Head className='' >\n-                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white'>Keterangan</Table.HeadCell>\n-                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white'>Tanggal</Table.HeadCell>\n-                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white '>Nominal</Table.HeadCell>\n-                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white '></Table.HeadCell>\n-                      </Table.Head>\n-                      <Table.Body className=\"divide-y\">\n-                      {Object.keys(groupedTransactions).map((transactionType, index) => (\n-                        <React.Fragment key={index}>\n-                          {groupedTransactions[transactionType].length > 0 && (\n-                            <Table.Row className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-                              <Table.Cell colSpan=\"2\" className=\"py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold\">{transactionType === 'ipl' ? 'Pemasukan IPL' : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}</Table.Cell>\n-                              <Table.Cell className=\"items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold\">{formatCurrency(groupedTransactions[transactionType].reduce((acc, curr) => acc + curr.amount, 0))}</Table.Cell>\n-                            </Table.Row>\n-                          )}\n-                         \n-                          {groupedTransactions[transactionType].map((transaction, subIndex) => (\n-                            <Table.Row key={subIndex} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-                              <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                <span className='flex items-start'>\n-                                  <span>{getTypeIcon(transaction.transaction_type)} </span>\n-                                  <span className=\"ml-2\">{transaction.description}</span>\n-                                </span>\n-                              </Table.Cell>\n-                              <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                {moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}\n-                              </Table.Cell>\n-                              <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                {formatCurrency(transaction.amount)}\n-                              </Table.Cell>\n-                            </Table.Row>\n-                          ))}\n-                          <Table.Row className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-                            <Table.Cell colSpan=\"2\" className=\"text-right font-bold\">Total {transactionType}</Table.Cell>\n-                            <Table.Cell className=\"text-right font-bold\">{formatCurrency(groupedTransactions[transactionType].reduce((acc, curr) => acc + curr.amount, 0))}</Table.Cell>\n-                          </Table.Row>\n-                        </React.Fragment>\n-                      ))}\n-                        \n-                      {/* {transactions && transactions.length > 0 && transactions[0] !== undefined ? (\n-                          transactions.map((transaction, index) => (\n-                              <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                      <span className='flex items-start'>\n-                                      <span>{getTypeIcon(transaction.transaction_type)} </span>\n-                                      <span className=\"ml-2\">{transaction.description}</span>\n-                                      </span>\n-                                  </Table.Cell>\n-                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                      {moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}\n-                                  </Table.Cell>\n-                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                      {formatCurrency(transaction.amount)}\n-                                  </Table.Cell>\n-                              </Table.Row>\n-                          ))\n-                          ) : (\n-                          <Table.Row>\n-                              <Table.Cell colSpan=\"3\" className=\"text-center\">Data tidak tersedia</Table.Cell>\n-                          </Table.Row>\n-                      )} */}\n-\n-                      \n-                      \n-                      </Table.Body>\n-                  </Table>\n-                  {/* {groupedTransactions? (\n-                    <>\n-                    {Object.keys(groupedTransactions).map((transactionType, index) => (\n-                      <React.Fragment key={index}>\n-                       {groupedTransactions[transactionType].length > 0 && (\n-                          <Accordion>\n-                            <Accordion.Panel>\n-                              <Accordion.Title className='py-2 px-2 md:py-3 md:px-3 '>{transactionType === 'ipl' ? 'Pemasukan IPL' : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}</Accordion.Title>\n-                              <Accordion.Panel>\n-                                sds\n-                              </Accordion.Panel>\n-                            </Accordion.Panel>\n-                          </Accordion>\n-                       )}\n-                      </React.Fragment>\n-                    ))}\n-                    </>\n-                  ) :(\n-                    <></>\n-                  )} */}\n-\n-                  {/* {groupedTransactions? (\n-                          <>\n-                            {Object.keys(groupedTransactions).map((transactionType, index) => (\n-                              <React.Fragment key={index}>\n-                                \n-                                {groupedTransactions[transactionType].length > 0 && (\n-                                  <Table.Row>\n-                                  <Table.Cell colSpan=\"4\" className='p-0'>\n-                                  <Accordion collapseAll>\n-                                  <Accordion.Panel className='rounded-none'>\n-                                  <Accordion.Title className='py-2 px-2 md:py-3 md:px-3 '>{transactionType === 'ipl' ? 'Pemasukan IPL' : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}</Accordion.Title>\n-                                    {groupedTransactions[transactionType].map((transaction, subIndex) =>(\n-                                      <Accordion.Content key={subIndex} >\n-                                        <Table  striped>\n-                                        <Table.Body>\n-                                        <Table.Row className=' border-gray-700 '>\n-                                          <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                              {`sadsa`}\n-                                          </Table.Cell>\n-                                        </Table.Row>\n-                                        </Table.Body>\n-                                        </Table>\n-                                        \n-                                      </Accordion.Content>\n-                                    ))}\n-                                  </Accordion.Panel>\n-                                </Accordion>\n-                                  </Table.Cell>\n-                                  </Table.Row>\n-                                  \n-                                )}\n-                              \n-                              </React.Fragment>\n-                            ))}\n-                          </>\n-                        ): (\n-                          <Table.Row>\n-                              <Table.Cell colSpan=\"4\" className=\"text-center\">Data belum tersedia</Table.Cell>\n-                          </Table.Row>\n-                        )} */}\n-              </div>\n-            </CustomThemeProviderSecond>\n-            \n-        </Card>\n-    </CustomThemeProviderSecond>\n-    </>\n-  );\n-}\n-\n-export const getServerSideProps = async (context) => {\n-    const session = await getSession(context);\n-    \n-    // if (!session) {\n-    //     return {\n-    //         redirect: {\n-    //             destination: '/',\n-    //             permanent: false,\n-    //         },\n-    //     };\n-    // }\n-  \n-    try {\n-        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n-            // headers: {\n-            //     Authorization: `Bearer ${session.accessToken}`,\n-            // },\n-        });\n-        return {\n-            props: {\n-              initialTransaction: res.data.data,\n-            },\n-        };\n-    } catch (error) {\n-        console.error('Error fetching tra data:', error);\n-        return {\n-            props: {\n-              initialTransaction: [],\n-            },\n-        };\n-    }\n-  };\n-\n export default Report;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722340041072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -305,9 +305,9 @@\n                         <React.Fragment key={index}>\n                           {groupedTransactions[transactionType].length > 0 && (\n                             <Table.Row className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n                               <Table.Cell colSpan=\"2\" className={`${getTextColor(transactionType)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>\n-                                {transactionType === 'ipl' ? 'Pemasukan IPL' : transactionType === 'income' ? `{${totalHousesPaid} / ${totalHouses} Rumah}` : transactionType === 'expense' ? 'Pengeluaran' : ''}\n+                                {transactionType === 'ipl' ? {`${totalHousesPaid} / ${totalHouses} Rumah`} : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}\n                                 </Table.Cell>\n                               <Table.Cell className={`${getTextColor(transactionType)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>{formatCurrency(groupedTransactions[transactionType].reduce((acc, curr) => acc + curr.amount, 0))}</Table.Cell>\n                             </Table.Row>\n                           )}\n"
                },
                {
                    "date": 1722340055260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -305,9 +305,9 @@\n                         <React.Fragment key={index}>\n                           {groupedTransactions[transactionType].length > 0 && (\n                             <Table.Row className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n                               <Table.Cell colSpan=\"2\" className={`${getTextColor(transactionType)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>\n-                                {transactionType === 'ipl' ? {`${totalHousesPaid} / ${totalHouses} Rumah`} : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}\n+                                {transactionType === 'ipl' ? `Pemasukan IPL` : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}\n                                 </Table.Cell>\n                               <Table.Cell className={`${getTextColor(transactionType)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>{formatCurrency(groupedTransactions[transactionType].reduce((acc, curr) => acc + curr.amount, 0))}</Table.Cell>\n                             </Table.Row>\n                           )}\n"
                },
                {
                    "date": 1722340240865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,405 @@\n+// pages/home.js\n+import React from 'react';\n+import {useSession ,getSession} from 'next-auth/react';\n+import { useEffect,useState } from 'react';\n+import _ from 'lodash';\n+import axios from 'axios';\n+import Spinner from './Spinner';\n+import CustomThemeProviderSecond from './CustomThemeSecond';\n+import { Card, Button, Table, Accordion } from 'flowbite-react';\n+import { GrMoney } from \"react-icons/gr\";\n+import {FaRegArrowAltCircleDown, FaRegArrowAltCircleUp } from 'react-icons/fa';\n+\n+import { HiHome } from \"react-icons/hi\";\n+\n+import Select from 'react-select';\n+import 'react-datepicker/dist/react-datepicker.css';\n+import moment from 'moment';\n+import 'moment/locale/id';\n+moment.locale('id');\n+import MonthOptions from './MonthOptions';\n+\n+const Report = ({ initialTransaction }) =>  {\n+  \n+  const [loading, setLoading] = useState(true);\n+  const { data: session, status } = useSession();\n+  const [transactions, setTransactions] = useState([initialTransaction]);\n+  const [reTransactions, setReTransactions] = useState([initialTransaction]);\n+  const [totalBalance, setTotalBalance] = useState(null);\n+  const [totalIncome, setTotalIncome] = useState(null);\n+  const [totalExpense, setTotalExpense] = useState(null);\n+  const [selectedPeriod, setSelectedPeriod] = useState(moment().format('YYYY-MM')); // Format YYYY-MM moment().format('YYYY-MM')\n+  const [monthlyBalances, setMonthlyBalances] = useState([]);\n+  const [totalIncomePeriod, setTotalIncomePeriod] = useState(0);\n+  const [totalExpensePeriod, setTotalExpensePeriod] = useState(0);\n+  const [totalHousesPaid, setTotalHousesPaid] = useState(0);\n+  const [totalHouses, setTotalHouses] = useState(0);\n+  const [lastUpdate, setLastUpdate] = useState();\n+  const [percentage, setPercentage] = useState(0);\n+\n+  \n+  const formatCurrency = (amount) => {\n+    return new Intl.NumberFormat('id-ID', {\n+        style: 'currency',\n+        currency: 'IDR',\n+        minimumFractionDigits: 0,\n+    }).format(amount);\n+  };\n+\n+  const fetchTransactions = async () => {\n+    try {\n+        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n+            params: {\n+              period: selectedPeriod\n+          }\n+        });\n+        //console.log(res.data)\n+        setTransactions(res.data.data);\n+        setReTransactions(res.data.data);\n+        setLastUpdate(res.data.lastUpdate);\n+        \n+        setLoading(false);\n+    } catch (error) {\n+        console.error('Error fetching houses data:', error);\n+        setLoading(false);\n+    }\n+  };\n+\n+  const fetchTotalBalance = async () => {\n+    try {\n+        const response = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/balance`, {\n+           \n+        });\n+       // console.log(response.data)\n+        setTotalBalance(response.data.totalBalance);\n+        setTotalIncome(response.data.totalIncome);\n+        setTotalExpense(response.data.totalExpense);\n+        setLoading(false);\n+    } catch (error) {\n+        console.error('Error fetching total balance:', error);\n+        setLoading(false);\n+    }\n+  };\n+\n+  const fetchMonthlyBalances = async () => {\n+    //console.log(selectedPeriod)\n+    try {\n+        const response = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/balance-monthly`, {\n+            params: {\n+                period: selectedPeriod\n+            }\n+        });\n+\n+        //console.log('Response data:', response.data);\n+\n+        if (Array.isArray(response.data) && response.data.length > 0) {\n+            // Gunakan data yang ada jika valid\n+            setMonthlyBalances(response.data);\n+            setTotalIncomePeriod(response.data[0].totalIncome || 0);\n+            setTotalExpensePeriod(response.data[0].totalExpense || 0);\n+        } else {\n+            // Tangani kasus jika data tidak sesuai\n+            setMonthlyBalances([]);\n+            setTotalIncomePeriod(0);\n+            setTotalExpensePeriod(0);\n+        }\n+       \n+    } catch (error) {\n+        console.error('Error fetching monthly balances:', error);\n+        setMonthlyBalances([]);\n+        setTotalIncomePeriod(0);\n+        setTotalExpensePeriod(0);\n+    }\n+  };\n+\n+  const fetchMonthlyPaid = async () => {\n+    try {\n+      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/houses/fee`, {\n+         \n+          params: {\n+            period: selectedPeriod\n+        }\n+      });\n+     // console.log(res.data)\n+      setTotalHousesPaid(res.data.total_houses_paid);\n+      setTotalHouses(res.data.total);\n+      setPercentage(res.data.percentage_paid);\n+    } catch (error) {\n+        console.error('Error fetching houses data:', error);\n+        setLoading(false);\n+    }\n+  };\n+\n+\n+  const [relatedMonths, setRelatedMonths] = useState({\n+    value: moment().format('YYYY-MM'),\n+    label: moment().format('MMMM YYYY')\n+  });\n+  \n+  const handleMonthChange = (selectedOption) => {\n+    setSelectedPeriod(selectedOption.value);\n+  };\n+\n+\n+  useEffect(() => {\n+    // Set nilai bulan saat ini saat komponen pertama kali dimuat\n+    const currentMonthOption = MonthOptions().find(\n+      (option) => option.value === moment().format('YYYY-MM')\n+    );\n+    setRelatedMonths(currentMonthOption);\n+  }, []);\n+\n+  useEffect(() => {\n+    fetchTransactions();\n+    fetchTotalBalance();\n+    fetchMonthlyPaid();\n+    fetchMonthlyBalances();\n+\n+  }, [selectedPeriod]);\n+  \n+\n+\n+  const getTypeIcon = (type) => {\n+    switch (type) {\n+      case 'income':\n+        return <FaRegArrowAltCircleDown  className=\"text-green-500 h-4 w-4 md:h-5 md:w-5 \" />;\n+      case 'expense':\n+        return <FaRegArrowAltCircleUp  className=\"text-red-500 h-4 w-4 md:h-5 md:w-5 \" />;\n+      case 'ipl':\n+        return <FaRegArrowAltCircleDown  className=\"text-green-700  h-4 w-4 md:h-5 md:w-5 \" />;\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const getTextColor = (type) => {\n+    switch (type) {\n+      case 'income':\n+        return \"text-green-500\";\n+      case 'expense':\n+        return \"text-red-500\";\n+      case 'ipl':\n+        return \"text-green-700\";\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const groupedTransactions = _.groupBy(transactions, 'transaction_type');\n+\n+   console.log(groupedTransactions)\n+  // console.log()\n+\n+  if (loading) {\n+    return <Spinner />;\n+  }\n+\n+  return (\n+    <>\n+    <CustomThemeProviderSecond>\n+          <Card className='mb-5 shadow-none'>\n+            <div className='flex flex-col lg:flex-row justify-between gap-3'>\n+              <div className='flex flex-col border-cyan-700 gap-3 border-2 p-3 rounded-md lg:w-1/2'>\n+                <div className='flex items-center content-center gap-2  md:gap-3 '>\n+                  <span className='items-center content-center'>\n+                    <GrMoney className=\"h-7 w-7 lg:h-10 lg:w-10 text-cyan-700\" />\n+                  </span>\n+                  <div>\n+                    <h2 className='md:text-2xl text-xl font-bold text-cyan-700 '>{formatCurrency(totalBalance)}</h2>\n+                    \n+                  </div>\n+                </div>\n+                <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Saldo Akhir</h3>\n+                \n+              </div>\n+             <div className='flex lg:flex-row gap-2 lg:gap-4 justify-between lg:justify-start'>\n+                <div className='flex flex-col items-center content-center  gap-2  md:gap-3 p-2 lg:p-3 border-green-500 border-2 rounded-md'>\n+                    <div className='flex items-center content-center gap-2  md:gap-3 '>\n+                      <span className=''>\n+                        <FaRegArrowAltCircleDown className=\"h-7 w-7 lg:h-10 lg:w-10 text-green-500\" />\n+                      </span>\n+                      <div>\n+                        <h2 className='md:text-2xl text-md font-bold text-green-500 '>{formatCurrency(totalIncome)}</h2>\n+                        {/* <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pemasukan</h3> */}\n+                      </div>\n+                    </div>\n+                    <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pemasukan</h3>\n+                </div>\n+                <div className='flex flex-col items-center content-center gap-2  md:gap-3 border-2 border-red-500 p-2 lg:p-3 rounded-md'>\n+                  <div className='flex items-center content-center gap-2  md:gap-3 '>\n+                    <span className=''>\n+                      <FaRegArrowAltCircleUp className=\"h-7 w-7 lg:h-10 lg:w-10 text-red-500\" />\n+                    </span>\n+                    <div>\n+                      <h2 className='md:text-2xl text-md font-bold text-red-500 '>{formatCurrency(totalExpense)}</h2>\n+                      {/* <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pengaluaran</h3> */}\n+                    </div>\n+                  </div>\n+                  <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pengaluaran</h3> \n+                   \n+                </div>\n+\n+             </div>\n+            </div>\n+          </Card>\n+    </CustomThemeProviderSecond>\n+        \n+    <CustomThemeProviderSecond>\n+        <Card>\n+            <div className='flex items-center justify-start gap-4 mb-4 mt-3 bg-cyan-700 rounded-md p-3 '>\n+                <div>\n+                    <span className='font-semibold text-white'>PERIODE</span>\n+                </div>\n+                <Select\n+                    id=\"relatedMonths\"\n+                    options={MonthOptions()}\n+                    value={MonthOptions().find(option => option.value === selectedPeriod)}\n+                    onChange={handleMonthChange}\n+                    placeholder=\"Pilih bulan\"\n+                    className='bg-cyan-700 rounded w-full md:w-1/3'\n+                    styles={{\n+                      control: (baseStyles, state) => ({\n+                        ...baseStyles,\n+                        backgroundColor: '#0e7490',\n+                      }),\n+                      input: (styles) => ({ ...styles, color: '#fff' }),\n+                      placeholder: (styles) => ({ ...styles, color: '#fff' }),\n+                      singleValue: (styles, { data }) => ({ ...styles, color: '#fff' }),\n+                    }}\n+                />\n+            </div>\n+            <div className='flex gap-1 md:gap-4 justify-between flex-row mb-4'>\n+            \n+                <Card className='bg-green-700 text-white w-1/3'>\n+                <h3 className='font-bold text-sm md:text-xl flex flex-col lg:flex-row  items-start lg:items-center content-center'>\n+                  <span className='flex'>\n+                    <span><HiHome className=\"h-5 w-5  md:h-7 md:w-7 mr-1 lg:mr-2\" /></span>\n+                    <span>IPL</span>\n+                  </span>\n+                  <span className='text-xs lg:text-sm font-normal lg:ml-3'>{`${totalHousesPaid} / ${totalHouses} Rumah`}</span>\n+                  </h3>\n+                <span className='font-semibold text-sm md:text-lg'>{percentage}</span>\n+                </Card>\n+                <Card className='bg-green-500 text-white w-1/3'>\n+                <h3 className='font-bold text-sm md:text-xl flex items-start'><span><FaRegArrowAltCircleDown className=\"h-5 w-5  md:h-7 md:w-7 mr-2\" /></span><span>Masuk</span></h3>\n+                <span className='font-semibold text-xs md:text-lg'>{formatCurrency(totalIncomePeriod)}</span>\n+                </Card>\n+                <Card className='bg-red-500 text-white w-1/3'>\n+                <h3 className='font-bold text-sm md:text-xl flex items-start'><span><FaRegArrowAltCircleUp className=\"h-5 w-5  md:h-7 md:w-7 mr-2\" /></span><span>Keluar</span></h3>\n+                <span className='font-semibold text-xs md:text-lg'>{formatCurrency(totalExpensePeriod)}</span>\n+                </Card>\n+            \n+            </div>\n+            {/* <div>{`Last Update: ${moment(lastUpdate).format('DD MMM yyyy')}`}</div> */}\n+            <CustomThemeProviderSecond>\n+              <div className=\"overflow-x-auto\">\n+                  <Table>\n+                      <Table.Head className='' >\n+                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white'>Keterangan</Table.HeadCell>\n+                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white'>Tanggal</Table.HeadCell>\n+                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white '>Nominal</Table.HeadCell>\n+                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white '></Table.HeadCell>\n+                      </Table.Head>\n+                      <Table.Body className=\"divide-y\">\n+                      {Object.keys(groupedTransactions).map((transactionType, index) => (\n+                        <React.Fragment key={index}>\n+                          {groupedTransactions[transactionType].length > 0 && (\n+                            <Table.Row className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n+                              <Table.Cell colSpan=\"2\" className={`${getTextColor(transactionType)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>\n+                                {transactionType === 'ipl' ? `Pemasukan IPL` : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}\n+                                </Table.Cell>\n+                              <Table.Cell className={`${getTextColor(transactionType)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>{formatCurrency(groupedTransactions[transactionType].reduce((acc, curr) => acc + curr.amount, 0))}</Table.Cell>\n+                            </Table.Row>\n+                          )}\n+                         \n+                          {groupedTransactions[transactionType].map((transaction, subIndex) => (\n+                            <Table.Row key={subIndex} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n+                              <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                <span className='flex items-start'>\n+                                  <span>{getTypeIcon(transaction.transaction_type)} </span>\n+                                  <span className=\"ml-2\">{transaction.description}</span>\n+                                </span>\n+                              </Table.Cell>\n+                              <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                {moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}\n+                              </Table.Cell>\n+                              <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                {formatCurrency(transaction.amount)}\n+                              </Table.Cell>\n+                            </Table.Row>\n+                          ))}\n+                           \n+                        </React.Fragment>\n+                      ))}\n+                        \n+                      {/* {transactions && transactions.length > 0 && transactions[0] !== undefined ? (\n+                          transactions.map((transaction, index) => (\n+                              <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n+                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                      <span className='flex items-start'>\n+                                      <span>{getTypeIcon(transaction.transaction_type)} </span>\n+                                      <span className=\"ml-2\">{transaction.description}</span>\n+                                      </span>\n+                                  </Table.Cell>\n+                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                      {moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}\n+                                  </Table.Cell>\n+                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                      {formatCurrency(transaction.amount)}\n+                                  </Table.Cell>\n+                              </Table.Row>\n+                          ))\n+                          ) : (\n+                          <Table.Row>\n+                              <Table.Cell colSpan=\"3\" className=\"text-center\">Data tidak tersedia</Table.Cell>\n+                          </Table.Row>\n+                      )} */}\n+\n+                      \n+                      \n+                      </Table.Body>\n+                  </Table>\n+                  \n+              </div>\n+            </CustomThemeProviderSecond>\n+            \n+        </Card>\n+    </CustomThemeProviderSecond>\n+    </>\n+  );\n+}\n+\n+export const getServerSideProps = async (context) => {\n+    const session = await getSession(context);\n+    \n+    // if (!session) {\n+    //     return {\n+    //         redirect: {\n+    //             destination: '/',\n+    //             permanent: false,\n+    //         },\n+    //     };\n+    // }\n+  \n+    try {\n+        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n+            // headers: {\n+            //     Authorization: `Bearer ${session.accessToken}`,\n+            // },\n+        });\n+        return {\n+            props: {\n+              initialTransaction: res.data.data,\n+            },\n+        };\n+    } catch (error) {\n+        console.error('Error fetching tra data:', error);\n+        return {\n+            props: {\n+              initialTransaction: [],\n+            },\n+        };\n+    }\n+  };\n+\n+export default Report;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722340678153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -300,9 +300,11 @@\n                           <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white '>Nominal</Table.HeadCell>\n                           <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white '></Table.HeadCell>\n                       </Table.Head>\n                       <Table.Body className=\"divide-y\">\n-                      {Object.keys(groupedTransactions).map((transactionType, index) => (\n+                        {transactions && transactions.length > 0 && transactions[0] !== undefined ? (\n+                          <>\n+                            {Object.keys(groupedTransactions).map((transactionType, index) => (\n                         <React.Fragment key={index}>\n                           {groupedTransactions[transactionType].length > 0 && (\n                             <Table.Row className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n                               <Table.Cell colSpan=\"2\" className={`${getTextColor(transactionType)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>\n@@ -329,414 +331,16 @@\n                             </Table.Row>\n                           ))}\n                            \n                         </React.Fragment>\n-                      ))}\n-                        \n-                      {/* {transactions && transactions.length > 0 && transactions[0] !== undefined ? (\n-                          transactions.map((transaction, index) => (\n-                              <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                      <span className='flex items-start'>\n-                                      <span>{getTypeIcon(transaction.transaction_type)} </span>\n-                                      <span className=\"ml-2\">{transaction.description}</span>\n-                                      </span>\n-                                  </Table.Cell>\n-                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                      {moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}\n-                                  </Table.Cell>\n-                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                      {formatCurrency(transaction.amount)}\n-                                  </Table.Cell>\n-                              </Table.Row>\n-                          ))\n-                          ) : (\n+                            ))}\n+                          </>\n+                        ) : (\n                           <Table.Row>\n-                              <Table.Cell colSpan=\"3\" className=\"text-center\">Data tidak tersedia</Table.Cell>\n+                          <Table.Cell colSpan=\"3\" className=\"text-center\">Data tidak tersedia</Table.Cell>\n                           </Table.Row>\n-                      )} */}\n-\n+                        ) }\n                       \n-                      \n-                      </Table.Body>\n-                  </Table>\n-                  \n-              </div>\n-            </CustomThemeProviderSecond>\n-            \n-        </Card>\n-    </CustomThemeProviderSecond>\n-    </>\n-  );\n-}\n-\n-export const getServerSideProps = async (context) => {\n-    const session = await getSession(context);\n-    \n-    // if (!session) {\n-    //     return {\n-    //         redirect: {\n-    //             destination: '/',\n-    //             permanent: false,\n-    //         },\n-    //     };\n-    // }\n-  \n-    try {\n-        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n-            // headers: {\n-            //     Authorization: `Bearer ${session.accessToken}`,\n-            // },\n-        });\n-        return {\n-            props: {\n-              initialTransaction: res.data.data,\n-            },\n-        };\n-    } catch (error) {\n-        console.error('Error fetching tra data:', error);\n-        return {\n-            props: {\n-              initialTransaction: [],\n-            },\n-        };\n-    }\n-  };\n-\n-export default Report;\n-// pages/home.js\n-import React from 'react';\n-import {useSession ,getSession} from 'next-auth/react';\n-import { useEffect,useState } from 'react';\n-import _ from 'lodash';\n-import axios from 'axios';\n-import Spinner from './Spinner';\n-import CustomThemeProviderSecond from './CustomThemeSecond';\n-import { Card, Button, Table, Accordion } from 'flowbite-react';\n-import { GrMoney } from \"react-icons/gr\";\n-import {FaRegArrowAltCircleDown, FaRegArrowAltCircleUp } from 'react-icons/fa';\n-\n-import { HiHome } from \"react-icons/hi\";\n-\n-import Select from 'react-select';\n-import 'react-datepicker/dist/react-datepicker.css';\n-import moment from 'moment';\n-import 'moment/locale/id';\n-moment.locale('id');\n-import MonthOptions from './MonthOptions';\n-\n-const Report = ({ initialTransaction }) =>  {\n-  \n-  const [loading, setLoading] = useState(true);\n-  const { data: session, status } = useSession();\n-  const [transactions, setTransactions] = useState([initialTransaction]);\n-  const [reTransactions, setReTransactions] = useState([initialTransaction]);\n-  const [totalBalance, setTotalBalance] = useState(null);\n-  const [totalIncome, setTotalIncome] = useState(null);\n-  const [totalExpense, setTotalExpense] = useState(null);\n-  const [selectedPeriod, setSelectedPeriod] = useState(moment().format('YYYY-MM')); // Format YYYY-MM moment().format('YYYY-MM')\n-  const [monthlyBalances, setMonthlyBalances] = useState([]);\n-  const [totalIncomePeriod, setTotalIncomePeriod] = useState(0);\n-  const [totalExpensePeriod, setTotalExpensePeriod] = useState(0);\n-  const [totalHousesPaid, setTotalHousesPaid] = useState(0);\n-  const [totalHouses, setTotalHouses] = useState(0);\n-  const [lastUpdate, setLastUpdate] = useState();\n-  const [percentage, setPercentage] = useState(0);\n-\n-  \n-  const formatCurrency = (amount) => {\n-    return new Intl.NumberFormat('id-ID', {\n-        style: 'currency',\n-        currency: 'IDR',\n-        minimumFractionDigits: 0,\n-    }).format(amount);\n-  };\n-\n-  const fetchTransactions = async () => {\n-    try {\n-        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n-            params: {\n-              period: selectedPeriod\n-          }\n-        });\n-        //console.log(res.data)\n-        setTransactions(res.data.data);\n-        setReTransactions(res.data.data);\n-        setLastUpdate(res.data.lastUpdate);\n-        \n-        setLoading(false);\n-    } catch (error) {\n-        console.error('Error fetching houses data:', error);\n-        setLoading(false);\n-    }\n-  };\n-\n-  const fetchTotalBalance = async () => {\n-    try {\n-        const response = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/balance`, {\n-           \n-        });\n-       // console.log(response.data)\n-        setTotalBalance(response.data.totalBalance);\n-        setTotalIncome(response.data.totalIncome);\n-        setTotalExpense(response.data.totalExpense);\n-        setLoading(false);\n-    } catch (error) {\n-        console.error('Error fetching total balance:', error);\n-        setLoading(false);\n-    }\n-  };\n-\n-  const fetchMonthlyBalances = async () => {\n-    //console.log(selectedPeriod)\n-    try {\n-        const response = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/balance-monthly`, {\n-            params: {\n-                period: selectedPeriod\n-            }\n-        });\n-\n-        //console.log('Response data:', response.data);\n-\n-        if (Array.isArray(response.data) && response.data.length > 0) {\n-            // Gunakan data yang ada jika valid\n-            setMonthlyBalances(response.data);\n-            setTotalIncomePeriod(response.data[0].totalIncome || 0);\n-            setTotalExpensePeriod(response.data[0].totalExpense || 0);\n-        } else {\n-            // Tangani kasus jika data tidak sesuai\n-            setMonthlyBalances([]);\n-            setTotalIncomePeriod(0);\n-            setTotalExpensePeriod(0);\n-        }\n-       \n-    } catch (error) {\n-        console.error('Error fetching monthly balances:', error);\n-        setMonthlyBalances([]);\n-        setTotalIncomePeriod(0);\n-        setTotalExpensePeriod(0);\n-    }\n-  };\n-\n-  const fetchMonthlyPaid = async () => {\n-    try {\n-      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/houses/fee`, {\n-         \n-          params: {\n-            period: selectedPeriod\n-        }\n-      });\n-     // console.log(res.data)\n-      setTotalHousesPaid(res.data.total_houses_paid);\n-      setTotalHouses(res.data.total);\n-      setPercentage(res.data.percentage_paid);\n-    } catch (error) {\n-        console.error('Error fetching houses data:', error);\n-        setLoading(false);\n-    }\n-  };\n-\n-\n-  const [relatedMonths, setRelatedMonths] = useState({\n-    value: moment().format('YYYY-MM'),\n-    label: moment().format('MMMM YYYY')\n-  });\n-  \n-  const handleMonthChange = (selectedOption) => {\n-    setSelectedPeriod(selectedOption.value);\n-  };\n-\n-\n-  useEffect(() => {\n-    // Set nilai bulan saat ini saat komponen pertama kali dimuat\n-    const currentMonthOption = MonthOptions().find(\n-      (option) => option.value === moment().format('YYYY-MM')\n-    );\n-    setRelatedMonths(currentMonthOption);\n-  }, []);\n-\n-  useEffect(() => {\n-    fetchTransactions();\n-    fetchTotalBalance();\n-    fetchMonthlyPaid();\n-    fetchMonthlyBalances();\n-\n-  }, [selectedPeriod]);\n-  \n-\n-\n-  const getTypeIcon = (type) => {\n-    switch (type) {\n-      case 'income':\n-        return <FaRegArrowAltCircleDown  className=\"text-green-500 h-4 w-4 md:h-5 md:w-5 \" />;\n-      case 'expense':\n-        return <FaRegArrowAltCircleUp  className=\"text-red-500 h-4 w-4 md:h-5 md:w-5 \" />;\n-      case 'ipl':\n-        return <FaRegArrowAltCircleDown  className=\"text-green-700  h-4 w-4 md:h-5 md:w-5 \" />;\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const getTextColor = (type) => {\n-    switch (type) {\n-      case 'income':\n-        return \"text-green-500\";\n-      case 'expense':\n-        return \"text-red-500\";\n-      case 'ipl':\n-        return \"text-green-700\";\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const groupedTransactions = _.groupBy(transactions, 'transaction_type');\n-\n-   console.log(groupedTransactions)\n-  // console.log()\n-\n-  if (loading) {\n-    return <Spinner />;\n-  }\n-\n-  return (\n-    <>\n-    <CustomThemeProviderSecond>\n-          <Card className='mb-5 shadow-none'>\n-            <div className='flex flex-col lg:flex-row justify-between gap-3'>\n-              <div className='flex flex-col border-cyan-700 gap-3 border-2 p-3 rounded-md lg:w-1/2'>\n-                <div className='flex items-center content-center gap-2  md:gap-3 '>\n-                  <span className='items-center content-center'>\n-                    <GrMoney className=\"h-7 w-7 lg:h-10 lg:w-10 text-cyan-700\" />\n-                  </span>\n-                  <div>\n-                    <h2 className='md:text-2xl text-xl font-bold text-cyan-700 '>{formatCurrency(totalBalance)}</h2>\n-                    \n-                  </div>\n-                </div>\n-                <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Saldo Akhir</h3>\n-                \n-              </div>\n-             <div className='flex lg:flex-row gap-2 lg:gap-4 justify-between lg:justify-start'>\n-                <div className='flex flex-col items-center content-center  gap-2  md:gap-3 p-2 lg:p-3 border-green-500 border-2 rounded-md'>\n-                    <div className='flex items-center content-center gap-2  md:gap-3 '>\n-                      <span className=''>\n-                        <FaRegArrowAltCircleDown className=\"h-7 w-7 lg:h-10 lg:w-10 text-green-500\" />\n-                      </span>\n-                      <div>\n-                        <h2 className='md:text-2xl text-md font-bold text-green-500 '>{formatCurrency(totalIncome)}</h2>\n-                        {/* <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pemasukan</h3> */}\n-                      </div>\n-                    </div>\n-                    <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pemasukan</h3>\n-                </div>\n-                <div className='flex flex-col items-center content-center gap-2  md:gap-3 border-2 border-red-500 p-2 lg:p-3 rounded-md'>\n-                  <div className='flex items-center content-center gap-2  md:gap-3 '>\n-                    <span className=''>\n-                      <FaRegArrowAltCircleUp className=\"h-7 w-7 lg:h-10 lg:w-10 text-red-500\" />\n-                    </span>\n-                    <div>\n-                      <h2 className='md:text-2xl text-md font-bold text-red-500 '>{formatCurrency(totalExpense)}</h2>\n-                      {/* <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pengaluaran</h3> */}\n-                    </div>\n-                  </div>\n-                  <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pengaluaran</h3> \n-                   \n-                </div>\n-\n-             </div>\n-            </div>\n-          </Card>\n-    </CustomThemeProviderSecond>\n-        \n-    <CustomThemeProviderSecond>\n-        <Card>\n-            <div className='flex items-center justify-start gap-4 mb-4 mt-3 bg-cyan-700 rounded-md p-3 '>\n-                <div>\n-                    <span className='font-semibold text-white'>PERIODE</span>\n-                </div>\n-                <Select\n-                    id=\"relatedMonths\"\n-                    options={MonthOptions()}\n-                    value={MonthOptions().find(option => option.value === selectedPeriod)}\n-                    onChange={handleMonthChange}\n-                    placeholder=\"Pilih bulan\"\n-                    className='bg-cyan-700 rounded w-full md:w-1/3'\n-                    styles={{\n-                      control: (baseStyles, state) => ({\n-                        ...baseStyles,\n-                        backgroundColor: '#0e7490',\n-                      }),\n-                      input: (styles) => ({ ...styles, color: '#fff' }),\n-                      placeholder: (styles) => ({ ...styles, color: '#fff' }),\n-                      singleValue: (styles, { data }) => ({ ...styles, color: '#fff' }),\n-                    }}\n-                />\n-            </div>\n-            <div className='flex gap-1 md:gap-4 justify-between flex-row mb-4'>\n-            \n-                <Card className='bg-green-700 text-white w-1/3'>\n-                <h3 className='font-bold text-sm md:text-xl flex flex-col lg:flex-row  items-start lg:items-center content-center'>\n-                  <span className='flex'>\n-                    <span><HiHome className=\"h-5 w-5  md:h-7 md:w-7 mr-1 lg:mr-2\" /></span>\n-                    <span>IPL</span>\n-                  </span>\n-                  <span className='text-xs lg:text-sm font-normal lg:ml-3'>{`${totalHousesPaid} / ${totalHouses} Rumah`}</span>\n-                  </h3>\n-                <span className='font-semibold text-sm md:text-lg'>{percentage}</span>\n-                </Card>\n-                <Card className='bg-green-500 text-white w-1/3'>\n-                <h3 className='font-bold text-sm md:text-xl flex items-start'><span><FaRegArrowAltCircleDown className=\"h-5 w-5  md:h-7 md:w-7 mr-2\" /></span><span>Masuk</span></h3>\n-                <span className='font-semibold text-xs md:text-lg'>{formatCurrency(totalIncomePeriod)}</span>\n-                </Card>\n-                <Card className='bg-red-500 text-white w-1/3'>\n-                <h3 className='font-bold text-sm md:text-xl flex items-start'><span><FaRegArrowAltCircleUp className=\"h-5 w-5  md:h-7 md:w-7 mr-2\" /></span><span>Keluar</span></h3>\n-                <span className='font-semibold text-xs md:text-lg'>{formatCurrency(totalExpensePeriod)}</span>\n-                </Card>\n-            \n-            </div>\n-            {/* <div>{`Last Update: ${moment(lastUpdate).format('DD MMM yyyy')}`}</div> */}\n-            <CustomThemeProviderSecond>\n-              <div className=\"overflow-x-auto\">\n-                  <Table>\n-                      <Table.Head className='' >\n-                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white'>Keterangan</Table.HeadCell>\n-                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white'>Tanggal</Table.HeadCell>\n-                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white '>Nominal</Table.HeadCell>\n-                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white '></Table.HeadCell>\n-                      </Table.Head>\n-                      <Table.Body className=\"divide-y\">\n-                      {Object.keys(groupedTransactions).map((transactionType, index) => (\n-                        <React.Fragment key={index}>\n-                          {groupedTransactions[transactionType].length > 0 && (\n-                            <Table.Row className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-                              <Table.Cell colSpan=\"2\" className={`${getTextColor(transactionType)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>\n-                                {transactionType === 'ipl' ? `Pemasukan IPL` : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}\n-                                </Table.Cell>\n-                              <Table.Cell className={`${getTextColor(transactionType)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>{formatCurrency(groupedTransactions[transactionType].reduce((acc, curr) => acc + curr.amount, 0))}</Table.Cell>\n-                            </Table.Row>\n-                          )}\n-                         \n-                          {groupedTransactions[transactionType].map((transaction, subIndex) => (\n-                            <Table.Row key={subIndex} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-                              <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                <span className='flex items-start'>\n-                                  <span>{getTypeIcon(transaction.transaction_type)} </span>\n-                                  <span className=\"ml-2\">{transaction.description}</span>\n-                                </span>\n-                              </Table.Cell>\n-                              <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                {moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}\n-                              </Table.Cell>\n-                              <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                {formatCurrency(transaction.amount)}\n-                              </Table.Cell>\n-                            </Table.Row>\n-                          ))}\n-                           \n-                        </React.Fragment>\n-                      ))}\n                         \n                       {/* {transactions && transactions.length > 0 && transactions[0] !== undefined ? (\n                           transactions.map((transaction, index) => (\n                               <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n"
                },
                {
                    "date": 1722340787915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,414 @@\n+// pages/home.js\n+import React from 'react';\n+import {useSession ,getSession} from 'next-auth/react';\n+import { useEffect,useState } from 'react';\n+import _ from 'lodash';\n+import axios from 'axios';\n+import Spinner from './Spinner';\n+import CustomThemeProviderSecond from './CustomThemeSecond';\n+import { Card, Button, Table, Accordion } from 'flowbite-react';\n+import { GrMoney } from \"react-icons/gr\";\n+import {FaRegArrowAltCircleDown, FaRegArrowAltCircleUp } from 'react-icons/fa';\n+\n+import { HiHome } from \"react-icons/hi\";\n+\n+import Select from 'react-select';\n+import 'react-datepicker/dist/react-datepicker.css';\n+import moment from 'moment';\n+import 'moment/locale/id';\n+moment.locale('id');\n+import MonthOptions from './MonthOptions';\n+\n+const Report = ({ initialTransaction }) =>  {\n+  \n+  const [loading, setLoading] = useState(true);\n+  const { data: session, status } = useSession();\n+  const [transactions, setTransactions] = useState([initialTransaction]);\n+  const [reTransactions, setReTransactions] = useState([initialTransaction]);\n+  const [totalBalance, setTotalBalance] = useState(null);\n+  const [totalIncome, setTotalIncome] = useState(null);\n+  const [totalExpense, setTotalExpense] = useState(null);\n+  const [selectedPeriod, setSelectedPeriod] = useState(moment().format('YYYY-MM')); // Format YYYY-MM moment().format('YYYY-MM')\n+  const [monthlyBalances, setMonthlyBalances] = useState([]);\n+  const [totalIncomePeriod, setTotalIncomePeriod] = useState(0);\n+  const [totalExpensePeriod, setTotalExpensePeriod] = useState(0);\n+  const [totalHousesPaid, setTotalHousesPaid] = useState(0);\n+  const [totalHouses, setTotalHouses] = useState(0);\n+  const [lastUpdate, setLastUpdate] = useState();\n+  const [percentage, setPercentage] = useState(0);\n+\n+  \n+  const formatCurrency = (amount) => {\n+    return new Intl.NumberFormat('id-ID', {\n+        style: 'currency',\n+        currency: 'IDR',\n+        minimumFractionDigits: 0,\n+    }).format(amount);\n+  };\n+\n+  const fetchTransactions = async () => {\n+    try {\n+        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n+            params: {\n+              period: selectedPeriod\n+          }\n+        });\n+        //console.log(res.data)\n+        setTransactions(res.data.data);\n+        setReTransactions(res.data.data);\n+        setLastUpdate(res.data.lastUpdate);\n+        \n+        setLoading(false);\n+    } catch (error) {\n+        console.error('Error fetching houses data:', error);\n+        setLoading(false);\n+    }\n+  };\n+\n+  const fetchTotalBalance = async () => {\n+    try {\n+        const response = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/balance`, {\n+           \n+        });\n+       // console.log(response.data)\n+        setTotalBalance(response.data.totalBalance);\n+        setTotalIncome(response.data.totalIncome);\n+        setTotalExpense(response.data.totalExpense);\n+        setLoading(false);\n+    } catch (error) {\n+        console.error('Error fetching total balance:', error);\n+        setLoading(false);\n+    }\n+  };\n+\n+  const fetchMonthlyBalances = async () => {\n+    //console.log(selectedPeriod)\n+    try {\n+        const response = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/balance-monthly`, {\n+            params: {\n+                period: selectedPeriod\n+            }\n+        });\n+\n+        //console.log('Response data:', response.data);\n+\n+        if (Array.isArray(response.data) && response.data.length > 0) {\n+            // Gunakan data yang ada jika valid\n+            setMonthlyBalances(response.data);\n+            setTotalIncomePeriod(response.data[0].totalIncome || 0);\n+            setTotalExpensePeriod(response.data[0].totalExpense || 0);\n+        } else {\n+            // Tangani kasus jika data tidak sesuai\n+            setMonthlyBalances([]);\n+            setTotalIncomePeriod(0);\n+            setTotalExpensePeriod(0);\n+        }\n+       \n+    } catch (error) {\n+        console.error('Error fetching monthly balances:', error);\n+        setMonthlyBalances([]);\n+        setTotalIncomePeriod(0);\n+        setTotalExpensePeriod(0);\n+    }\n+  };\n+\n+  const fetchMonthlyPaid = async () => {\n+    try {\n+      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/houses/fee`, {\n+         \n+          params: {\n+            period: selectedPeriod\n+        }\n+      });\n+     // console.log(res.data)\n+      setTotalHousesPaid(res.data.total_houses_paid);\n+      setTotalHouses(res.data.total);\n+      setPercentage(res.data.percentage_paid);\n+    } catch (error) {\n+        console.error('Error fetching houses data:', error);\n+        setLoading(false);\n+    }\n+  };\n+\n+\n+  const [relatedMonths, setRelatedMonths] = useState({\n+    value: moment().format('YYYY-MM'),\n+    label: moment().format('MMMM YYYY')\n+  });\n+  \n+  const handleMonthChange = (selectedOption) => {\n+    setSelectedPeriod(selectedOption.value);\n+  };\n+\n+\n+  useEffect(() => {\n+    // Set nilai bulan saat ini saat komponen pertama kali dimuat\n+    const currentMonthOption = MonthOptions().find(\n+      (option) => option.value === moment().format('YYYY-MM')\n+    );\n+    setRelatedMonths(currentMonthOption);\n+  }, []);\n+\n+  useEffect(() => {\n+    fetchTransactions();\n+    fetchTotalBalance();\n+    fetchMonthlyPaid();\n+    fetchMonthlyBalances();\n+\n+  }, [selectedPeriod]);\n+  \n+\n+\n+  const getTypeIcon = (type) => {\n+    switch (type) {\n+      case 'income':\n+        return <FaRegArrowAltCircleDown  className=\"text-green-500 h-4 w-4 md:h-5 md:w-5 \" />;\n+      case 'expense':\n+        return <FaRegArrowAltCircleUp  className=\"text-red-500 h-4 w-4 md:h-5 md:w-5 \" />;\n+      case 'ipl':\n+        return <FaRegArrowAltCircleDown  className=\"text-green-700  h-4 w-4 md:h-5 md:w-5 \" />;\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const getTextColor = (type) => {\n+    switch (type) {\n+      case 'income':\n+        return \"text-green-500\";\n+      case 'expense':\n+        return \"text-red-500\";\n+      case 'ipl':\n+        return \"text-green-700\";\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const groupedTransactions = _.groupBy(transactions, 'transaction_type');\n+\n+   console.log(groupedTransactions)\n+  // console.log()\n+\n+  if (loading) {\n+    return <Spinner />;\n+  }\n+\n+  return (\n+    <>\n+    <CustomThemeProviderSecond>\n+          <Card className='mb-5 shadow-none'>\n+            <div className='flex flex-col lg:flex-row justify-between gap-3'>\n+              <div className='flex flex-col border-cyan-700 gap-3 border-2 p-3 rounded-md lg:w-1/2'>\n+                <div className='flex items-center content-center gap-2  md:gap-3 '>\n+                  <span className='items-center content-center'>\n+                    <GrMoney className=\"h-7 w-7 lg:h-10 lg:w-10 text-cyan-700\" />\n+                  </span>\n+                  <div>\n+                    <h2 className='md:text-2xl text-xl font-bold text-cyan-700 '>{formatCurrency(totalBalance)}</h2>\n+                    \n+                  </div>\n+                </div>\n+                <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Saldo Akhir</h3>\n+                \n+              </div>\n+             <div className='flex lg:flex-row gap-2 lg:gap-4 justify-between lg:justify-start'>\n+                <div className='flex flex-col items-center content-center  gap-2  md:gap-3 p-2 lg:p-3 border-green-500 border-2 rounded-md'>\n+                    <div className='flex items-center content-center gap-2  md:gap-3 '>\n+                      <span className=''>\n+                        <FaRegArrowAltCircleDown className=\"h-7 w-7 lg:h-10 lg:w-10 text-green-500\" />\n+                      </span>\n+                      <div>\n+                        <h2 className='md:text-2xl text-md font-bold text-green-500 '>{formatCurrency(totalIncome)}</h2>\n+                        {/* <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pemasukan</h3> */}\n+                      </div>\n+                    </div>\n+                    <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pemasukan</h3>\n+                </div>\n+                <div className='flex flex-col items-center content-center gap-2  md:gap-3 border-2 border-red-500 p-2 lg:p-3 rounded-md'>\n+                  <div className='flex items-center content-center gap-2  md:gap-3 '>\n+                    <span className=''>\n+                      <FaRegArrowAltCircleUp className=\"h-7 w-7 lg:h-10 lg:w-10 text-red-500\" />\n+                    </span>\n+                    <div>\n+                      <h2 className='md:text-2xl text-md font-bold text-red-500 '>{formatCurrency(totalExpense)}</h2>\n+                      {/* <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pengaluaran</h3> */}\n+                    </div>\n+                  </div>\n+                  <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pengaluaran</h3> \n+                   \n+                </div>\n+\n+             </div>\n+            </div>\n+          </Card>\n+    </CustomThemeProviderSecond>\n+        \n+    <CustomThemeProviderSecond>\n+        <Card>\n+            <div className='flex items-center justify-start gap-4 mb-4 mt-3 bg-cyan-700 rounded-md p-3 '>\n+                <div>\n+                    <span className='font-semibold text-white'>PERIODE</span>\n+                </div>\n+                <Select\n+                    id=\"relatedMonths\"\n+                    options={MonthOptions()}\n+                    value={MonthOptions().find(option => option.value === selectedPeriod)}\n+                    onChange={handleMonthChange}\n+                    placeholder=\"Pilih bulan\"\n+                    className='bg-cyan-700 rounded w-full md:w-1/3'\n+                    styles={{\n+                      control: (baseStyles, state) => ({\n+                        ...baseStyles,\n+                        backgroundColor: '#0e7490',\n+                      }),\n+                      input: (styles) => ({ ...styles, color: '#fff' }),\n+                      placeholder: (styles) => ({ ...styles, color: '#fff' }),\n+                      singleValue: (styles, { data }) => ({ ...styles, color: '#fff' }),\n+                    }}\n+                />\n+            </div>\n+            <div className='flex gap-1 md:gap-4 justify-between flex-row mb-4'>\n+            \n+                <Card className='bg-green-700 text-white w-1/3'>\n+                <h3 className='font-bold text-sm md:text-xl flex flex-col lg:flex-row  items-start lg:items-center content-center'>\n+                  <span className='flex'>\n+                    <span><HiHome className=\"h-5 w-5  md:h-7 md:w-7 mr-1 lg:mr-2\" /></span>\n+                    <span>IPL</span>\n+                  </span>\n+                  <span className='text-xs lg:text-sm font-normal lg:ml-3'>{`${totalHousesPaid} / ${totalHouses} Rumah`}</span>\n+                  </h3>\n+                <span className='font-semibold text-sm md:text-lg'>{percentage}</span>\n+                </Card>\n+                <Card className='bg-green-500 text-white w-1/3'>\n+                <h3 className='font-bold text-sm md:text-xl flex items-start'><span><FaRegArrowAltCircleDown className=\"h-5 w-5  md:h-7 md:w-7 mr-2\" /></span><span>Masuk</span></h3>\n+                <span className='font-semibold text-xs md:text-lg'>{formatCurrency(totalIncomePeriod)}</span>\n+                </Card>\n+                <Card className='bg-red-500 text-white w-1/3'>\n+                <h3 className='font-bold text-sm md:text-xl flex items-start'><span><FaRegArrowAltCircleUp className=\"h-5 w-5  md:h-7 md:w-7 mr-2\" /></span><span>Keluar</span></h3>\n+                <span className='font-semibold text-xs md:text-lg'>{formatCurrency(totalExpensePeriod)}</span>\n+                </Card>\n+            \n+            </div>\n+            {/* <div>{`Last Update: ${moment(lastUpdate).format('DD MMM yyyy')}`}</div> */}\n+            <CustomThemeProviderSecond>\n+              <div className=\"overflow-x-auto\">\n+                  <Table>\n+                      <Table.Head className='' >\n+                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white'>Keterangan</Table.HeadCell>\n+                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white'>Tanggal</Table.HeadCell>\n+                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white '>Nominal</Table.HeadCell>\n+                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white '></Table.HeadCell>\n+                      </Table.Head>\n+                      <Table.Body className=\"divide-y\">\n+                        {transactions && transactions.length > 0 && transactions[0] !== undefined ? (\n+                          <>\n+                            {Object.keys(groupedTransactions).map((transactionType, index) => (\n+                              <React.Fragment key={index}>\n+                                {groupedTransactions[transactionType].length > 0 && (\n+                                  <Table.Row className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n+                                    <Table.Cell colSpan=\"2\" className={`${getTextColor(transactionType)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>\n+                                      {transactionType === 'ipl' ? `Pemasukan IPL` : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}\n+                                      </Table.Cell>\n+                                    <Table.Cell className={`${getTextColor(transactionType)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>{formatCurrency(groupedTransactions[transactionType].reduce((acc, curr) => acc + curr.amount, 0))}</Table.Cell>\n+                                  </Table.Row>\n+                                )}\n+                              \n+                                {groupedTransactions[transactionType].map((transaction, subIndex) => (\n+                                  <Table.Row key={subIndex} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n+                                    <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                      <span className='flex items-start'>\n+                                        <span>{getTypeIcon(transaction.transaction_type)} </span>\n+                                        <span className=\"ml-2\">{transaction.description}</span>\n+                                      </span>\n+                                    </Table.Cell>\n+                                    <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                      {moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}\n+                                    </Table.Cell>\n+                                    <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                      {formatCurrency(transaction.amount)}\n+                                    </Table.Cell>\n+                                  </Table.Row>\n+                                ))}\n+                                \n+                              </React.Fragment>\n+                            ))}\n+                          </>\n+                        ) : (\n+                          <Table.Row>\n+                          <Table.Cell colSpan=\"3\" className=\"text-center\">Data tidak tersedia</Table.Cell>\n+                          </Table.Row>\n+                        ) }\n+                      \n+                        \n+                      {/* {transactions && transactions.length > 0 && transactions[0] !== undefined ? (\n+                          transactions.map((transaction, index) => (\n+                              <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n+                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                      <span className='flex items-start'>\n+                                      <span>{getTypeIcon(transaction.transaction_type)} </span>\n+                                      <span className=\"ml-2\">{transaction.description}</span>\n+                                      </span>\n+                                  </Table.Cell>\n+                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                      {moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}\n+                                  </Table.Cell>\n+                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                      {formatCurrency(transaction.amount)}\n+                                  </Table.Cell>\n+                              </Table.Row>\n+                          ))\n+                          ) : (\n+                          <Table.Row>\n+                              <Table.Cell colSpan=\"3\" className=\"text-center\">Data tidak tersedia</Table.Cell>\n+                          </Table.Row>\n+                      )} */}\n+\n+                      \n+                      \n+                      </Table.Body>\n+                  </Table>\n+                  \n+              </div>\n+            </CustomThemeProviderSecond>\n+            \n+        </Card>\n+    </CustomThemeProviderSecond>\n+    </>\n+  );\n+}\n+\n+export const getServerSideProps = async (context) => {\n+    const session = await getSession(context);\n+    \n+    // if (!session) {\n+    //     return {\n+    //         redirect: {\n+    //             destination: '/',\n+    //             permanent: false,\n+    //         },\n+    //     };\n+    // }\n+  \n+    try {\n+        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n+            // headers: {\n+            //     Authorization: `Bearer ${session.accessToken}`,\n+            // },\n+        });\n+        return {\n+            props: {\n+              initialTransaction: res.data.data,\n+            },\n+        };\n+    } catch (error) {\n+        console.error('Error fetching tra data:', error);\n+        return {\n+            props: {\n+              initialTransaction: [],\n+            },\n+        };\n+    }\n+  };\n+\n+export default Report;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722340893106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,415 @@\n+// pages/home.js\n+import React from 'react';\n+import {useSession ,getSession} from 'next-auth/react';\n+import { useEffect,useState } from 'react';\n+import _ from 'lodash';\n+import axios from 'axios';\n+import Spinner from './Spinner';\n+import CustomThemeProviderSecond from './CustomThemeSecond';\n+import { Card, Button, Table, Accordion } from 'flowbite-react';\n+import { GrMoney } from \"react-icons/gr\";\n+import {FaRegArrowAltCircleDown, FaRegArrowAltCircleUp } from 'react-icons/fa';\n+\n+import { HiHome } from \"react-icons/hi\";\n+\n+import Select from 'react-select';\n+import 'react-datepicker/dist/react-datepicker.css';\n+import moment from 'moment';\n+import 'moment/locale/id';\n+moment.locale('id');\n+import MonthOptions from './MonthOptions';\n+\n+const Report = ({ initialTransaction }) =>  {\n+  \n+  const [loading, setLoading] = useState(true);\n+  const { data: session, status } = useSession();\n+  const [transactions, setTransactions] = useState([initialTransaction]);\n+  const [reTransactions, setReTransactions] = useState([initialTransaction]);\n+  const [totalBalance, setTotalBalance] = useState(null);\n+  const [totalIncome, setTotalIncome] = useState(null);\n+  const [totalExpense, setTotalExpense] = useState(null);\n+  const [selectedPeriod, setSelectedPeriod] = useState(moment().format('YYYY-MM')); // Format YYYY-MM moment().format('YYYY-MM')\n+  const [monthlyBalances, setMonthlyBalances] = useState([]);\n+  const [totalIncomePeriod, setTotalIncomePeriod] = useState(0);\n+  const [totalExpensePeriod, setTotalExpensePeriod] = useState(0);\n+  const [totalHousesPaid, setTotalHousesPaid] = useState(0);\n+  const [totalHouses, setTotalHouses] = useState(0);\n+  const [lastUpdate, setLastUpdate] = useState();\n+  const [percentage, setPercentage] = useState(0);\n+  const [expandedRows, setExpandedRows] = useState(null);\n+\n+  \n+  const formatCurrency = (amount) => {\n+    return new Intl.NumberFormat('id-ID', {\n+        style: 'currency',\n+        currency: 'IDR',\n+        minimumFractionDigits: 0,\n+    }).format(amount);\n+  };\n+\n+  const fetchTransactions = async () => {\n+    try {\n+        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n+            params: {\n+              period: selectedPeriod\n+          }\n+        });\n+        //console.log(res.data)\n+        setTransactions(res.data.data);\n+        setReTransactions(res.data.data);\n+        setLastUpdate(res.data.lastUpdate);\n+        \n+        setLoading(false);\n+    } catch (error) {\n+        console.error('Error fetching houses data:', error);\n+        setLoading(false);\n+    }\n+  };\n+\n+  const fetchTotalBalance = async () => {\n+    try {\n+        const response = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/balance`, {\n+           \n+        });\n+       // console.log(response.data)\n+        setTotalBalance(response.data.totalBalance);\n+        setTotalIncome(response.data.totalIncome);\n+        setTotalExpense(response.data.totalExpense);\n+        setLoading(false);\n+    } catch (error) {\n+        console.error('Error fetching total balance:', error);\n+        setLoading(false);\n+    }\n+  };\n+\n+  const fetchMonthlyBalances = async () => {\n+    //console.log(selectedPeriod)\n+    try {\n+        const response = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/balance-monthly`, {\n+            params: {\n+                period: selectedPeriod\n+            }\n+        });\n+\n+        //console.log('Response data:', response.data);\n+\n+        if (Array.isArray(response.data) && response.data.length > 0) {\n+            // Gunakan data yang ada jika valid\n+            setMonthlyBalances(response.data);\n+            setTotalIncomePeriod(response.data[0].totalIncome || 0);\n+            setTotalExpensePeriod(response.data[0].totalExpense || 0);\n+        } else {\n+            // Tangani kasus jika data tidak sesuai\n+            setMonthlyBalances([]);\n+            setTotalIncomePeriod(0);\n+            setTotalExpensePeriod(0);\n+        }\n+       \n+    } catch (error) {\n+        console.error('Error fetching monthly balances:', error);\n+        setMonthlyBalances([]);\n+        setTotalIncomePeriod(0);\n+        setTotalExpensePeriod(0);\n+    }\n+  };\n+\n+  const fetchMonthlyPaid = async () => {\n+    try {\n+      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/houses/fee`, {\n+         \n+          params: {\n+            period: selectedPeriod\n+        }\n+      });\n+     // console.log(res.data)\n+      setTotalHousesPaid(res.data.total_houses_paid);\n+      setTotalHouses(res.data.total);\n+      setPercentage(res.data.percentage_paid);\n+    } catch (error) {\n+        console.error('Error fetching houses data:', error);\n+        setLoading(false);\n+    }\n+  };\n+\n+\n+  const [relatedMonths, setRelatedMonths] = useState({\n+    value: moment().format('YYYY-MM'),\n+    label: moment().format('MMMM YYYY')\n+  });\n+  \n+  const handleMonthChange = (selectedOption) => {\n+    setSelectedPeriod(selectedOption.value);\n+  };\n+\n+\n+  useEffect(() => {\n+    // Set nilai bulan saat ini saat komponen pertama kali dimuat\n+    const currentMonthOption = MonthOptions().find(\n+      (option) => option.value === moment().format('YYYY-MM')\n+    );\n+    setRelatedMonths(currentMonthOption);\n+  }, []);\n+\n+  useEffect(() => {\n+    fetchTransactions();\n+    fetchTotalBalance();\n+    fetchMonthlyPaid();\n+    fetchMonthlyBalances();\n+\n+  }, [selectedPeriod]);\n+  \n+\n+\n+  const getTypeIcon = (type) => {\n+    switch (type) {\n+      case 'income':\n+        return <FaRegArrowAltCircleDown  className=\"text-green-500 h-4 w-4 md:h-5 md:w-5 \" />;\n+      case 'expense':\n+        return <FaRegArrowAltCircleUp  className=\"text-red-500 h-4 w-4 md:h-5 md:w-5 \" />;\n+      case 'ipl':\n+        return <FaRegArrowAltCircleDown  className=\"text-green-700  h-4 w-4 md:h-5 md:w-5 \" />;\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const getTextColor = (type) => {\n+    switch (type) {\n+      case 'income':\n+        return \"text-green-500\";\n+      case 'expense':\n+        return \"text-red-500\";\n+      case 'ipl':\n+        return \"text-green-700\";\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const groupedTransactions = _.groupBy(transactions, 'transaction_type');\n+\n+   console.log(groupedTransactions)\n+  // console.log()\n+\n+  if (loading) {\n+    return <Spinner />;\n+  }\n+\n+  return (\n+    <>\n+    <CustomThemeProviderSecond>\n+          <Card className='mb-5 shadow-none'>\n+            <div className='flex flex-col lg:flex-row justify-between gap-3'>\n+              <div className='flex flex-col border-cyan-700 gap-3 border-2 p-3 rounded-md lg:w-1/2'>\n+                <div className='flex items-center content-center gap-2  md:gap-3 '>\n+                  <span className='items-center content-center'>\n+                    <GrMoney className=\"h-7 w-7 lg:h-10 lg:w-10 text-cyan-700\" />\n+                  </span>\n+                  <div>\n+                    <h2 className='md:text-2xl text-xl font-bold text-cyan-700 '>{formatCurrency(totalBalance)}</h2>\n+                    \n+                  </div>\n+                </div>\n+                <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Saldo Akhir</h3>\n+                \n+              </div>\n+             <div className='flex lg:flex-row gap-2 lg:gap-4 justify-between lg:justify-start'>\n+                <div className='flex flex-col items-center content-center  gap-2  md:gap-3 p-2 lg:p-3 border-green-500 border-2 rounded-md'>\n+                    <div className='flex items-center content-center gap-2  md:gap-3 '>\n+                      <span className=''>\n+                        <FaRegArrowAltCircleDown className=\"h-7 w-7 lg:h-10 lg:w-10 text-green-500\" />\n+                      </span>\n+                      <div>\n+                        <h2 className='md:text-2xl text-md font-bold text-green-500 '>{formatCurrency(totalIncome)}</h2>\n+                        {/* <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pemasukan</h3> */}\n+                      </div>\n+                    </div>\n+                    <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pemasukan</h3>\n+                </div>\n+                <div className='flex flex-col items-center content-center gap-2  md:gap-3 border-2 border-red-500 p-2 lg:p-3 rounded-md'>\n+                  <div className='flex items-center content-center gap-2  md:gap-3 '>\n+                    <span className=''>\n+                      <FaRegArrowAltCircleUp className=\"h-7 w-7 lg:h-10 lg:w-10 text-red-500\" />\n+                    </span>\n+                    <div>\n+                      <h2 className='md:text-2xl text-md font-bold text-red-500 '>{formatCurrency(totalExpense)}</h2>\n+                      {/* <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pengaluaran</h3> */}\n+                    </div>\n+                  </div>\n+                  <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pengaluaran</h3> \n+                   \n+                </div>\n+\n+             </div>\n+            </div>\n+          </Card>\n+    </CustomThemeProviderSecond>\n+        \n+    <CustomThemeProviderSecond>\n+        <Card>\n+            <div className='flex items-center justify-start gap-4 mb-4 mt-3 bg-cyan-700 rounded-md p-3 '>\n+                <div>\n+                    <span className='font-semibold text-white'>PERIODE</span>\n+                </div>\n+                <Select\n+                    id=\"relatedMonths\"\n+                    options={MonthOptions()}\n+                    value={MonthOptions().find(option => option.value === selectedPeriod)}\n+                    onChange={handleMonthChange}\n+                    placeholder=\"Pilih bulan\"\n+                    className='bg-cyan-700 rounded w-full md:w-1/3'\n+                    styles={{\n+                      control: (baseStyles, state) => ({\n+                        ...baseStyles,\n+                        backgroundColor: '#0e7490',\n+                      }),\n+                      input: (styles) => ({ ...styles, color: '#fff' }),\n+                      placeholder: (styles) => ({ ...styles, color: '#fff' }),\n+                      singleValue: (styles, { data }) => ({ ...styles, color: '#fff' }),\n+                    }}\n+                />\n+            </div>\n+            <div className='flex gap-1 md:gap-4 justify-between flex-row mb-4'>\n+            \n+                <Card className='bg-green-700 text-white w-1/3'>\n+                <h3 className='font-bold text-sm md:text-xl flex flex-col lg:flex-row  items-start lg:items-center content-center'>\n+                  <span className='flex'>\n+                    <span><HiHome className=\"h-5 w-5  md:h-7 md:w-7 mr-1 lg:mr-2\" /></span>\n+                    <span>IPL</span>\n+                  </span>\n+                  <span className='text-xs lg:text-sm font-normal lg:ml-3'>{`${totalHousesPaid} / ${totalHouses} Rumah`}</span>\n+                  </h3>\n+                <span className='font-semibold text-sm md:text-lg'>{percentage}</span>\n+                </Card>\n+                <Card className='bg-green-500 text-white w-1/3'>\n+                <h3 className='font-bold text-sm md:text-xl flex items-start'><span><FaRegArrowAltCircleDown className=\"h-5 w-5  md:h-7 md:w-7 mr-2\" /></span><span>Masuk</span></h3>\n+                <span className='font-semibold text-xs md:text-lg'>{formatCurrency(totalIncomePeriod)}</span>\n+                </Card>\n+                <Card className='bg-red-500 text-white w-1/3'>\n+                <h3 className='font-bold text-sm md:text-xl flex items-start'><span><FaRegArrowAltCircleUp className=\"h-5 w-5  md:h-7 md:w-7 mr-2\" /></span><span>Keluar</span></h3>\n+                <span className='font-semibold text-xs md:text-lg'>{formatCurrency(totalExpensePeriod)}</span>\n+                </Card>\n+            \n+            </div>\n+            {/* <div>{`Last Update: ${moment(lastUpdate).format('DD MMM yyyy')}`}</div> */}\n+            <CustomThemeProviderSecond>\n+              <div className=\"overflow-x-auto\">\n+                  <Table>\n+                      <Table.Head className='' >\n+                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white'>Keterangan</Table.HeadCell>\n+                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white'>Tanggal</Table.HeadCell>\n+                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white '>Nominal</Table.HeadCell>\n+                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white '></Table.HeadCell>\n+                      </Table.Head>\n+                      <Table.Body className=\"divide-y\">\n+                        {transactions && transactions.length > 0 && transactions[0] !== undefined ? (\n+                          <>\n+                            {Object.keys(groupedTransactions).map((transactionType, index) => (\n+                              <React.Fragment key={index}>\n+                                {groupedTransactions[transactionType].length > 0 && (\n+                                  <Table.Row className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n+                                    <Table.Cell colSpan=\"2\" className={`${getTextColor(transactionType)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>\n+                                      {transactionType === 'ipl' ? `Pemasukan IPL` : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}\n+                                      </Table.Cell>\n+                                    <Table.Cell className={`${getTextColor(transactionType)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>{formatCurrency(groupedTransactions[transactionType].reduce((acc, curr) => acc + curr.amount, 0))}</Table.Cell>\n+                                  </Table.Row>\n+                                )}\n+                              \n+                                {groupedTransactions[transactionType].map((transaction, subIndex) => (\n+                                  <Table.Row key={subIndex} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n+                                    <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                      <span className='flex items-start'>\n+                                        <span>{getTypeIcon(transaction.transaction_type)} </span>\n+                                        <span className=\"ml-2\">{transaction.description}</span>\n+                                      </span>\n+                                    </Table.Cell>\n+                                    <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                      {moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}\n+                                    </Table.Cell>\n+                                    <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                      {formatCurrency(transaction.amount)}\n+                                    </Table.Cell>\n+                                  </Table.Row>\n+                                ))}\n+                                \n+                              </React.Fragment>\n+                            ))}\n+                          </>\n+                        ) : (\n+                          <Table.Row>\n+                          <Table.Cell colSpan=\"3\" className=\"text-center\">Data tidak tersedia</Table.Cell>\n+                          </Table.Row>\n+                        ) }\n+                      \n+                        \n+                      {/* {transactions && transactions.length > 0 && transactions[0] !== undefined ? (\n+                          transactions.map((transaction, index) => (\n+                              <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n+                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                      <span className='flex items-start'>\n+                                      <span>{getTypeIcon(transaction.transaction_type)} </span>\n+                                      <span className=\"ml-2\">{transaction.description}</span>\n+                                      </span>\n+                                  </Table.Cell>\n+                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                      {moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}\n+                                  </Table.Cell>\n+                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                      {formatCurrency(transaction.amount)}\n+                                  </Table.Cell>\n+                              </Table.Row>\n+                          ))\n+                          ) : (\n+                          <Table.Row>\n+                              <Table.Cell colSpan=\"3\" className=\"text-center\">Data tidak tersedia</Table.Cell>\n+                          </Table.Row>\n+                      )} */}\n+\n+                      \n+                      \n+                      </Table.Body>\n+                  </Table>\n+                  \n+              </div>\n+            </CustomThemeProviderSecond>\n+            \n+        </Card>\n+    </CustomThemeProviderSecond>\n+    </>\n+  );\n+}\n+\n+export const getServerSideProps = async (context) => {\n+    const session = await getSession(context);\n+    \n+    // if (!session) {\n+    //     return {\n+    //         redirect: {\n+    //             destination: '/',\n+    //             permanent: false,\n+    //         },\n+    //     };\n+    // }\n+  \n+    try {\n+        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n+            // headers: {\n+            //     Authorization: `Bearer ${session.accessToken}`,\n+            // },\n+        });\n+        return {\n+            props: {\n+              initialTransaction: res.data.data,\n+            },\n+        };\n+    } catch (error) {\n+        console.error('Error fetching tra data:', error);\n+        return {\n+            props: {\n+              initialTransaction: [],\n+            },\n+        };\n+    }\n+  };\n+\n+export default Report;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722340923473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -190,422 +190,22 @@\n \n    console.log(groupedTransactions)\n   // console.log()\n \n-  if (loading) {\n-    return <Spinner />;\n-  }\n-\n-  return (\n-    <>\n-    <CustomThemeProviderSecond>\n-          <Card className='mb-5 shadow-none'>\n-            <div className='flex flex-col lg:flex-row justify-between gap-3'>\n-              <div className='flex flex-col border-cyan-700 gap-3 border-2 p-3 rounded-md lg:w-1/2'>\n-                <div className='flex items-center content-center gap-2  md:gap-3 '>\n-                  <span className='items-center content-center'>\n-                    <GrMoney className=\"h-7 w-7 lg:h-10 lg:w-10 text-cyan-700\" />\n-                  </span>\n-                  <div>\n-                    <h2 className='md:text-2xl text-xl font-bold text-cyan-700 '>{formatCurrency(totalBalance)}</h2>\n-                    \n-                  </div>\n-                </div>\n-                <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Saldo Akhir</h3>\n-                \n-              </div>\n-             <div className='flex lg:flex-row gap-2 lg:gap-4 justify-between lg:justify-start'>\n-                <div className='flex flex-col items-center content-center  gap-2  md:gap-3 p-2 lg:p-3 border-green-500 border-2 rounded-md'>\n-                    <div className='flex items-center content-center gap-2  md:gap-3 '>\n-                      <span className=''>\n-                        <FaRegArrowAltCircleDown className=\"h-7 w-7 lg:h-10 lg:w-10 text-green-500\" />\n-                      </span>\n-                      <div>\n-                        <h2 className='md:text-2xl text-md font-bold text-green-500 '>{formatCurrency(totalIncome)}</h2>\n-                        {/* <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pemasukan</h3> */}\n-                      </div>\n-                    </div>\n-                    <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pemasukan</h3>\n-                </div>\n-                <div className='flex flex-col items-center content-center gap-2  md:gap-3 border-2 border-red-500 p-2 lg:p-3 rounded-md'>\n-                  <div className='flex items-center content-center gap-2  md:gap-3 '>\n-                    <span className=''>\n-                      <FaRegArrowAltCircleUp className=\"h-7 w-7 lg:h-10 lg:w-10 text-red-500\" />\n-                    </span>\n-                    <div>\n-                      <h2 className='md:text-2xl text-md font-bold text-red-500 '>{formatCurrency(totalExpense)}</h2>\n-                      {/* <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pengaluaran</h3> */}\n-                    </div>\n-                  </div>\n-                  <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pengaluaran</h3> \n-                   \n-                </div>\n-\n-             </div>\n-            </div>\n-          </Card>\n-    </CustomThemeProviderSecond>\n-        \n-    <CustomThemeProviderSecond>\n-        <Card>\n-            <div className='flex items-center justify-start gap-4 mb-4 mt-3 bg-cyan-700 rounded-md p-3 '>\n-                <div>\n-                    <span className='font-semibold text-white'>PERIODE</span>\n-                </div>\n-                <Select\n-                    id=\"relatedMonths\"\n-                    options={MonthOptions()}\n-                    value={MonthOptions().find(option => option.value === selectedPeriod)}\n-                    onChange={handleMonthChange}\n-                    placeholder=\"Pilih bulan\"\n-                    className='bg-cyan-700 rounded w-full md:w-1/3'\n-                    styles={{\n-                      control: (baseStyles, state) => ({\n-                        ...baseStyles,\n-                        backgroundColor: '#0e7490',\n-                      }),\n-                      input: (styles) => ({ ...styles, color: '#fff' }),\n-                      placeholder: (styles) => ({ ...styles, color: '#fff' }),\n-                      singleValue: (styles, { data }) => ({ ...styles, color: '#fff' }),\n-                    }}\n-                />\n-            </div>\n-            <div className='flex gap-1 md:gap-4 justify-between flex-row mb-4'>\n-            \n-                <Card className='bg-green-700 text-white w-1/3'>\n-                <h3 className='font-bold text-sm md:text-xl flex flex-col lg:flex-row  items-start lg:items-center content-center'>\n-                  <span className='flex'>\n-                    <span><HiHome className=\"h-5 w-5  md:h-7 md:w-7 mr-1 lg:mr-2\" /></span>\n-                    <span>IPL</span>\n-                  </span>\n-                  <span className='text-xs lg:text-sm font-normal lg:ml-3'>{`${totalHousesPaid} / ${totalHouses} Rumah`}</span>\n-                  </h3>\n-                <span className='font-semibold text-sm md:text-lg'>{percentage}</span>\n-                </Card>\n-                <Card className='bg-green-500 text-white w-1/3'>\n-                <h3 className='font-bold text-sm md:text-xl flex items-start'><span><FaRegArrowAltCircleDown className=\"h-5 w-5  md:h-7 md:w-7 mr-2\" /></span><span>Masuk</span></h3>\n-                <span className='font-semibold text-xs md:text-lg'>{formatCurrency(totalIncomePeriod)}</span>\n-                </Card>\n-                <Card className='bg-red-500 text-white w-1/3'>\n-                <h3 className='font-bold text-sm md:text-xl flex items-start'><span><FaRegArrowAltCircleUp className=\"h-5 w-5  md:h-7 md:w-7 mr-2\" /></span><span>Keluar</span></h3>\n-                <span className='font-semibold text-xs md:text-lg'>{formatCurrency(totalExpensePeriod)}</span>\n-                </Card>\n-            \n-            </div>\n-            {/* <div>{`Last Update: ${moment(lastUpdate).format('DD MMM yyyy')}`}</div> */}\n-            <CustomThemeProviderSecond>\n-              <div className=\"overflow-x-auto\">\n-                  <Table>\n-                      <Table.Head className='' >\n-                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white'>Keterangan</Table.HeadCell>\n-                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white'>Tanggal</Table.HeadCell>\n-                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white '>Nominal</Table.HeadCell>\n-                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white '></Table.HeadCell>\n-                      </Table.Head>\n-                      <Table.Body className=\"divide-y\">\n-                        {transactions && transactions.length > 0 && transactions[0] !== undefined ? (\n-                          <>\n-                            {Object.keys(groupedTransactions).map((transactionType, index) => (\n-                              <React.Fragment key={index}>\n-                                {groupedTransactions[transactionType].length > 0 && (\n-                                  <Table.Row className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-                                    <Table.Cell colSpan=\"2\" className={`${getTextColor(transactionType)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>\n-                                      {transactionType === 'ipl' ? `Pemasukan IPL` : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}\n-                                      </Table.Cell>\n-                                    <Table.Cell className={`${getTextColor(transactionType)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>{formatCurrency(groupedTransactions[transactionType].reduce((acc, curr) => acc + curr.amount, 0))}</Table.Cell>\n-                                  </Table.Row>\n-                                )}\n-                              \n-                                {groupedTransactions[transactionType].map((transaction, subIndex) => (\n-                                  <Table.Row key={subIndex} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-                                    <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                      <span className='flex items-start'>\n-                                        <span>{getTypeIcon(transaction.transaction_type)} </span>\n-                                        <span className=\"ml-2\">{transaction.description}</span>\n-                                      </span>\n-                                    </Table.Cell>\n-                                    <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                      {moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}\n-                                    </Table.Cell>\n-                                    <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                      {formatCurrency(transaction.amount)}\n-                                    </Table.Cell>\n-                                  </Table.Row>\n-                                ))}\n-                                \n-                              </React.Fragment>\n-                            ))}\n-                          </>\n-                        ) : (\n-                          <Table.Row>\n-                          <Table.Cell colSpan=\"3\" className=\"text-center\">Data tidak tersedia</Table.Cell>\n-                          </Table.Row>\n-                        ) }\n-                      \n-                        \n-                      {/* {transactions && transactions.length > 0 && transactions[0] !== undefined ? (\n-                          transactions.map((transaction, index) => (\n-                              <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                      <span className='flex items-start'>\n-                                      <span>{getTypeIcon(transaction.transaction_type)} </span>\n-                                      <span className=\"ml-2\">{transaction.description}</span>\n-                                      </span>\n-                                  </Table.Cell>\n-                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                      {moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}\n-                                  </Table.Cell>\n-                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                      {formatCurrency(transaction.amount)}\n-                                  </Table.Cell>\n-                              </Table.Row>\n-                          ))\n-                          ) : (\n-                          <Table.Row>\n-                              <Table.Cell colSpan=\"3\" className=\"text-center\">Data tidak tersedia</Table.Cell>\n-                          </Table.Row>\n-                      )} */}\n-\n-                      \n-                      \n-                      </Table.Body>\n-                  </Table>\n-                  \n-              </div>\n-            </CustomThemeProviderSecond>\n-            \n-        </Card>\n-    </CustomThemeProviderSecond>\n-    </>\n-  );\n-}\n-\n-export const getServerSideProps = async (context) => {\n-    const session = await getSession(context);\n-    \n-    // if (!session) {\n-    //     return {\n-    //         redirect: {\n-    //             destination: '/',\n-    //             permanent: false,\n-    //         },\n-    //     };\n-    // }\n-  \n-    try {\n-        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n-            // headers: {\n-            //     Authorization: `Bearer ${session.accessToken}`,\n-            // },\n-        });\n-        return {\n-            props: {\n-              initialTransaction: res.data.data,\n-            },\n-        };\n-    } catch (error) {\n-        console.error('Error fetching tra data:', error);\n-        return {\n-            props: {\n-              initialTransaction: [],\n-            },\n-        };\n+  const handleExpandRow = (index) => {\n+    let currentExpandedRows = null;\n+    const isRowExpanded = currentExpandedRows === index ? index : null;\n+    const newExpandedRows = isRowExpanded\n+      ? null\n+      : (currentExpandedRows = index);\n+    if (expandedRows !== index) {\n+      setExpandedRows(newExpandedRows);\n+    } else {\n+      setExpandedRows(null);\n     }\n   };\n \n-export default Report;\n-// pages/home.js\n-import React from 'react';\n-import {useSession ,getSession} from 'next-auth/react';\n-import { useEffect,useState } from 'react';\n-import _ from 'lodash';\n-import axios from 'axios';\n-import Spinner from './Spinner';\n-import CustomThemeProviderSecond from './CustomThemeSecond';\n-import { Card, Button, Table, Accordion } from 'flowbite-react';\n-import { GrMoney } from \"react-icons/gr\";\n-import {FaRegArrowAltCircleDown, FaRegArrowAltCircleUp } from 'react-icons/fa';\n \n-import { HiHome } from \"react-icons/hi\";\n-\n-import Select from 'react-select';\n-import 'react-datepicker/dist/react-datepicker.css';\n-import moment from 'moment';\n-import 'moment/locale/id';\n-moment.locale('id');\n-import MonthOptions from './MonthOptions';\n-\n-const Report = ({ initialTransaction }) =>  {\n-  \n-  const [loading, setLoading] = useState(true);\n-  const { data: session, status } = useSession();\n-  const [transactions, setTransactions] = useState([initialTransaction]);\n-  const [reTransactions, setReTransactions] = useState([initialTransaction]);\n-  const [totalBalance, setTotalBalance] = useState(null);\n-  const [totalIncome, setTotalIncome] = useState(null);\n-  const [totalExpense, setTotalExpense] = useState(null);\n-  const [selectedPeriod, setSelectedPeriod] = useState(moment().format('YYYY-MM')); // Format YYYY-MM moment().format('YYYY-MM')\n-  const [monthlyBalances, setMonthlyBalances] = useState([]);\n-  const [totalIncomePeriod, setTotalIncomePeriod] = useState(0);\n-  const [totalExpensePeriod, setTotalExpensePeriod] = useState(0);\n-  const [totalHousesPaid, setTotalHousesPaid] = useState(0);\n-  const [totalHouses, setTotalHouses] = useState(0);\n-  const [lastUpdate, setLastUpdate] = useState();\n-  const [percentage, setPercentage] = useState(0);\n-\n-  \n-  const formatCurrency = (amount) => {\n-    return new Intl.NumberFormat('id-ID', {\n-        style: 'currency',\n-        currency: 'IDR',\n-        minimumFractionDigits: 0,\n-    }).format(amount);\n-  };\n-\n-  const fetchTransactions = async () => {\n-    try {\n-        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n-            params: {\n-              period: selectedPeriod\n-          }\n-        });\n-        //console.log(res.data)\n-        setTransactions(res.data.data);\n-        setReTransactions(res.data.data);\n-        setLastUpdate(res.data.lastUpdate);\n-        \n-        setLoading(false);\n-    } catch (error) {\n-        console.error('Error fetching houses data:', error);\n-        setLoading(false);\n-    }\n-  };\n-\n-  const fetchTotalBalance = async () => {\n-    try {\n-        const response = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/balance`, {\n-           \n-        });\n-       // console.log(response.data)\n-        setTotalBalance(response.data.totalBalance);\n-        setTotalIncome(response.data.totalIncome);\n-        setTotalExpense(response.data.totalExpense);\n-        setLoading(false);\n-    } catch (error) {\n-        console.error('Error fetching total balance:', error);\n-        setLoading(false);\n-    }\n-  };\n-\n-  const fetchMonthlyBalances = async () => {\n-    //console.log(selectedPeriod)\n-    try {\n-        const response = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/balance-monthly`, {\n-            params: {\n-                period: selectedPeriod\n-            }\n-        });\n-\n-        //console.log('Response data:', response.data);\n-\n-        if (Array.isArray(response.data) && response.data.length > 0) {\n-            // Gunakan data yang ada jika valid\n-            setMonthlyBalances(response.data);\n-            setTotalIncomePeriod(response.data[0].totalIncome || 0);\n-            setTotalExpensePeriod(response.data[0].totalExpense || 0);\n-        } else {\n-            // Tangani kasus jika data tidak sesuai\n-            setMonthlyBalances([]);\n-            setTotalIncomePeriod(0);\n-            setTotalExpensePeriod(0);\n-        }\n-       \n-    } catch (error) {\n-        console.error('Error fetching monthly balances:', error);\n-        setMonthlyBalances([]);\n-        setTotalIncomePeriod(0);\n-        setTotalExpensePeriod(0);\n-    }\n-  };\n-\n-  const fetchMonthlyPaid = async () => {\n-    try {\n-      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/houses/fee`, {\n-         \n-          params: {\n-            period: selectedPeriod\n-        }\n-      });\n-     // console.log(res.data)\n-      setTotalHousesPaid(res.data.total_houses_paid);\n-      setTotalHouses(res.data.total);\n-      setPercentage(res.data.percentage_paid);\n-    } catch (error) {\n-        console.error('Error fetching houses data:', error);\n-        setLoading(false);\n-    }\n-  };\n-\n-\n-  const [relatedMonths, setRelatedMonths] = useState({\n-    value: moment().format('YYYY-MM'),\n-    label: moment().format('MMMM YYYY')\n-  });\n-  \n-  const handleMonthChange = (selectedOption) => {\n-    setSelectedPeriod(selectedOption.value);\n-  };\n-\n-\n-  useEffect(() => {\n-    // Set nilai bulan saat ini saat komponen pertama kali dimuat\n-    const currentMonthOption = MonthOptions().find(\n-      (option) => option.value === moment().format('YYYY-MM')\n-    );\n-    setRelatedMonths(currentMonthOption);\n-  }, []);\n-\n-  useEffect(() => {\n-    fetchTransactions();\n-    fetchTotalBalance();\n-    fetchMonthlyPaid();\n-    fetchMonthlyBalances();\n-\n-  }, [selectedPeriod]);\n-  \n-\n-\n-  const getTypeIcon = (type) => {\n-    switch (type) {\n-      case 'income':\n-        return <FaRegArrowAltCircleDown  className=\"text-green-500 h-4 w-4 md:h-5 md:w-5 \" />;\n-      case 'expense':\n-        return <FaRegArrowAltCircleUp  className=\"text-red-500 h-4 w-4 md:h-5 md:w-5 \" />;\n-      case 'ipl':\n-        return <FaRegArrowAltCircleDown  className=\"text-green-700  h-4 w-4 md:h-5 md:w-5 \" />;\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const getTextColor = (type) => {\n-    switch (type) {\n-      case 'income':\n-        return \"text-green-500\";\n-      case 'expense':\n-        return \"text-red-500\";\n-      case 'ipl':\n-        return \"text-green-700\";\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const groupedTransactions = _.groupBy(transactions, 'transaction_type');\n-\n-   console.log(groupedTransactions)\n-  // console.log()\n-\n   if (loading) {\n     return <Spinner />;\n   }\n \n@@ -825,419 +425,5 @@\n         };\n     }\n   };\n \n-export default Report;\n-// pages/home.js\n-import React from 'react';\n-import {useSession ,getSession} from 'next-auth/react';\n-import { useEffect,useState } from 'react';\n-import _ from 'lodash';\n-import axios from 'axios';\n-import Spinner from './Spinner';\n-import CustomThemeProviderSecond from './CustomThemeSecond';\n-import { Card, Button, Table, Accordion } from 'flowbite-react';\n-import { GrMoney } from \"react-icons/gr\";\n-import {FaRegArrowAltCircleDown, FaRegArrowAltCircleUp } from 'react-icons/fa';\n-\n-import { HiHome } from \"react-icons/hi\";\n-\n-import Select from 'react-select';\n-import 'react-datepicker/dist/react-datepicker.css';\n-import moment from 'moment';\n-import 'moment/locale/id';\n-moment.locale('id');\n-import MonthOptions from './MonthOptions';\n-\n-const Report = ({ initialTransaction }) =>  {\n-  \n-  const [loading, setLoading] = useState(true);\n-  const { data: session, status } = useSession();\n-  const [transactions, setTransactions] = useState([initialTransaction]);\n-  const [reTransactions, setReTransactions] = useState([initialTransaction]);\n-  const [totalBalance, setTotalBalance] = useState(null);\n-  const [totalIncome, setTotalIncome] = useState(null);\n-  const [totalExpense, setTotalExpense] = useState(null);\n-  const [selectedPeriod, setSelectedPeriod] = useState(moment().format('YYYY-MM')); // Format YYYY-MM moment().format('YYYY-MM')\n-  const [monthlyBalances, setMonthlyBalances] = useState([]);\n-  const [totalIncomePeriod, setTotalIncomePeriod] = useState(0);\n-  const [totalExpensePeriod, setTotalExpensePeriod] = useState(0);\n-  const [totalHousesPaid, setTotalHousesPaid] = useState(0);\n-  const [totalHouses, setTotalHouses] = useState(0);\n-  const [lastUpdate, setLastUpdate] = useState();\n-  const [percentage, setPercentage] = useState(0);\n-\n-  \n-  const formatCurrency = (amount) => {\n-    return new Intl.NumberFormat('id-ID', {\n-        style: 'currency',\n-        currency: 'IDR',\n-        minimumFractionDigits: 0,\n-    }).format(amount);\n-  };\n-\n-  const fetchTransactions = async () => {\n-    try {\n-        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n-            params: {\n-              period: selectedPeriod\n-          }\n-        });\n-        //console.log(res.data)\n-        setTransactions(res.data.data);\n-        setReTransactions(res.data.data);\n-        setLastUpdate(res.data.lastUpdate);\n-        \n-        setLoading(false);\n-    } catch (error) {\n-        console.error('Error fetching houses data:', error);\n-        setLoading(false);\n-    }\n-  };\n-\n-  const fetchTotalBalance = async () => {\n-    try {\n-        const response = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/balance`, {\n-           \n-        });\n-       // console.log(response.data)\n-        setTotalBalance(response.data.totalBalance);\n-        setTotalIncome(response.data.totalIncome);\n-        setTotalExpense(response.data.totalExpense);\n-        setLoading(false);\n-    } catch (error) {\n-        console.error('Error fetching total balance:', error);\n-        setLoading(false);\n-    }\n-  };\n-\n-  const fetchMonthlyBalances = async () => {\n-    //console.log(selectedPeriod)\n-    try {\n-        const response = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/balance-monthly`, {\n-            params: {\n-                period: selectedPeriod\n-            }\n-        });\n-\n-        //console.log('Response data:', response.data);\n-\n-        if (Array.isArray(response.data) && response.data.length > 0) {\n-            // Gunakan data yang ada jika valid\n-            setMonthlyBalances(response.data);\n-            setTotalIncomePeriod(response.data[0].totalIncome || 0);\n-            setTotalExpensePeriod(response.data[0].totalExpense || 0);\n-        } else {\n-            // Tangani kasus jika data tidak sesuai\n-            setMonthlyBalances([]);\n-            setTotalIncomePeriod(0);\n-            setTotalExpensePeriod(0);\n-        }\n-       \n-    } catch (error) {\n-        console.error('Error fetching monthly balances:', error);\n-        setMonthlyBalances([]);\n-        setTotalIncomePeriod(0);\n-        setTotalExpensePeriod(0);\n-    }\n-  };\n-\n-  const fetchMonthlyPaid = async () => {\n-    try {\n-      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/houses/fee`, {\n-         \n-          params: {\n-            period: selectedPeriod\n-        }\n-      });\n-     // console.log(res.data)\n-      setTotalHousesPaid(res.data.total_houses_paid);\n-      setTotalHouses(res.data.total);\n-      setPercentage(res.data.percentage_paid);\n-    } catch (error) {\n-        console.error('Error fetching houses data:', error);\n-        setLoading(false);\n-    }\n-  };\n-\n-\n-  const [relatedMonths, setRelatedMonths] = useState({\n-    value: moment().format('YYYY-MM'),\n-    label: moment().format('MMMM YYYY')\n-  });\n-  \n-  const handleMonthChange = (selectedOption) => {\n-    setSelectedPeriod(selectedOption.value);\n-  };\n-\n-\n-  useEffect(() => {\n-    // Set nilai bulan saat ini saat komponen pertama kali dimuat\n-    const currentMonthOption = MonthOptions().find(\n-      (option) => option.value === moment().format('YYYY-MM')\n-    );\n-    setRelatedMonths(currentMonthOption);\n-  }, []);\n-\n-  useEffect(() => {\n-    fetchTransactions();\n-    fetchTotalBalance();\n-    fetchMonthlyPaid();\n-    fetchMonthlyBalances();\n-\n-  }, [selectedPeriod]);\n-  \n-\n-\n-  const getTypeIcon = (type) => {\n-    switch (type) {\n-      case 'income':\n-        return <FaRegArrowAltCircleDown  className=\"text-green-500 h-4 w-4 md:h-5 md:w-5 \" />;\n-      case 'expense':\n-        return <FaRegArrowAltCircleUp  className=\"text-red-500 h-4 w-4 md:h-5 md:w-5 \" />;\n-      case 'ipl':\n-        return <FaRegArrowAltCircleDown  className=\"text-green-700  h-4 w-4 md:h-5 md:w-5 \" />;\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const getTextColor = (type) => {\n-    switch (type) {\n-      case 'income':\n-        return \"text-green-500\";\n-      case 'expense':\n-        return \"text-red-500\";\n-      case 'ipl':\n-        return \"text-green-700\";\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const groupedTransactions = _.groupBy(transactions, 'transaction_type');\n-\n-   console.log(groupedTransactions)\n-  // console.log()\n-\n-  if (loading) {\n-    return <Spinner />;\n-  }\n-\n-  return (\n-    <>\n-    <CustomThemeProviderSecond>\n-          <Card className='mb-5 shadow-none'>\n-            <div className='flex flex-col lg:flex-row justify-between gap-3'>\n-              <div className='flex flex-col border-cyan-700 gap-3 border-2 p-3 rounded-md lg:w-1/2'>\n-                <div className='flex items-center content-center gap-2  md:gap-3 '>\n-                  <span className='items-center content-center'>\n-                    <GrMoney className=\"h-7 w-7 lg:h-10 lg:w-10 text-cyan-700\" />\n-                  </span>\n-                  <div>\n-                    <h2 className='md:text-2xl text-xl font-bold text-cyan-700 '>{formatCurrency(totalBalance)}</h2>\n-                    \n-                  </div>\n-                </div>\n-                <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Saldo Akhir</h3>\n-                \n-              </div>\n-             <div className='flex lg:flex-row gap-2 lg:gap-4 justify-between lg:justify-start'>\n-                <div className='flex flex-col items-center content-center  gap-2  md:gap-3 p-2 lg:p-3 border-green-500 border-2 rounded-md'>\n-                    <div className='flex items-center content-center gap-2  md:gap-3 '>\n-                      <span className=''>\n-                        <FaRegArrowAltCircleDown className=\"h-7 w-7 lg:h-10 lg:w-10 text-green-500\" />\n-                      </span>\n-                      <div>\n-                        <h2 className='md:text-2xl text-md font-bold text-green-500 '>{formatCurrency(totalIncome)}</h2>\n-                        {/* <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pemasukan</h3> */}\n-                      </div>\n-                    </div>\n-                    <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pemasukan</h3>\n-                </div>\n-                <div className='flex flex-col items-center content-center gap-2  md:gap-3 border-2 border-red-500 p-2 lg:p-3 rounded-md'>\n-                  <div className='flex items-center content-center gap-2  md:gap-3 '>\n-                    <span className=''>\n-                      <FaRegArrowAltCircleUp className=\"h-7 w-7 lg:h-10 lg:w-10 text-red-500\" />\n-                    </span>\n-                    <div>\n-                      <h2 className='md:text-2xl text-md font-bold text-red-500 '>{formatCurrency(totalExpense)}</h2>\n-                      {/* <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pengaluaran</h3> */}\n-                    </div>\n-                  </div>\n-                  <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pengaluaran</h3> \n-                   \n-                </div>\n-\n-             </div>\n-            </div>\n-          </Card>\n-    </CustomThemeProviderSecond>\n-        \n-    <CustomThemeProviderSecond>\n-        <Card>\n-            <div className='flex items-center justify-start gap-4 mb-4 mt-3 bg-cyan-700 rounded-md p-3 '>\n-                <div>\n-                    <span className='font-semibold text-white'>PERIODE</span>\n-                </div>\n-                <Select\n-                    id=\"relatedMonths\"\n-                    options={MonthOptions()}\n-                    value={MonthOptions().find(option => option.value === selectedPeriod)}\n-                    onChange={handleMonthChange}\n-                    placeholder=\"Pilih bulan\"\n-                    className='bg-cyan-700 rounded w-full md:w-1/3'\n-                    styles={{\n-                      control: (baseStyles, state) => ({\n-                        ...baseStyles,\n-                        backgroundColor: '#0e7490',\n-                      }),\n-                      input: (styles) => ({ ...styles, color: '#fff' }),\n-                      placeholder: (styles) => ({ ...styles, color: '#fff' }),\n-                      singleValue: (styles, { data }) => ({ ...styles, color: '#fff' }),\n-                    }}\n-                />\n-            </div>\n-            <div className='flex gap-1 md:gap-4 justify-between flex-row mb-4'>\n-            \n-                <Card className='bg-green-700 text-white w-1/3'>\n-                <h3 className='font-bold text-sm md:text-xl flex flex-col lg:flex-row  items-start lg:items-center content-center'>\n-                  <span className='flex'>\n-                    <span><HiHome className=\"h-5 w-5  md:h-7 md:w-7 mr-1 lg:mr-2\" /></span>\n-                    <span>IPL</span>\n-                  </span>\n-                  <span className='text-xs lg:text-sm font-normal lg:ml-3'>{`${totalHousesPaid} / ${totalHouses} Rumah`}</span>\n-                  </h3>\n-                <span className='font-semibold text-sm md:text-lg'>{percentage}</span>\n-                </Card>\n-                <Card className='bg-green-500 text-white w-1/3'>\n-                <h3 className='font-bold text-sm md:text-xl flex items-start'><span><FaRegArrowAltCircleDown className=\"h-5 w-5  md:h-7 md:w-7 mr-2\" /></span><span>Masuk</span></h3>\n-                <span className='font-semibold text-xs md:text-lg'>{formatCurrency(totalIncomePeriod)}</span>\n-                </Card>\n-                <Card className='bg-red-500 text-white w-1/3'>\n-                <h3 className='font-bold text-sm md:text-xl flex items-start'><span><FaRegArrowAltCircleUp className=\"h-5 w-5  md:h-7 md:w-7 mr-2\" /></span><span>Keluar</span></h3>\n-                <span className='font-semibold text-xs md:text-lg'>{formatCurrency(totalExpensePeriod)}</span>\n-                </Card>\n-            \n-            </div>\n-            {/* <div>{`Last Update: ${moment(lastUpdate).format('DD MMM yyyy')}`}</div> */}\n-            <CustomThemeProviderSecond>\n-              <div className=\"overflow-x-auto\">\n-                  <Table>\n-                      <Table.Head className='' >\n-                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white'>Keterangan</Table.HeadCell>\n-                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white'>Tanggal</Table.HeadCell>\n-                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white '>Nominal</Table.HeadCell>\n-                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white '></Table.HeadCell>\n-                      </Table.Head>\n-                      <Table.Body className=\"divide-y\">\n-                        {transactions && transactions.length > 0 && transactions[0] !== undefined ? (\n-                          <>\n-                            {Object.keys(groupedTransactions).map((transactionType, index) => (\n-                        <React.Fragment key={index}>\n-                          {groupedTransactions[transactionType].length > 0 && (\n-                            <Table.Row className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-                              <Table.Cell colSpan=\"2\" className={`${getTextColor(transactionType)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>\n-                                {transactionType === 'ipl' ? `Pemasukan IPL` : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}\n-                                </Table.Cell>\n-                              <Table.Cell className={`${getTextColor(transactionType)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>{formatCurrency(groupedTransactions[transactionType].reduce((acc, curr) => acc + curr.amount, 0))}</Table.Cell>\n-                            </Table.Row>\n-                          )}\n-                         \n-                          {groupedTransactions[transactionType].map((transaction, subIndex) => (\n-                            <Table.Row key={subIndex} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-                              <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                <span className='flex items-start'>\n-                                  <span>{getTypeIcon(transaction.transaction_type)} </span>\n-                                  <span className=\"ml-2\">{transaction.description}</span>\n-                                </span>\n-                              </Table.Cell>\n-                              <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                {moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}\n-                              </Table.Cell>\n-                              <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                {formatCurrency(transaction.amount)}\n-                              </Table.Cell>\n-                            </Table.Row>\n-                          ))}\n-                           \n-                        </React.Fragment>\n-                            ))}\n-                          </>\n-                        ) : (\n-                          <Table.Row>\n-                          <Table.Cell colSpan=\"3\" className=\"text-center\">Data tidak tersedia</Table.Cell>\n-                          </Table.Row>\n-                        ) }\n-                      \n-                        \n-                      {/* {transactions && transactions.length > 0 && transactions[0] !== undefined ? (\n-                          transactions.map((transaction, index) => (\n-                              <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                      <span className='flex items-start'>\n-                                      <span>{getTypeIcon(transaction.transaction_type)} </span>\n-                                      <span className=\"ml-2\">{transaction.description}</span>\n-                                      </span>\n-                                  </Table.Cell>\n-                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                      {moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}\n-                                  </Table.Cell>\n-                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                      {formatCurrency(transaction.amount)}\n-                                  </Table.Cell>\n-                              </Table.Row>\n-                          ))\n-                          ) : (\n-                          <Table.Row>\n-                              <Table.Cell colSpan=\"3\" className=\"text-center\">Data tidak tersedia</Table.Cell>\n-                          </Table.Row>\n-                      )} */}\n-\n-                      \n-                      \n-                      </Table.Body>\n-                  </Table>\n-                  \n-              </div>\n-            </CustomThemeProviderSecond>\n-            \n-        </Card>\n-    </CustomThemeProviderSecond>\n-    </>\n-  );\n-}\n-\n-export const getServerSideProps = async (context) => {\n-    const session = await getSession(context);\n-    \n-    // if (!session) {\n-    //     return {\n-    //         redirect: {\n-    //             destination: '/',\n-    //             permanent: false,\n-    //         },\n-    //     };\n-    // }\n-  \n-    try {\n-        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n-            // headers: {\n-            //     Authorization: `Bearer ${session.accessToken}`,\n-            // },\n-        });\n-        return {\n-            props: {\n-              initialTransaction: res.data.data,\n-            },\n-        };\n-    } catch (error) {\n-        console.error('Error fetching tra data:', error);\n-        return {\n-            props: {\n-              initialTransaction: [],\n-            },\n-        };\n-    }\n-  };\n-\n export default Report;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722341017923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -320,33 +320,37 @@\n                           <>\n                             {Object.keys(groupedTransactions).map((transactionType, index) => (\n                               <React.Fragment key={index}>\n                                 {groupedTransactions[transactionType].length > 0 && (\n-                                  <Table.Row className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n+                                  <Table.Row className=\"bg-white dark:border-gray-700 dark:bg-gray-800\" onClick={() => handleExpandRow(index)}>\n                                     <Table.Cell colSpan=\"2\" className={`${getTextColor(transactionType)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>\n                                       {transactionType === 'ipl' ? `Pemasukan IPL` : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}\n                                       </Table.Cell>\n                                     <Table.Cell className={`${getTextColor(transactionType)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>{formatCurrency(groupedTransactions[transactionType].reduce((acc, curr) => acc + curr.amount, 0))}</Table.Cell>\n                                   </Table.Row>\n                                 )}\n+\n+                                {expandedRows === index ? (\n+                                  {groupedTransactions[transactionType].map((transaction, subIndex) => (\n+                                    <Table.Row key={subIndex} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n+                                      <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                        <span className='flex items-start'>\n+                                          <span>{getTypeIcon(transaction.transaction_type)} </span>\n+                                          <span className=\"ml-2\">{transaction.description}</span>\n+                                        </span>\n+                                      </Table.Cell>\n+                                      <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                        {moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}\n+                                      </Table.Cell>\n+                                      <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                        {formatCurrency(transaction.amount)}\n+                                      </Table.Cell>\n+                                    </Table.Row>\n+                                  ))}\n+                                ) : null}\n                               \n-                                {groupedTransactions[transactionType].map((transaction, subIndex) => (\n-                                  <Table.Row key={subIndex} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-                                    <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                      <span className='flex items-start'>\n-                                        <span>{getTypeIcon(transaction.transaction_type)} </span>\n-                                        <span className=\"ml-2\">{transaction.description}</span>\n-                                      </span>\n-                                    </Table.Cell>\n-                                    <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                      {moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}\n-                                    </Table.Cell>\n-                                    <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                      {formatCurrency(transaction.amount)}\n-                                    </Table.Cell>\n-                                  </Table.Row>\n-                                ))}\n                                 \n+                                \n                               </React.Fragment>\n                             ))}\n                           </>\n                         ) : (\n"
                },
                {
                    "date": 1722341036839,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -329,8 +329,9 @@\n                                   </Table.Row>\n                                 )}\n \n                                 {expandedRows === index ? (\n+                                  <>\n                                   {groupedTransactions[transactionType].map((transaction, subIndex) => (\n                                     <Table.Row key={subIndex} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n                                       <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n                                         <span className='flex items-start'>\n@@ -345,8 +346,9 @@\n                                         {formatCurrency(transaction.amount)}\n                                       </Table.Cell>\n                                     </Table.Row>\n                                   ))}\n+                                  </>\n                                 ) : null}\n                               \n                                 \n                                 \n"
                },
                {
                    "date": 1722341156545,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -309,9 +309,9 @@\n             <CustomThemeProviderSecond>\n               <div className=\"overflow-x-auto\">\n                   <Table>\n                       <Table.Head className='' >\n-                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white'>Keterangan</Table.HeadCell>\n+                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white w-2/3'>Keterangan</Table.HeadCell>\n                           <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white'>Tanggal</Table.HeadCell>\n                           <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white '>Nominal</Table.HeadCell>\n                           <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white '></Table.HeadCell>\n                       </Table.Head>\n"
                },
                {
                    "date": 1722342586399,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,9 +187,9 @@\n   };\n \n   const groupedTransactions = _.groupBy(transactions, 'transaction_type');\n \n-   console.log(groupedTransactions)\n+   //console.log(groupedTransactions)\n   // console.log()\n \n   const handleExpandRow = (index) => {\n     let currentExpandedRows = null;\n@@ -320,9 +320,11 @@\n                           <>\n                             {Object.keys(groupedTransactions).map((transactionType, index) => (\n                               <React.Fragment key={index}>\n                                 {groupedTransactions[transactionType].length > 0 && (\n-                                  <Table.Row className=\"bg-white dark:border-gray-700 dark:bg-gray-800\" onClick={() => handleExpandRow(index)}>\n+                                  <Table.Row \n+                                  className={`bg-white dark:border-gray-700 dark:bg-gray-800 ${expandedRows === index ? 'opacity-100' : 'opacity-0'}`}\n+                                  onClick={() => handleExpandRow(index)}>\n                                     <Table.Cell colSpan=\"2\" className={`${getTextColor(transactionType)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>\n                                       {transactionType === 'ipl' ? `Pemasukan IPL` : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}\n                                       </Table.Cell>\n                                     <Table.Cell className={`${getTextColor(transactionType)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>{formatCurrency(groupedTransactions[transactionType].reduce((acc, curr) => acc + curr.amount, 0))}</Table.Cell>\n"
                },
                {
                    "date": 1722342600094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,437 @@\n+// pages/home.js\n+import React from 'react';\n+import {useSession ,getSession} from 'next-auth/react';\n+import { useEffect,useState } from 'react';\n+import _ from 'lodash';\n+import axios from 'axios';\n+import Spinner from './Spinner';\n+import CustomThemeProviderSecond from './CustomThemeSecond';\n+import { Card, Button, Table, Accordion } from 'flowbite-react';\n+import { GrMoney } from \"react-icons/gr\";\n+import {FaRegArrowAltCircleDown, FaRegArrowAltCircleUp } from 'react-icons/fa';\n+\n+import { HiHome } from \"react-icons/hi\";\n+\n+import Select from 'react-select';\n+import 'react-datepicker/dist/react-datepicker.css';\n+import moment from 'moment';\n+import 'moment/locale/id';\n+moment.locale('id');\n+import MonthOptions from './MonthOptions';\n+\n+const Report = ({ initialTransaction }) =>  {\n+  \n+  const [loading, setLoading] = useState(true);\n+  const { data: session, status } = useSession();\n+  const [transactions, setTransactions] = useState([initialTransaction]);\n+  const [reTransactions, setReTransactions] = useState([initialTransaction]);\n+  const [totalBalance, setTotalBalance] = useState(null);\n+  const [totalIncome, setTotalIncome] = useState(null);\n+  const [totalExpense, setTotalExpense] = useState(null);\n+  const [selectedPeriod, setSelectedPeriod] = useState(moment().format('YYYY-MM')); // Format YYYY-MM moment().format('YYYY-MM')\n+  const [monthlyBalances, setMonthlyBalances] = useState([]);\n+  const [totalIncomePeriod, setTotalIncomePeriod] = useState(0);\n+  const [totalExpensePeriod, setTotalExpensePeriod] = useState(0);\n+  const [totalHousesPaid, setTotalHousesPaid] = useState(0);\n+  const [totalHouses, setTotalHouses] = useState(0);\n+  const [lastUpdate, setLastUpdate] = useState();\n+  const [percentage, setPercentage] = useState(0);\n+  const [expandedRows, setExpandedRows] = useState(null);\n+\n+  \n+  const formatCurrency = (amount) => {\n+    return new Intl.NumberFormat('id-ID', {\n+        style: 'currency',\n+        currency: 'IDR',\n+        minimumFractionDigits: 0,\n+    }).format(amount);\n+  };\n+\n+  const fetchTransactions = async () => {\n+    try {\n+        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n+            params: {\n+              period: selectedPeriod\n+          }\n+        });\n+        //console.log(res.data)\n+        setTransactions(res.data.data);\n+        setReTransactions(res.data.data);\n+        setLastUpdate(res.data.lastUpdate);\n+        \n+        setLoading(false);\n+    } catch (error) {\n+        console.error('Error fetching houses data:', error);\n+        setLoading(false);\n+    }\n+  };\n+\n+  const fetchTotalBalance = async () => {\n+    try {\n+        const response = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/balance`, {\n+           \n+        });\n+       // console.log(response.data)\n+        setTotalBalance(response.data.totalBalance);\n+        setTotalIncome(response.data.totalIncome);\n+        setTotalExpense(response.data.totalExpense);\n+        setLoading(false);\n+    } catch (error) {\n+        console.error('Error fetching total balance:', error);\n+        setLoading(false);\n+    }\n+  };\n+\n+  const fetchMonthlyBalances = async () => {\n+    //console.log(selectedPeriod)\n+    try {\n+        const response = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/balance-monthly`, {\n+            params: {\n+                period: selectedPeriod\n+            }\n+        });\n+\n+        //console.log('Response data:', response.data);\n+\n+        if (Array.isArray(response.data) && response.data.length > 0) {\n+            // Gunakan data yang ada jika valid\n+            setMonthlyBalances(response.data);\n+            setTotalIncomePeriod(response.data[0].totalIncome || 0);\n+            setTotalExpensePeriod(response.data[0].totalExpense || 0);\n+        } else {\n+            // Tangani kasus jika data tidak sesuai\n+            setMonthlyBalances([]);\n+            setTotalIncomePeriod(0);\n+            setTotalExpensePeriod(0);\n+        }\n+       \n+    } catch (error) {\n+        console.error('Error fetching monthly balances:', error);\n+        setMonthlyBalances([]);\n+        setTotalIncomePeriod(0);\n+        setTotalExpensePeriod(0);\n+    }\n+  };\n+\n+  const fetchMonthlyPaid = async () => {\n+    try {\n+      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/houses/fee`, {\n+         \n+          params: {\n+            period: selectedPeriod\n+        }\n+      });\n+     // console.log(res.data)\n+      setTotalHousesPaid(res.data.total_houses_paid);\n+      setTotalHouses(res.data.total);\n+      setPercentage(res.data.percentage_paid);\n+    } catch (error) {\n+        console.error('Error fetching houses data:', error);\n+        setLoading(false);\n+    }\n+  };\n+\n+\n+  const [relatedMonths, setRelatedMonths] = useState({\n+    value: moment().format('YYYY-MM'),\n+    label: moment().format('MMMM YYYY')\n+  });\n+  \n+  const handleMonthChange = (selectedOption) => {\n+    setSelectedPeriod(selectedOption.value);\n+  };\n+\n+\n+  useEffect(() => {\n+    // Set nilai bulan saat ini saat komponen pertama kali dimuat\n+    const currentMonthOption = MonthOptions().find(\n+      (option) => option.value === moment().format('YYYY-MM')\n+    );\n+    setRelatedMonths(currentMonthOption);\n+  }, []);\n+\n+  useEffect(() => {\n+    fetchTransactions();\n+    fetchTotalBalance();\n+    fetchMonthlyPaid();\n+    fetchMonthlyBalances();\n+\n+  }, [selectedPeriod]);\n+  \n+\n+\n+  const getTypeIcon = (type) => {\n+    switch (type) {\n+      case 'income':\n+        return <FaRegArrowAltCircleDown  className=\"text-green-500 h-4 w-4 md:h-5 md:w-5 \" />;\n+      case 'expense':\n+        return <FaRegArrowAltCircleUp  className=\"text-red-500 h-4 w-4 md:h-5 md:w-5 \" />;\n+      case 'ipl':\n+        return <FaRegArrowAltCircleDown  className=\"text-green-700  h-4 w-4 md:h-5 md:w-5 \" />;\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const getTextColor = (type) => {\n+    switch (type) {\n+      case 'income':\n+        return \"text-green-500\";\n+      case 'expense':\n+        return \"text-red-500\";\n+      case 'ipl':\n+        return \"text-green-700\";\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const groupedTransactions = _.groupBy(transactions, 'transaction_type');\n+\n+   //console.log(groupedTransactions)\n+  // console.log()\n+\n+  const handleExpandRow = (index) => {\n+    let currentExpandedRows = null;\n+    const isRowExpanded = currentExpandedRows === index ? index : null;\n+    const newExpandedRows = isRowExpanded\n+      ? null\n+      : (currentExpandedRows = index);\n+    if (expandedRows !== index) {\n+      setExpandedRows(newExpandedRows);\n+    } else {\n+      setExpandedRows(null);\n+    }\n+  };\n+\n+\n+  if (loading) {\n+    return <Spinner />;\n+  }\n+\n+  return (\n+    <>\n+    <CustomThemeProviderSecond>\n+          <Card className='mb-5 shadow-none'>\n+            <div className='flex flex-col lg:flex-row justify-between gap-3'>\n+              <div className='flex flex-col border-cyan-700 gap-3 border-2 p-3 rounded-md lg:w-1/2'>\n+                <div className='flex items-center content-center gap-2  md:gap-3 '>\n+                  <span className='items-center content-center'>\n+                    <GrMoney className=\"h-7 w-7 lg:h-10 lg:w-10 text-cyan-700\" />\n+                  </span>\n+                  <div>\n+                    <h2 className='md:text-2xl text-xl font-bold text-cyan-700 '>{formatCurrency(totalBalance)}</h2>\n+                    \n+                  </div>\n+                </div>\n+                <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Saldo Akhir</h3>\n+                \n+              </div>\n+             <div className='flex lg:flex-row gap-2 lg:gap-4 justify-between lg:justify-start'>\n+                <div className='flex flex-col items-center content-center  gap-2  md:gap-3 p-2 lg:p-3 border-green-500 border-2 rounded-md'>\n+                    <div className='flex items-center content-center gap-2  md:gap-3 '>\n+                      <span className=''>\n+                        <FaRegArrowAltCircleDown className=\"h-7 w-7 lg:h-10 lg:w-10 text-green-500\" />\n+                      </span>\n+                      <div>\n+                        <h2 className='md:text-2xl text-md font-bold text-green-500 '>{formatCurrency(totalIncome)}</h2>\n+                        {/* <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pemasukan</h3> */}\n+                      </div>\n+                    </div>\n+                    <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pemasukan</h3>\n+                </div>\n+                <div className='flex flex-col items-center content-center gap-2  md:gap-3 border-2 border-red-500 p-2 lg:p-3 rounded-md'>\n+                  <div className='flex items-center content-center gap-2  md:gap-3 '>\n+                    <span className=''>\n+                      <FaRegArrowAltCircleUp className=\"h-7 w-7 lg:h-10 lg:w-10 text-red-500\" />\n+                    </span>\n+                    <div>\n+                      <h2 className='md:text-2xl text-md font-bold text-red-500 '>{formatCurrency(totalExpense)}</h2>\n+                      {/* <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pengaluaran</h3> */}\n+                    </div>\n+                  </div>\n+                  <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pengaluaran</h3> \n+                   \n+                </div>\n+\n+             </div>\n+            </div>\n+          </Card>\n+    </CustomThemeProviderSecond>\n+        \n+    <CustomThemeProviderSecond>\n+        <Card>\n+            <div className='flex items-center justify-start gap-4 mb-4 mt-3 bg-cyan-700 rounded-md p-3 '>\n+                <div>\n+                    <span className='font-semibold text-white'>PERIODE</span>\n+                </div>\n+                <Select\n+                    id=\"relatedMonths\"\n+                    options={MonthOptions()}\n+                    value={MonthOptions().find(option => option.value === selectedPeriod)}\n+                    onChange={handleMonthChange}\n+                    placeholder=\"Pilih bulan\"\n+                    className='bg-cyan-700 rounded w-full md:w-1/3'\n+                    styles={{\n+                      control: (baseStyles, state) => ({\n+                        ...baseStyles,\n+                        backgroundColor: '#0e7490',\n+                      }),\n+                      input: (styles) => ({ ...styles, color: '#fff' }),\n+                      placeholder: (styles) => ({ ...styles, color: '#fff' }),\n+                      singleValue: (styles, { data }) => ({ ...styles, color: '#fff' }),\n+                    }}\n+                />\n+            </div>\n+            <div className='flex gap-1 md:gap-4 justify-between flex-row mb-4'>\n+            \n+                <Card className='bg-green-700 text-white w-1/3'>\n+                <h3 className='font-bold text-sm md:text-xl flex flex-col lg:flex-row  items-start lg:items-center content-center'>\n+                  <span className='flex'>\n+                    <span><HiHome className=\"h-5 w-5  md:h-7 md:w-7 mr-1 lg:mr-2\" /></span>\n+                    <span>IPL</span>\n+                  </span>\n+                  <span className='text-xs lg:text-sm font-normal lg:ml-3'>{`${totalHousesPaid} / ${totalHouses} Rumah`}</span>\n+                  </h3>\n+                <span className='font-semibold text-sm md:text-lg'>{percentage}</span>\n+                </Card>\n+                <Card className='bg-green-500 text-white w-1/3'>\n+                <h3 className='font-bold text-sm md:text-xl flex items-start'><span><FaRegArrowAltCircleDown className=\"h-5 w-5  md:h-7 md:w-7 mr-2\" /></span><span>Masuk</span></h3>\n+                <span className='font-semibold text-xs md:text-lg'>{formatCurrency(totalIncomePeriod)}</span>\n+                </Card>\n+                <Card className='bg-red-500 text-white w-1/3'>\n+                <h3 className='font-bold text-sm md:text-xl flex items-start'><span><FaRegArrowAltCircleUp className=\"h-5 w-5  md:h-7 md:w-7 mr-2\" /></span><span>Keluar</span></h3>\n+                <span className='font-semibold text-xs md:text-lg'>{formatCurrency(totalExpensePeriod)}</span>\n+                </Card>\n+            \n+            </div>\n+            {/* <div>{`Last Update: ${moment(lastUpdate).format('DD MMM yyyy')}`}</div> */}\n+            <CustomThemeProviderSecond>\n+              <div className=\"overflow-x-auto\">\n+                  <Table>\n+                      <Table.Head className='' >\n+                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white w-2/3'>Keterangan</Table.HeadCell>\n+                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white'>Tanggal</Table.HeadCell>\n+                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white '>Nominal</Table.HeadCell>\n+                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white '></Table.HeadCell>\n+                      </Table.Head>\n+                      <Table.Body className=\"divide-y\">\n+                        {transactions && transactions.length > 0 && transactions[0] !== undefined ? (\n+                          <>\n+                            {Object.keys(groupedTransactions).map((transactionType, index) => (\n+                              <React.Fragment key={index}>\n+                                {groupedTransactions[transactionType].length > 0 && (\n+                                  <Table.Row \n+                                  className={`bg-white dark:border-gray-700 dark:bg-gray-800 ${expandedRows === index ? 'opacity-100' : ''}`}\n+                                  onClick={() => handleExpandRow(index)}>\n+                                    <Table.Cell colSpan=\"2\" className={`${getTextColor(transactionType)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>\n+                                      {transactionType === 'ipl' ? `Pemasukan IPL` : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}\n+                                      </Table.Cell>\n+                                    <Table.Cell className={`${getTextColor(transactionType)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>{formatCurrency(groupedTransactions[transactionType].reduce((acc, curr) => acc + curr.amount, 0))}</Table.Cell>\n+                                  </Table.Row>\n+                                )}\n+\n+                                {expandedRows === index ? (\n+                                  <>\n+                                  {groupedTransactions[transactionType].map((transaction, subIndex) => (\n+                                    <Table.Row key={subIndex} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n+                                      <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                        <span className='flex items-start'>\n+                                          <span>{getTypeIcon(transaction.transaction_type)} </span>\n+                                          <span className=\"ml-2\">{transaction.description}</span>\n+                                        </span>\n+                                      </Table.Cell>\n+                                      <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                        {moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}\n+                                      </Table.Cell>\n+                                      <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                        {formatCurrency(transaction.amount)}\n+                                      </Table.Cell>\n+                                    </Table.Row>\n+                                  ))}\n+                                  </>\n+                                ) : null}\n+                              \n+                                \n+                                \n+                              </React.Fragment>\n+                            ))}\n+                          </>\n+                        ) : (\n+                          <Table.Row>\n+                          <Table.Cell colSpan=\"3\" className=\"text-center\">Data tidak tersedia</Table.Cell>\n+                          </Table.Row>\n+                        ) }\n+                      \n+                        \n+                      {/* {transactions && transactions.length > 0 && transactions[0] !== undefined ? (\n+                          transactions.map((transaction, index) => (\n+                              <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n+                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                      <span className='flex items-start'>\n+                                      <span>{getTypeIcon(transaction.transaction_type)} </span>\n+                                      <span className=\"ml-2\">{transaction.description}</span>\n+                                      </span>\n+                                  </Table.Cell>\n+                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                      {moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}\n+                                  </Table.Cell>\n+                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                      {formatCurrency(transaction.amount)}\n+                                  </Table.Cell>\n+                              </Table.Row>\n+                          ))\n+                          ) : (\n+                          <Table.Row>\n+                              <Table.Cell colSpan=\"3\" className=\"text-center\">Data tidak tersedia</Table.Cell>\n+                          </Table.Row>\n+                      )} */}\n+\n+                      \n+                      \n+                      </Table.Body>\n+                  </Table>\n+                  \n+              </div>\n+            </CustomThemeProviderSecond>\n+            \n+        </Card>\n+    </CustomThemeProviderSecond>\n+    </>\n+  );\n+}\n+\n+export const getServerSideProps = async (context) => {\n+    const session = await getSession(context);\n+    \n+    // if (!session) {\n+    //     return {\n+    //         redirect: {\n+    //             destination: '/',\n+    //             permanent: false,\n+    //         },\n+    //     };\n+    // }\n+  \n+    try {\n+        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n+            // headers: {\n+            //     Authorization: `Bearer ${session.accessToken}`,\n+            // },\n+        });\n+        return {\n+            props: {\n+              initialTransaction: res.data.data,\n+            },\n+        };\n+    } catch (error) {\n+        console.error('Error fetching tra data:', error);\n+        return {\n+            props: {\n+              initialTransaction: [],\n+            },\n+        };\n+    }\n+  };\n+\n+export default Report;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722342631193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -321,9 +321,9 @@\n                             {Object.keys(groupedTransactions).map((transactionType, index) => (\n                               <React.Fragment key={index}>\n                                 {groupedTransactions[transactionType].length > 0 && (\n                                   <Table.Row \n-                                  className={`bg-white dark:border-gray-700 dark:bg-gray-800 ${expandedRows === index ? 'opacity-100' : ''}`}\n+                                  className={`bg-white dark:border-gray-700 dark:bg-gray-800 transition duration-300`}\n                                   onClick={() => handleExpandRow(index)}>\n                                     <Table.Cell colSpan=\"2\" className={`${getTextColor(transactionType)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>\n                                       {transactionType === 'ipl' ? `Pemasukan IPL` : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}\n                                       </Table.Cell>\n@@ -433,442 +433,5 @@\n         };\n     }\n   };\n \n-export default Report;\n-// pages/home.js\n-import React from 'react';\n-import {useSession ,getSession} from 'next-auth/react';\n-import { useEffect,useState } from 'react';\n-import _ from 'lodash';\n-import axios from 'axios';\n-import Spinner from './Spinner';\n-import CustomThemeProviderSecond from './CustomThemeSecond';\n-import { Card, Button, Table, Accordion } from 'flowbite-react';\n-import { GrMoney } from \"react-icons/gr\";\n-import {FaRegArrowAltCircleDown, FaRegArrowAltCircleUp } from 'react-icons/fa';\n-\n-import { HiHome } from \"react-icons/hi\";\n-\n-import Select from 'react-select';\n-import 'react-datepicker/dist/react-datepicker.css';\n-import moment from 'moment';\n-import 'moment/locale/id';\n-moment.locale('id');\n-import MonthOptions from './MonthOptions';\n-\n-const Report = ({ initialTransaction }) =>  {\n-  \n-  const [loading, setLoading] = useState(true);\n-  const { data: session, status } = useSession();\n-  const [transactions, setTransactions] = useState([initialTransaction]);\n-  const [reTransactions, setReTransactions] = useState([initialTransaction]);\n-  const [totalBalance, setTotalBalance] = useState(null);\n-  const [totalIncome, setTotalIncome] = useState(null);\n-  const [totalExpense, setTotalExpense] = useState(null);\n-  const [selectedPeriod, setSelectedPeriod] = useState(moment().format('YYYY-MM')); // Format YYYY-MM moment().format('YYYY-MM')\n-  const [monthlyBalances, setMonthlyBalances] = useState([]);\n-  const [totalIncomePeriod, setTotalIncomePeriod] = useState(0);\n-  const [totalExpensePeriod, setTotalExpensePeriod] = useState(0);\n-  const [totalHousesPaid, setTotalHousesPaid] = useState(0);\n-  const [totalHouses, setTotalHouses] = useState(0);\n-  const [lastUpdate, setLastUpdate] = useState();\n-  const [percentage, setPercentage] = useState(0);\n-  const [expandedRows, setExpandedRows] = useState(null);\n-\n-  \n-  const formatCurrency = (amount) => {\n-    return new Intl.NumberFormat('id-ID', {\n-        style: 'currency',\n-        currency: 'IDR',\n-        minimumFractionDigits: 0,\n-    }).format(amount);\n-  };\n-\n-  const fetchTransactions = async () => {\n-    try {\n-        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n-            params: {\n-              period: selectedPeriod\n-          }\n-        });\n-        //console.log(res.data)\n-        setTransactions(res.data.data);\n-        setReTransactions(res.data.data);\n-        setLastUpdate(res.data.lastUpdate);\n-        \n-        setLoading(false);\n-    } catch (error) {\n-        console.error('Error fetching houses data:', error);\n-        setLoading(false);\n-    }\n-  };\n-\n-  const fetchTotalBalance = async () => {\n-    try {\n-        const response = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/balance`, {\n-           \n-        });\n-       // console.log(response.data)\n-        setTotalBalance(response.data.totalBalance);\n-        setTotalIncome(response.data.totalIncome);\n-        setTotalExpense(response.data.totalExpense);\n-        setLoading(false);\n-    } catch (error) {\n-        console.error('Error fetching total balance:', error);\n-        setLoading(false);\n-    }\n-  };\n-\n-  const fetchMonthlyBalances = async () => {\n-    //console.log(selectedPeriod)\n-    try {\n-        const response = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/balance-monthly`, {\n-            params: {\n-                period: selectedPeriod\n-            }\n-        });\n-\n-        //console.log('Response data:', response.data);\n-\n-        if (Array.isArray(response.data) && response.data.length > 0) {\n-            // Gunakan data yang ada jika valid\n-            setMonthlyBalances(response.data);\n-            setTotalIncomePeriod(response.data[0].totalIncome || 0);\n-            setTotalExpensePeriod(response.data[0].totalExpense || 0);\n-        } else {\n-            // Tangani kasus jika data tidak sesuai\n-            setMonthlyBalances([]);\n-            setTotalIncomePeriod(0);\n-            setTotalExpensePeriod(0);\n-        }\n-       \n-    } catch (error) {\n-        console.error('Error fetching monthly balances:', error);\n-        setMonthlyBalances([]);\n-        setTotalIncomePeriod(0);\n-        setTotalExpensePeriod(0);\n-    }\n-  };\n-\n-  const fetchMonthlyPaid = async () => {\n-    try {\n-      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/houses/fee`, {\n-         \n-          params: {\n-            period: selectedPeriod\n-        }\n-      });\n-     // console.log(res.data)\n-      setTotalHousesPaid(res.data.total_houses_paid);\n-      setTotalHouses(res.data.total);\n-      setPercentage(res.data.percentage_paid);\n-    } catch (error) {\n-        console.error('Error fetching houses data:', error);\n-        setLoading(false);\n-    }\n-  };\n-\n-\n-  const [relatedMonths, setRelatedMonths] = useState({\n-    value: moment().format('YYYY-MM'),\n-    label: moment().format('MMMM YYYY')\n-  });\n-  \n-  const handleMonthChange = (selectedOption) => {\n-    setSelectedPeriod(selectedOption.value);\n-  };\n-\n-\n-  useEffect(() => {\n-    // Set nilai bulan saat ini saat komponen pertama kali dimuat\n-    const currentMonthOption = MonthOptions().find(\n-      (option) => option.value === moment().format('YYYY-MM')\n-    );\n-    setRelatedMonths(currentMonthOption);\n-  }, []);\n-\n-  useEffect(() => {\n-    fetchTransactions();\n-    fetchTotalBalance();\n-    fetchMonthlyPaid();\n-    fetchMonthlyBalances();\n-\n-  }, [selectedPeriod]);\n-  \n-\n-\n-  const getTypeIcon = (type) => {\n-    switch (type) {\n-      case 'income':\n-        return <FaRegArrowAltCircleDown  className=\"text-green-500 h-4 w-4 md:h-5 md:w-5 \" />;\n-      case 'expense':\n-        return <FaRegArrowAltCircleUp  className=\"text-red-500 h-4 w-4 md:h-5 md:w-5 \" />;\n-      case 'ipl':\n-        return <FaRegArrowAltCircleDown  className=\"text-green-700  h-4 w-4 md:h-5 md:w-5 \" />;\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const getTextColor = (type) => {\n-    switch (type) {\n-      case 'income':\n-        return \"text-green-500\";\n-      case 'expense':\n-        return \"text-red-500\";\n-      case 'ipl':\n-        return \"text-green-700\";\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const groupedTransactions = _.groupBy(transactions, 'transaction_type');\n-\n-   //console.log(groupedTransactions)\n-  // console.log()\n-\n-  const handleExpandRow = (index) => {\n-    let currentExpandedRows = null;\n-    const isRowExpanded = currentExpandedRows === index ? index : null;\n-    const newExpandedRows = isRowExpanded\n-      ? null\n-      : (currentExpandedRows = index);\n-    if (expandedRows !== index) {\n-      setExpandedRows(newExpandedRows);\n-    } else {\n-      setExpandedRows(null);\n-    }\n-  };\n-\n-\n-  if (loading) {\n-    return <Spinner />;\n-  }\n-\n-  return (\n-    <>\n-    <CustomThemeProviderSecond>\n-          <Card className='mb-5 shadow-none'>\n-            <div className='flex flex-col lg:flex-row justify-between gap-3'>\n-              <div className='flex flex-col border-cyan-700 gap-3 border-2 p-3 rounded-md lg:w-1/2'>\n-                <div className='flex items-center content-center gap-2  md:gap-3 '>\n-                  <span className='items-center content-center'>\n-                    <GrMoney className=\"h-7 w-7 lg:h-10 lg:w-10 text-cyan-700\" />\n-                  </span>\n-                  <div>\n-                    <h2 className='md:text-2xl text-xl font-bold text-cyan-700 '>{formatCurrency(totalBalance)}</h2>\n-                    \n-                  </div>\n-                </div>\n-                <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Saldo Akhir</h3>\n-                \n-              </div>\n-             <div className='flex lg:flex-row gap-2 lg:gap-4 justify-between lg:justify-start'>\n-                <div className='flex flex-col items-center content-center  gap-2  md:gap-3 p-2 lg:p-3 border-green-500 border-2 rounded-md'>\n-                    <div className='flex items-center content-center gap-2  md:gap-3 '>\n-                      <span className=''>\n-                        <FaRegArrowAltCircleDown className=\"h-7 w-7 lg:h-10 lg:w-10 text-green-500\" />\n-                      </span>\n-                      <div>\n-                        <h2 className='md:text-2xl text-md font-bold text-green-500 '>{formatCurrency(totalIncome)}</h2>\n-                        {/* <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pemasukan</h3> */}\n-                      </div>\n-                    </div>\n-                    <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pemasukan</h3>\n-                </div>\n-                <div className='flex flex-col items-center content-center gap-2  md:gap-3 border-2 border-red-500 p-2 lg:p-3 rounded-md'>\n-                  <div className='flex items-center content-center gap-2  md:gap-3 '>\n-                    <span className=''>\n-                      <FaRegArrowAltCircleUp className=\"h-7 w-7 lg:h-10 lg:w-10 text-red-500\" />\n-                    </span>\n-                    <div>\n-                      <h2 className='md:text-2xl text-md font-bold text-red-500 '>{formatCurrency(totalExpense)}</h2>\n-                      {/* <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pengaluaran</h3> */}\n-                    </div>\n-                  </div>\n-                  <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pengaluaran</h3> \n-                   \n-                </div>\n-\n-             </div>\n-            </div>\n-          </Card>\n-    </CustomThemeProviderSecond>\n-        \n-    <CustomThemeProviderSecond>\n-        <Card>\n-            <div className='flex items-center justify-start gap-4 mb-4 mt-3 bg-cyan-700 rounded-md p-3 '>\n-                <div>\n-                    <span className='font-semibold text-white'>PERIODE</span>\n-                </div>\n-                <Select\n-                    id=\"relatedMonths\"\n-                    options={MonthOptions()}\n-                    value={MonthOptions().find(option => option.value === selectedPeriod)}\n-                    onChange={handleMonthChange}\n-                    placeholder=\"Pilih bulan\"\n-                    className='bg-cyan-700 rounded w-full md:w-1/3'\n-                    styles={{\n-                      control: (baseStyles, state) => ({\n-                        ...baseStyles,\n-                        backgroundColor: '#0e7490',\n-                      }),\n-                      input: (styles) => ({ ...styles, color: '#fff' }),\n-                      placeholder: (styles) => ({ ...styles, color: '#fff' }),\n-                      singleValue: (styles, { data }) => ({ ...styles, color: '#fff' }),\n-                    }}\n-                />\n-            </div>\n-            <div className='flex gap-1 md:gap-4 justify-between flex-row mb-4'>\n-            \n-                <Card className='bg-green-700 text-white w-1/3'>\n-                <h3 className='font-bold text-sm md:text-xl flex flex-col lg:flex-row  items-start lg:items-center content-center'>\n-                  <span className='flex'>\n-                    <span><HiHome className=\"h-5 w-5  md:h-7 md:w-7 mr-1 lg:mr-2\" /></span>\n-                    <span>IPL</span>\n-                  </span>\n-                  <span className='text-xs lg:text-sm font-normal lg:ml-3'>{`${totalHousesPaid} / ${totalHouses} Rumah`}</span>\n-                  </h3>\n-                <span className='font-semibold text-sm md:text-lg'>{percentage}</span>\n-                </Card>\n-                <Card className='bg-green-500 text-white w-1/3'>\n-                <h3 className='font-bold text-sm md:text-xl flex items-start'><span><FaRegArrowAltCircleDown className=\"h-5 w-5  md:h-7 md:w-7 mr-2\" /></span><span>Masuk</span></h3>\n-                <span className='font-semibold text-xs md:text-lg'>{formatCurrency(totalIncomePeriod)}</span>\n-                </Card>\n-                <Card className='bg-red-500 text-white w-1/3'>\n-                <h3 className='font-bold text-sm md:text-xl flex items-start'><span><FaRegArrowAltCircleUp className=\"h-5 w-5  md:h-7 md:w-7 mr-2\" /></span><span>Keluar</span></h3>\n-                <span className='font-semibold text-xs md:text-lg'>{formatCurrency(totalExpensePeriod)}</span>\n-                </Card>\n-            \n-            </div>\n-            {/* <div>{`Last Update: ${moment(lastUpdate).format('DD MMM yyyy')}`}</div> */}\n-            <CustomThemeProviderSecond>\n-              <div className=\"overflow-x-auto\">\n-                  <Table>\n-                      <Table.Head className='' >\n-                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white w-2/3'>Keterangan</Table.HeadCell>\n-                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white'>Tanggal</Table.HeadCell>\n-                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white '>Nominal</Table.HeadCell>\n-                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white '></Table.HeadCell>\n-                      </Table.Head>\n-                      <Table.Body className=\"divide-y\">\n-                        {transactions && transactions.length > 0 && transactions[0] !== undefined ? (\n-                          <>\n-                            {Object.keys(groupedTransactions).map((transactionType, index) => (\n-                              <React.Fragment key={index}>\n-                                {groupedTransactions[transactionType].length > 0 && (\n-                                  <Table.Row \n-                                  className={`bg-white dark:border-gray-700 dark:bg-gray-800 ${expandedRows === index ? 'opacity-100' : 'opacity-0'}`}\n-                                  onClick={() => handleExpandRow(index)}>\n-                                    <Table.Cell colSpan=\"2\" className={`${getTextColor(transactionType)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>\n-                                      {transactionType === 'ipl' ? `Pemasukan IPL` : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}\n-                                      </Table.Cell>\n-                                    <Table.Cell className={`${getTextColor(transactionType)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>{formatCurrency(groupedTransactions[transactionType].reduce((acc, curr) => acc + curr.amount, 0))}</Table.Cell>\n-                                  </Table.Row>\n-                                )}\n-\n-                                {expandedRows === index ? (\n-                                  <>\n-                                  {groupedTransactions[transactionType].map((transaction, subIndex) => (\n-                                    <Table.Row key={subIndex} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-                                      <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                        <span className='flex items-start'>\n-                                          <span>{getTypeIcon(transaction.transaction_type)} </span>\n-                                          <span className=\"ml-2\">{transaction.description}</span>\n-                                        </span>\n-                                      </Table.Cell>\n-                                      <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                        {moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}\n-                                      </Table.Cell>\n-                                      <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                        {formatCurrency(transaction.amount)}\n-                                      </Table.Cell>\n-                                    </Table.Row>\n-                                  ))}\n-                                  </>\n-                                ) : null}\n-                              \n-                                \n-                                \n-                              </React.Fragment>\n-                            ))}\n-                          </>\n-                        ) : (\n-                          <Table.Row>\n-                          <Table.Cell colSpan=\"3\" className=\"text-center\">Data tidak tersedia</Table.Cell>\n-                          </Table.Row>\n-                        ) }\n-                      \n-                        \n-                      {/* {transactions && transactions.length > 0 && transactions[0] !== undefined ? (\n-                          transactions.map((transaction, index) => (\n-                              <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                      <span className='flex items-start'>\n-                                      <span>{getTypeIcon(transaction.transaction_type)} </span>\n-                                      <span className=\"ml-2\">{transaction.description}</span>\n-                                      </span>\n-                                  </Table.Cell>\n-                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                      {moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}\n-                                  </Table.Cell>\n-                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                      {formatCurrency(transaction.amount)}\n-                                  </Table.Cell>\n-                              </Table.Row>\n-                          ))\n-                          ) : (\n-                          <Table.Row>\n-                              <Table.Cell colSpan=\"3\" className=\"text-center\">Data tidak tersedia</Table.Cell>\n-                          </Table.Row>\n-                      )} */}\n-\n-                      \n-                      \n-                      </Table.Body>\n-                  </Table>\n-                  \n-              </div>\n-            </CustomThemeProviderSecond>\n-            \n-        </Card>\n-    </CustomThemeProviderSecond>\n-    </>\n-  );\n-}\n-\n-export const getServerSideProps = async (context) => {\n-    const session = await getSession(context);\n-    \n-    // if (!session) {\n-    //     return {\n-    //         redirect: {\n-    //             destination: '/',\n-    //             permanent: false,\n-    //         },\n-    //     };\n-    // }\n-  \n-    try {\n-        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n-            // headers: {\n-            //     Authorization: `Bearer ${session.accessToken}`,\n-            // },\n-        });\n-        return {\n-            props: {\n-              initialTransaction: res.data.data,\n-            },\n-        };\n-    } catch (error) {\n-        console.error('Error fetching tra data:', error);\n-        return {\n-            props: {\n-              initialTransaction: [],\n-            },\n-        };\n-    }\n-  };\n-\n export default Report;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722342640676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -333,9 +333,9 @@\n \n                                 {expandedRows === index ? (\n                                   <>\n                                   {groupedTransactions[transactionType].map((transaction, subIndex) => (\n-                                    <Table.Row key={subIndex} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n+                                    <Table.Row key={subIndex} className=\"bg-white dark:border-gray-700 dark:bg-gray-800 transition duration-300\">\n                                       <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n                                         <span className='flex items-start'>\n                                           <span>{getTypeIcon(transaction.transaction_type)} </span>\n                                           <span className=\"ml-2\">{transaction.description}</span>\n"
                },
                {
                    "date": 1722342727543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,433 @@\n+// pages/home.js\n+import React from 'react';\n+import {useSession ,getSession} from 'next-auth/react';\n+import { useEffect,useState } from 'react';\n+import _ from 'lodash';\n+import axios from 'axios';\n+import Spinner from './Spinner';\n+import CustomThemeProviderSecond from './CustomThemeSecond';\n+import { Card, Button, Table, Accordion } from 'flowbite-react';\n+import { GrMoney } from \"react-icons/gr\";\n+import {FaRegArrowAltCircleDown, FaRegArrowAltCircleUp } from 'react-icons/fa';\n+\n+import { HiHome } from \"react-icons/hi\";\n+\n+import Select from 'react-select';\n+import 'react-datepicker/dist/react-datepicker.css';\n+import moment from 'moment';\n+import 'moment/locale/id';\n+moment.locale('id');\n+import MonthOptions from './MonthOptions';\n+\n+const Report = ({ initialTransaction }) =>  {\n+  \n+  const [loading, setLoading] = useState(true);\n+  const { data: session, status } = useSession();\n+  const [transactions, setTransactions] = useState([initialTransaction]);\n+  const [reTransactions, setReTransactions] = useState([initialTransaction]);\n+  const [totalBalance, setTotalBalance] = useState(null);\n+  const [totalIncome, setTotalIncome] = useState(null);\n+  const [totalExpense, setTotalExpense] = useState(null);\n+  const [selectedPeriod, setSelectedPeriod] = useState(moment().format('YYYY-MM')); // Format YYYY-MM moment().format('YYYY-MM')\n+  const [monthlyBalances, setMonthlyBalances] = useState([]);\n+  const [totalIncomePeriod, setTotalIncomePeriod] = useState(0);\n+  const [totalExpensePeriod, setTotalExpensePeriod] = useState(0);\n+  const [totalHousesPaid, setTotalHousesPaid] = useState(0);\n+  const [totalHouses, setTotalHouses] = useState(0);\n+  const [lastUpdate, setLastUpdate] = useState();\n+  const [percentage, setPercentage] = useState(0);\n+  const [expandedRows, setExpandedRows] = useState(null);\n+\n+  \n+  const formatCurrency = (amount) => {\n+    return new Intl.NumberFormat('id-ID', {\n+        style: 'currency',\n+        currency: 'IDR',\n+        minimumFractionDigits: 0,\n+    }).format(amount);\n+  };\n+\n+  const fetchTransactions = async () => {\n+    try {\n+        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n+            params: {\n+              period: selectedPeriod\n+          }\n+        });\n+        //console.log(res.data)\n+        setTransactions(res.data.data);\n+        setReTransactions(res.data.data);\n+        setLastUpdate(res.data.lastUpdate);\n+        \n+        setLoading(false);\n+    } catch (error) {\n+        console.error('Error fetching houses data:', error);\n+        setLoading(false);\n+    }\n+  };\n+\n+  const fetchTotalBalance = async () => {\n+    try {\n+        const response = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/balance`, {\n+           \n+        });\n+       // console.log(response.data)\n+        setTotalBalance(response.data.totalBalance);\n+        setTotalIncome(response.data.totalIncome);\n+        setTotalExpense(response.data.totalExpense);\n+        setLoading(false);\n+    } catch (error) {\n+        console.error('Error fetching total balance:', error);\n+        setLoading(false);\n+    }\n+  };\n+\n+  const fetchMonthlyBalances = async () => {\n+    //console.log(selectedPeriod)\n+    try {\n+        const response = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/balance-monthly`, {\n+            params: {\n+                period: selectedPeriod\n+            }\n+        });\n+\n+        //console.log('Response data:', response.data);\n+\n+        if (Array.isArray(response.data) && response.data.length > 0) {\n+            // Gunakan data yang ada jika valid\n+            setMonthlyBalances(response.data);\n+            setTotalIncomePeriod(response.data[0].totalIncome || 0);\n+            setTotalExpensePeriod(response.data[0].totalExpense || 0);\n+        } else {\n+            // Tangani kasus jika data tidak sesuai\n+            setMonthlyBalances([]);\n+            setTotalIncomePeriod(0);\n+            setTotalExpensePeriod(0);\n+        }\n+       \n+    } catch (error) {\n+        console.error('Error fetching monthly balances:', error);\n+        setMonthlyBalances([]);\n+        setTotalIncomePeriod(0);\n+        setTotalExpensePeriod(0);\n+    }\n+  };\n+\n+  const fetchMonthlyPaid = async () => {\n+    try {\n+      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/houses/fee`, {\n+         \n+          params: {\n+            period: selectedPeriod\n+        }\n+      });\n+     // console.log(res.data)\n+      setTotalHousesPaid(res.data.total_houses_paid);\n+      setTotalHouses(res.data.total);\n+      setPercentage(res.data.percentage_paid);\n+    } catch (error) {\n+        console.error('Error fetching houses data:', error);\n+        setLoading(false);\n+    }\n+  };\n+\n+\n+  const [relatedMonths, setRelatedMonths] = useState({\n+    value: moment().format('YYYY-MM'),\n+    label: moment().format('MMMM YYYY')\n+  });\n+  \n+  const handleMonthChange = (selectedOption) => {\n+    setSelectedPeriod(selectedOption.value);\n+  };\n+\n+\n+  useEffect(() => {\n+    // Set nilai bulan saat ini saat komponen pertama kali dimuat\n+    const currentMonthOption = MonthOptions().find(\n+      (option) => option.value === moment().format('YYYY-MM')\n+    );\n+    setRelatedMonths(currentMonthOption);\n+  }, []);\n+\n+  useEffect(() => {\n+    fetchTransactions();\n+    fetchTotalBalance();\n+    fetchMonthlyPaid();\n+    fetchMonthlyBalances();\n+\n+  }, [selectedPeriod]);\n+  \n+\n+\n+  const getTypeIcon = (type) => {\n+    switch (type) {\n+      case 'income':\n+        return <FaRegArrowAltCircleDown  className=\"text-green-500 h-4 w-4 md:h-5 md:w-5 \" />;\n+      case 'expense':\n+        return <FaRegArrowAltCircleUp  className=\"text-red-500 h-4 w-4 md:h-5 md:w-5 \" />;\n+      case 'ipl':\n+        return <FaRegArrowAltCircleDown  className=\"text-green-700  h-4 w-4 md:h-5 md:w-5 \" />;\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const getTextColor = (type) => {\n+    switch (type) {\n+      case 'income':\n+        return \"text-green-500\";\n+      case 'expense':\n+        return \"text-red-500\";\n+      case 'ipl':\n+        return \"text-green-700\";\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const groupedTransactions = _.groupBy(transactions, 'transaction_type');\n+\n+   //console.log(groupedTransactions)\n+  // console.log()\n+\n+  const handleExpandRow = (index) => {\n+    let currentExpandedRows = null;\n+    const isRowExpanded = currentExpandedRows === index ? index : null;\n+    const newExpandedRows = isRowExpanded\n+      ? null\n+      : (currentExpandedRows = index);\n+    if (expandedRows !== index) {\n+      setExpandedRows(newExpandedRows);\n+    } else {\n+      setExpandedRows(null);\n+    }\n+  };\n+\n+\n+  if (loading) {\n+    return <Spinner />;\n+  }\n+\n+  return (\n+    <>\n+    <CustomThemeProviderSecond>\n+          <Card className='mb-5 shadow-none'>\n+            <div className='flex flex-col lg:flex-row justify-between gap-3'>\n+              <div className='flex flex-col border-cyan-700 gap-3 border-2 p-3 rounded-md lg:w-1/2'>\n+                <div className='flex items-center content-center gap-2  md:gap-3 '>\n+                  <span className='items-center content-center'>\n+                    <GrMoney className=\"h-7 w-7 lg:h-10 lg:w-10 text-cyan-700\" />\n+                  </span>\n+                  <div>\n+                    <h2 className='md:text-2xl text-xl font-bold text-cyan-700 '>{formatCurrency(totalBalance)}</h2>\n+                    \n+                  </div>\n+                </div>\n+                <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Saldo Akhir</h3>\n+                \n+              </div>\n+             <div className='flex lg:flex-row gap-2 lg:gap-4 justify-between lg:justify-start'>\n+                <div className='flex flex-col items-center content-center  gap-2  md:gap-3 p-2 lg:p-3 border-green-500 border-2 rounded-md'>\n+                    <div className='flex items-center content-center gap-2  md:gap-3 '>\n+                      <span className=''>\n+                        <FaRegArrowAltCircleDown className=\"h-7 w-7 lg:h-10 lg:w-10 text-green-500\" />\n+                      </span>\n+                      <div>\n+                        <h2 className='md:text-2xl text-md font-bold text-green-500 '>{formatCurrency(totalIncome)}</h2>\n+                        {/* <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pemasukan</h3> */}\n+                      </div>\n+                    </div>\n+                    <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pemasukan</h3>\n+                </div>\n+                <div className='flex flex-col items-center content-center gap-2  md:gap-3 border-2 border-red-500 p-2 lg:p-3 rounded-md'>\n+                  <div className='flex items-center content-center gap-2  md:gap-3 '>\n+                    <span className=''>\n+                      <FaRegArrowAltCircleUp className=\"h-7 w-7 lg:h-10 lg:w-10 text-red-500\" />\n+                    </span>\n+                    <div>\n+                      <h2 className='md:text-2xl text-md font-bold text-red-500 '>{formatCurrency(totalExpense)}</h2>\n+                      {/* <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pengaluaran</h3> */}\n+                    </div>\n+                  </div>\n+                  <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pengaluaran</h3> \n+                   \n+                </div>\n+\n+             </div>\n+            </div>\n+          </Card>\n+    </CustomThemeProviderSecond>\n+        \n+    <CustomThemeProviderSecond>\n+        <Card>\n+            <div className='flex items-center justify-start gap-4 mb-4 mt-3 bg-cyan-700 rounded-md p-3 '>\n+                <div>\n+                    <span className='font-semibold text-white'>PERIODE</span>\n+                </div>\n+                <Select\n+                    id=\"relatedMonths\"\n+                    options={MonthOptions()}\n+                    value={MonthOptions().find(option => option.value === selectedPeriod)}\n+                    onChange={handleMonthChange}\n+                    placeholder=\"Pilih bulan\"\n+                    className='bg-cyan-700 rounded w-full md:w-1/3'\n+                    styles={{\n+                      control: (baseStyles, state) => ({\n+                        ...baseStyles,\n+                        backgroundColor: '#0e7490',\n+                      }),\n+                      input: (styles) => ({ ...styles, color: '#fff' }),\n+                      placeholder: (styles) => ({ ...styles, color: '#fff' }),\n+                      singleValue: (styles, { data }) => ({ ...styles, color: '#fff' }),\n+                    }}\n+                />\n+            </div>\n+            <div className='flex gap-1 md:gap-4 justify-between flex-row mb-4'>\n+            \n+                <Card className='bg-green-700 text-white w-1/3'>\n+                <h3 className='font-bold text-sm md:text-xl flex flex-col lg:flex-row  items-start lg:items-center content-center'>\n+                  <span className='flex'>\n+                    <span><HiHome className=\"h-5 w-5  md:h-7 md:w-7 mr-1 lg:mr-2\" /></span>\n+                    <span>IPL</span>\n+                  </span>\n+                  <span className='text-xs lg:text-sm font-normal lg:ml-3'>{`${totalHousesPaid} / ${totalHouses} Rumah`}</span>\n+                  </h3>\n+                <span className='font-semibold text-sm md:text-lg'>{percentage}</span>\n+                </Card>\n+                <Card className='bg-green-500 text-white w-1/3'>\n+                <h3 className='font-bold text-sm md:text-xl flex items-start'><span><FaRegArrowAltCircleDown className=\"h-5 w-5  md:h-7 md:w-7 mr-2\" /></span><span>Masuk</span></h3>\n+                <span className='font-semibold text-xs md:text-lg'>{formatCurrency(totalIncomePeriod)}</span>\n+                </Card>\n+                <Card className='bg-red-500 text-white w-1/3'>\n+                <h3 className='font-bold text-sm md:text-xl flex items-start'><span><FaRegArrowAltCircleUp className=\"h-5 w-5  md:h-7 md:w-7 mr-2\" /></span><span>Keluar</span></h3>\n+                <span className='font-semibold text-xs md:text-lg'>{formatCurrency(totalExpensePeriod)}</span>\n+                </Card>\n+            \n+            </div>\n+            {/* <div>{`Last Update: ${moment(lastUpdate).format('DD MMM yyyy')}`}</div> */}\n+            <CustomThemeProviderSecond>\n+              <div className=\"overflow-x-auto\">\n+                  <Table>\n+                      <Table.Head className='' >\n+                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white w-2/3'>Keterangan</Table.HeadCell>\n+                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white'>Tanggal</Table.HeadCell>\n+                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white '>Nominal</Table.HeadCell>\n+                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white '></Table.HeadCell>\n+                      </Table.Head>\n+                      <Table.Body className=\"divide-y\">\n+                        {transactions && transactions.length > 0 && transactions[0] !== undefined ? (\n+                          <>\n+                            {Object.keys(groupedTransactions).map((transactionType, index) => (\n+                              <React.Fragment key={index}>\n+                                {groupedTransactions[transactionType].length > 0 && (\n+                                  <Table.Row \n+                                  className={`bg-white dark:border-gray-700 dark:bg-gray-800 transition duration-300`}\n+                                  onClick={() => handleExpandRow(index)}>\n+                                    <Table.Cell colSpan=\"2\" className={`${getTextColor(transactionType)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>\n+                                      {transactionType === 'ipl' ? `Pemasukan IPL` : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}\n+                                      </Table.Cell>\n+                                    <Table.Cell className={`${getTextColor(transactionType)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>{formatCurrency(groupedTransactions[transactionType].reduce((acc, curr) => acc + curr.amount, 0))}</Table.Cell>\n+                                  </Table.Row>\n+                                )}\n+\n+                                  {groupedTransactions[transactionType].map((transaction, subIndex) => (\n+                                    <Table.Row key={subIndex} className=\"bg-white dark:border-gray-700 dark:bg-gray-800 transition duration-300\">\n+                                      <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                        <span className='flex items-start'>\n+                                          <span>{getTypeIcon(transaction.transaction_type)} </span>\n+                                          <span className=\"ml-2\">{transaction.description}</span>\n+                                        </span>\n+                                      </Table.Cell>\n+                                      <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                        {moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}\n+                                      </Table.Cell>\n+                                      <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                        {formatCurrency(transaction.amount)}\n+                                      </Table.Cell>\n+                                    </Table.Row>\n+                                  ))}\n+                              \n+                                \n+                                \n+                              </React.Fragment>\n+                            ))}\n+                          </>\n+                        ) : (\n+                          <Table.Row>\n+                          <Table.Cell colSpan=\"3\" className=\"text-center\">Data tidak tersedia</Table.Cell>\n+                          </Table.Row>\n+                        ) }\n+                      \n+                        \n+                      {/* {transactions && transactions.length > 0 && transactions[0] !== undefined ? (\n+                          transactions.map((transaction, index) => (\n+                              <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n+                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                      <span className='flex items-start'>\n+                                      <span>{getTypeIcon(transaction.transaction_type)} </span>\n+                                      <span className=\"ml-2\">{transaction.description}</span>\n+                                      </span>\n+                                  </Table.Cell>\n+                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                      {moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}\n+                                  </Table.Cell>\n+                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                      {formatCurrency(transaction.amount)}\n+                                  </Table.Cell>\n+                              </Table.Row>\n+                          ))\n+                          ) : (\n+                          <Table.Row>\n+                              <Table.Cell colSpan=\"3\" className=\"text-center\">Data tidak tersedia</Table.Cell>\n+                          </Table.Row>\n+                      )} */}\n+\n+                      \n+                      \n+                      </Table.Body>\n+                  </Table>\n+                  \n+              </div>\n+            </CustomThemeProviderSecond>\n+            \n+        </Card>\n+    </CustomThemeProviderSecond>\n+    </>\n+  );\n+}\n+\n+export const getServerSideProps = async (context) => {\n+    const session = await getSession(context);\n+    \n+    // if (!session) {\n+    //     return {\n+    //         redirect: {\n+    //             destination: '/',\n+    //             permanent: false,\n+    //         },\n+    //     };\n+    // }\n+  \n+    try {\n+        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n+            // headers: {\n+            //     Authorization: `Bearer ${session.accessToken}`,\n+            // },\n+        });\n+        return {\n+            props: {\n+              initialTransaction: res.data.data,\n+            },\n+        };\n+    } catch (error) {\n+        console.error('Error fetching tra data:', error);\n+        return {\n+            props: {\n+              initialTransaction: [],\n+            },\n+        };\n+    }\n+  };\n+\n+export default Report;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722342750222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -321,9 +321,9 @@\n                             {Object.keys(groupedTransactions).map((transactionType, index) => (\n                               <React.Fragment key={index}>\n                                 {groupedTransactions[transactionType].length > 0 && (\n                                   <Table.Row \n-                                  className={`bg-white dark:border-gray-700 dark:bg-gray-800 transition duration-300`}\n+                                  className={`bg-white dark:border-gray-700 dark:bg-gray-800`}\n                                   onClick={() => handleExpandRow(index)}>\n                                     <Table.Cell colSpan=\"2\" className={`${getTextColor(transactionType)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>\n                                       {transactionType === 'ipl' ? `Pemasukan IPL` : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}\n                                       </Table.Cell>\n@@ -429,442 +429,5 @@\n         };\n     }\n   };\n \n-export default Report;\n-// pages/home.js\n-import React from 'react';\n-import {useSession ,getSession} from 'next-auth/react';\n-import { useEffect,useState } from 'react';\n-import _ from 'lodash';\n-import axios from 'axios';\n-import Spinner from './Spinner';\n-import CustomThemeProviderSecond from './CustomThemeSecond';\n-import { Card, Button, Table, Accordion } from 'flowbite-react';\n-import { GrMoney } from \"react-icons/gr\";\n-import {FaRegArrowAltCircleDown, FaRegArrowAltCircleUp } from 'react-icons/fa';\n-\n-import { HiHome } from \"react-icons/hi\";\n-\n-import Select from 'react-select';\n-import 'react-datepicker/dist/react-datepicker.css';\n-import moment from 'moment';\n-import 'moment/locale/id';\n-moment.locale('id');\n-import MonthOptions from './MonthOptions';\n-\n-const Report = ({ initialTransaction }) =>  {\n-  \n-  const [loading, setLoading] = useState(true);\n-  const { data: session, status } = useSession();\n-  const [transactions, setTransactions] = useState([initialTransaction]);\n-  const [reTransactions, setReTransactions] = useState([initialTransaction]);\n-  const [totalBalance, setTotalBalance] = useState(null);\n-  const [totalIncome, setTotalIncome] = useState(null);\n-  const [totalExpense, setTotalExpense] = useState(null);\n-  const [selectedPeriod, setSelectedPeriod] = useState(moment().format('YYYY-MM')); // Format YYYY-MM moment().format('YYYY-MM')\n-  const [monthlyBalances, setMonthlyBalances] = useState([]);\n-  const [totalIncomePeriod, setTotalIncomePeriod] = useState(0);\n-  const [totalExpensePeriod, setTotalExpensePeriod] = useState(0);\n-  const [totalHousesPaid, setTotalHousesPaid] = useState(0);\n-  const [totalHouses, setTotalHouses] = useState(0);\n-  const [lastUpdate, setLastUpdate] = useState();\n-  const [percentage, setPercentage] = useState(0);\n-  const [expandedRows, setExpandedRows] = useState(null);\n-\n-  \n-  const formatCurrency = (amount) => {\n-    return new Intl.NumberFormat('id-ID', {\n-        style: 'currency',\n-        currency: 'IDR',\n-        minimumFractionDigits: 0,\n-    }).format(amount);\n-  };\n-\n-  const fetchTransactions = async () => {\n-    try {\n-        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n-            params: {\n-              period: selectedPeriod\n-          }\n-        });\n-        //console.log(res.data)\n-        setTransactions(res.data.data);\n-        setReTransactions(res.data.data);\n-        setLastUpdate(res.data.lastUpdate);\n-        \n-        setLoading(false);\n-    } catch (error) {\n-        console.error('Error fetching houses data:', error);\n-        setLoading(false);\n-    }\n-  };\n-\n-  const fetchTotalBalance = async () => {\n-    try {\n-        const response = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/balance`, {\n-           \n-        });\n-       // console.log(response.data)\n-        setTotalBalance(response.data.totalBalance);\n-        setTotalIncome(response.data.totalIncome);\n-        setTotalExpense(response.data.totalExpense);\n-        setLoading(false);\n-    } catch (error) {\n-        console.error('Error fetching total balance:', error);\n-        setLoading(false);\n-    }\n-  };\n-\n-  const fetchMonthlyBalances = async () => {\n-    //console.log(selectedPeriod)\n-    try {\n-        const response = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/balance-monthly`, {\n-            params: {\n-                period: selectedPeriod\n-            }\n-        });\n-\n-        //console.log('Response data:', response.data);\n-\n-        if (Array.isArray(response.data) && response.data.length > 0) {\n-            // Gunakan data yang ada jika valid\n-            setMonthlyBalances(response.data);\n-            setTotalIncomePeriod(response.data[0].totalIncome || 0);\n-            setTotalExpensePeriod(response.data[0].totalExpense || 0);\n-        } else {\n-            // Tangani kasus jika data tidak sesuai\n-            setMonthlyBalances([]);\n-            setTotalIncomePeriod(0);\n-            setTotalExpensePeriod(0);\n-        }\n-       \n-    } catch (error) {\n-        console.error('Error fetching monthly balances:', error);\n-        setMonthlyBalances([]);\n-        setTotalIncomePeriod(0);\n-        setTotalExpensePeriod(0);\n-    }\n-  };\n-\n-  const fetchMonthlyPaid = async () => {\n-    try {\n-      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/houses/fee`, {\n-         \n-          params: {\n-            period: selectedPeriod\n-        }\n-      });\n-     // console.log(res.data)\n-      setTotalHousesPaid(res.data.total_houses_paid);\n-      setTotalHouses(res.data.total);\n-      setPercentage(res.data.percentage_paid);\n-    } catch (error) {\n-        console.error('Error fetching houses data:', error);\n-        setLoading(false);\n-    }\n-  };\n-\n-\n-  const [relatedMonths, setRelatedMonths] = useState({\n-    value: moment().format('YYYY-MM'),\n-    label: moment().format('MMMM YYYY')\n-  });\n-  \n-  const handleMonthChange = (selectedOption) => {\n-    setSelectedPeriod(selectedOption.value);\n-  };\n-\n-\n-  useEffect(() => {\n-    // Set nilai bulan saat ini saat komponen pertama kali dimuat\n-    const currentMonthOption = MonthOptions().find(\n-      (option) => option.value === moment().format('YYYY-MM')\n-    );\n-    setRelatedMonths(currentMonthOption);\n-  }, []);\n-\n-  useEffect(() => {\n-    fetchTransactions();\n-    fetchTotalBalance();\n-    fetchMonthlyPaid();\n-    fetchMonthlyBalances();\n-\n-  }, [selectedPeriod]);\n-  \n-\n-\n-  const getTypeIcon = (type) => {\n-    switch (type) {\n-      case 'income':\n-        return <FaRegArrowAltCircleDown  className=\"text-green-500 h-4 w-4 md:h-5 md:w-5 \" />;\n-      case 'expense':\n-        return <FaRegArrowAltCircleUp  className=\"text-red-500 h-4 w-4 md:h-5 md:w-5 \" />;\n-      case 'ipl':\n-        return <FaRegArrowAltCircleDown  className=\"text-green-700  h-4 w-4 md:h-5 md:w-5 \" />;\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const getTextColor = (type) => {\n-    switch (type) {\n-      case 'income':\n-        return \"text-green-500\";\n-      case 'expense':\n-        return \"text-red-500\";\n-      case 'ipl':\n-        return \"text-green-700\";\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const groupedTransactions = _.groupBy(transactions, 'transaction_type');\n-\n-   //console.log(groupedTransactions)\n-  // console.log()\n-\n-  const handleExpandRow = (index) => {\n-    let currentExpandedRows = null;\n-    const isRowExpanded = currentExpandedRows === index ? index : null;\n-    const newExpandedRows = isRowExpanded\n-      ? null\n-      : (currentExpandedRows = index);\n-    if (expandedRows !== index) {\n-      setExpandedRows(newExpandedRows);\n-    } else {\n-      setExpandedRows(null);\n-    }\n-  };\n-\n-\n-  if (loading) {\n-    return <Spinner />;\n-  }\n-\n-  return (\n-    <>\n-    <CustomThemeProviderSecond>\n-          <Card className='mb-5 shadow-none'>\n-            <div className='flex flex-col lg:flex-row justify-between gap-3'>\n-              <div className='flex flex-col border-cyan-700 gap-3 border-2 p-3 rounded-md lg:w-1/2'>\n-                <div className='flex items-center content-center gap-2  md:gap-3 '>\n-                  <span className='items-center content-center'>\n-                    <GrMoney className=\"h-7 w-7 lg:h-10 lg:w-10 text-cyan-700\" />\n-                  </span>\n-                  <div>\n-                    <h2 className='md:text-2xl text-xl font-bold text-cyan-700 '>{formatCurrency(totalBalance)}</h2>\n-                    \n-                  </div>\n-                </div>\n-                <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Saldo Akhir</h3>\n-                \n-              </div>\n-             <div className='flex lg:flex-row gap-2 lg:gap-4 justify-between lg:justify-start'>\n-                <div className='flex flex-col items-center content-center  gap-2  md:gap-3 p-2 lg:p-3 border-green-500 border-2 rounded-md'>\n-                    <div className='flex items-center content-center gap-2  md:gap-3 '>\n-                      <span className=''>\n-                        <FaRegArrowAltCircleDown className=\"h-7 w-7 lg:h-10 lg:w-10 text-green-500\" />\n-                      </span>\n-                      <div>\n-                        <h2 className='md:text-2xl text-md font-bold text-green-500 '>{formatCurrency(totalIncome)}</h2>\n-                        {/* <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pemasukan</h3> */}\n-                      </div>\n-                    </div>\n-                    <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pemasukan</h3>\n-                </div>\n-                <div className='flex flex-col items-center content-center gap-2  md:gap-3 border-2 border-red-500 p-2 lg:p-3 rounded-md'>\n-                  <div className='flex items-center content-center gap-2  md:gap-3 '>\n-                    <span className=''>\n-                      <FaRegArrowAltCircleUp className=\"h-7 w-7 lg:h-10 lg:w-10 text-red-500\" />\n-                    </span>\n-                    <div>\n-                      <h2 className='md:text-2xl text-md font-bold text-red-500 '>{formatCurrency(totalExpense)}</h2>\n-                      {/* <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pengaluaran</h3> */}\n-                    </div>\n-                  </div>\n-                  <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pengaluaran</h3> \n-                   \n-                </div>\n-\n-             </div>\n-            </div>\n-          </Card>\n-    </CustomThemeProviderSecond>\n-        \n-    <CustomThemeProviderSecond>\n-        <Card>\n-            <div className='flex items-center justify-start gap-4 mb-4 mt-3 bg-cyan-700 rounded-md p-3 '>\n-                <div>\n-                    <span className='font-semibold text-white'>PERIODE</span>\n-                </div>\n-                <Select\n-                    id=\"relatedMonths\"\n-                    options={MonthOptions()}\n-                    value={MonthOptions().find(option => option.value === selectedPeriod)}\n-                    onChange={handleMonthChange}\n-                    placeholder=\"Pilih bulan\"\n-                    className='bg-cyan-700 rounded w-full md:w-1/3'\n-                    styles={{\n-                      control: (baseStyles, state) => ({\n-                        ...baseStyles,\n-                        backgroundColor: '#0e7490',\n-                      }),\n-                      input: (styles) => ({ ...styles, color: '#fff' }),\n-                      placeholder: (styles) => ({ ...styles, color: '#fff' }),\n-                      singleValue: (styles, { data }) => ({ ...styles, color: '#fff' }),\n-                    }}\n-                />\n-            </div>\n-            <div className='flex gap-1 md:gap-4 justify-between flex-row mb-4'>\n-            \n-                <Card className='bg-green-700 text-white w-1/3'>\n-                <h3 className='font-bold text-sm md:text-xl flex flex-col lg:flex-row  items-start lg:items-center content-center'>\n-                  <span className='flex'>\n-                    <span><HiHome className=\"h-5 w-5  md:h-7 md:w-7 mr-1 lg:mr-2\" /></span>\n-                    <span>IPL</span>\n-                  </span>\n-                  <span className='text-xs lg:text-sm font-normal lg:ml-3'>{`${totalHousesPaid} / ${totalHouses} Rumah`}</span>\n-                  </h3>\n-                <span className='font-semibold text-sm md:text-lg'>{percentage}</span>\n-                </Card>\n-                <Card className='bg-green-500 text-white w-1/3'>\n-                <h3 className='font-bold text-sm md:text-xl flex items-start'><span><FaRegArrowAltCircleDown className=\"h-5 w-5  md:h-7 md:w-7 mr-2\" /></span><span>Masuk</span></h3>\n-                <span className='font-semibold text-xs md:text-lg'>{formatCurrency(totalIncomePeriod)}</span>\n-                </Card>\n-                <Card className='bg-red-500 text-white w-1/3'>\n-                <h3 className='font-bold text-sm md:text-xl flex items-start'><span><FaRegArrowAltCircleUp className=\"h-5 w-5  md:h-7 md:w-7 mr-2\" /></span><span>Keluar</span></h3>\n-                <span className='font-semibold text-xs md:text-lg'>{formatCurrency(totalExpensePeriod)}</span>\n-                </Card>\n-            \n-            </div>\n-            {/* <div>{`Last Update: ${moment(lastUpdate).format('DD MMM yyyy')}`}</div> */}\n-            <CustomThemeProviderSecond>\n-              <div className=\"overflow-x-auto\">\n-                  <Table>\n-                      <Table.Head className='' >\n-                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white w-2/3'>Keterangan</Table.HeadCell>\n-                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white'>Tanggal</Table.HeadCell>\n-                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white '>Nominal</Table.HeadCell>\n-                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white '></Table.HeadCell>\n-                      </Table.Head>\n-                      <Table.Body className=\"divide-y\">\n-                        {transactions && transactions.length > 0 && transactions[0] !== undefined ? (\n-                          <>\n-                            {Object.keys(groupedTransactions).map((transactionType, index) => (\n-                              <React.Fragment key={index}>\n-                                {groupedTransactions[transactionType].length > 0 && (\n-                                  <Table.Row \n-                                  className={`bg-white dark:border-gray-700 dark:bg-gray-800 transition duration-300`}\n-                                  onClick={() => handleExpandRow(index)}>\n-                                    <Table.Cell colSpan=\"2\" className={`${getTextColor(transactionType)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>\n-                                      {transactionType === 'ipl' ? `Pemasukan IPL` : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}\n-                                      </Table.Cell>\n-                                    <Table.Cell className={`${getTextColor(transactionType)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>{formatCurrency(groupedTransactions[transactionType].reduce((acc, curr) => acc + curr.amount, 0))}</Table.Cell>\n-                                  </Table.Row>\n-                                )}\n-\n-                                {expandedRows === index ? (\n-                                  <>\n-                                  {groupedTransactions[transactionType].map((transaction, subIndex) => (\n-                                    <Table.Row key={subIndex} className=\"bg-white dark:border-gray-700 dark:bg-gray-800 transition duration-300\">\n-                                      <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                        <span className='flex items-start'>\n-                                          <span>{getTypeIcon(transaction.transaction_type)} </span>\n-                                          <span className=\"ml-2\">{transaction.description}</span>\n-                                        </span>\n-                                      </Table.Cell>\n-                                      <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                        {moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}\n-                                      </Table.Cell>\n-                                      <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                        {formatCurrency(transaction.amount)}\n-                                      </Table.Cell>\n-                                    </Table.Row>\n-                                  ))}\n-                                  </>\n-                                ) : null}\n-                              \n-                                \n-                                \n-                              </React.Fragment>\n-                            ))}\n-                          </>\n-                        ) : (\n-                          <Table.Row>\n-                          <Table.Cell colSpan=\"3\" className=\"text-center\">Data tidak tersedia</Table.Cell>\n-                          </Table.Row>\n-                        ) }\n-                      \n-                        \n-                      {/* {transactions && transactions.length > 0 && transactions[0] !== undefined ? (\n-                          transactions.map((transaction, index) => (\n-                              <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                      <span className='flex items-start'>\n-                                      <span>{getTypeIcon(transaction.transaction_type)} </span>\n-                                      <span className=\"ml-2\">{transaction.description}</span>\n-                                      </span>\n-                                  </Table.Cell>\n-                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                      {moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}\n-                                  </Table.Cell>\n-                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                      {formatCurrency(transaction.amount)}\n-                                  </Table.Cell>\n-                              </Table.Row>\n-                          ))\n-                          ) : (\n-                          <Table.Row>\n-                              <Table.Cell colSpan=\"3\" className=\"text-center\">Data tidak tersedia</Table.Cell>\n-                          </Table.Row>\n-                      )} */}\n-\n-                      \n-                      \n-                      </Table.Body>\n-                  </Table>\n-                  \n-              </div>\n-            </CustomThemeProviderSecond>\n-            \n-        </Card>\n-    </CustomThemeProviderSecond>\n-    </>\n-  );\n-}\n-\n-export const getServerSideProps = async (context) => {\n-    const session = await getSession(context);\n-    \n-    // if (!session) {\n-    //     return {\n-    //         redirect: {\n-    //             destination: '/',\n-    //             permanent: false,\n-    //         },\n-    //     };\n-    // }\n-  \n-    try {\n-        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n-            // headers: {\n-            //     Authorization: `Bearer ${session.accessToken}`,\n-            // },\n-        });\n-        return {\n-            props: {\n-              initialTransaction: res.data.data,\n-            },\n-        };\n-    } catch (error) {\n-        console.error('Error fetching tra data:', error);\n-        return {\n-            props: {\n-              initialTransaction: [],\n-            },\n-        };\n-    }\n-  };\n-\n export default Report;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722342816259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -331,9 +331,9 @@\n                                   </Table.Row>\n                                 )}\n \n                                   {groupedTransactions[transactionType].map((transaction, subIndex) => (\n-                                    <Table.Row key={subIndex} className=\"bg-white dark:border-gray-700 dark:bg-gray-800 transition duration-300\">\n+                                    <Table.Row key={subIndex} className={`bg-white dark:border-gray-700 dark:bg-gray-800 transition duration-300 ${expandedRows === index? '': 'hidden'}`}>\n                                       <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n                                         <span className='flex items-start'>\n                                           <span>{getTypeIcon(transaction.transaction_type)} </span>\n                                           <span className=\"ml-2\">{transaction.description}</span>\n"
                },
                {
                    "date": 1722342931502,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,433 @@\n+// pages/home.js\n+import React from 'react';\n+import {useSession ,getSession} from 'next-auth/react';\n+import { useEffect,useState } from 'react';\n+import _ from 'lodash';\n+import axios from 'axios';\n+import Spinner from './Spinner';\n+import CustomThemeProviderSecond from './CustomThemeSecond';\n+import { Card, Button, Table, Accordion } from 'flowbite-react';\n+import { GrMoney } from \"react-icons/gr\";\n+import {FaRegArrowAltCircleDown, FaRegArrowAltCircleUp } from 'react-icons/fa';\n+\n+import { HiHome } from \"react-icons/hi\";\n+\n+import Select from 'react-select';\n+import 'react-datepicker/dist/react-datepicker.css';\n+import moment from 'moment';\n+import 'moment/locale/id';\n+moment.locale('id');\n+import MonthOptions from './MonthOptions';\n+\n+const Report = ({ initialTransaction }) =>  {\n+  \n+  const [loading, setLoading] = useState(true);\n+  const { data: session, status } = useSession();\n+  const [transactions, setTransactions] = useState([initialTransaction]);\n+  const [reTransactions, setReTransactions] = useState([initialTransaction]);\n+  const [totalBalance, setTotalBalance] = useState(null);\n+  const [totalIncome, setTotalIncome] = useState(null);\n+  const [totalExpense, setTotalExpense] = useState(null);\n+  const [selectedPeriod, setSelectedPeriod] = useState(moment().format('YYYY-MM')); // Format YYYY-MM moment().format('YYYY-MM')\n+  const [monthlyBalances, setMonthlyBalances] = useState([]);\n+  const [totalIncomePeriod, setTotalIncomePeriod] = useState(0);\n+  const [totalExpensePeriod, setTotalExpensePeriod] = useState(0);\n+  const [totalHousesPaid, setTotalHousesPaid] = useState(0);\n+  const [totalHouses, setTotalHouses] = useState(0);\n+  const [lastUpdate, setLastUpdate] = useState();\n+  const [percentage, setPercentage] = useState(0);\n+  const [expandedRows, setExpandedRows] = useState(null);\n+\n+  \n+  const formatCurrency = (amount) => {\n+    return new Intl.NumberFormat('id-ID', {\n+        style: 'currency',\n+        currency: 'IDR',\n+        minimumFractionDigits: 0,\n+    }).format(amount);\n+  };\n+\n+  const fetchTransactions = async () => {\n+    try {\n+        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n+            params: {\n+              period: selectedPeriod\n+          }\n+        });\n+        //console.log(res.data)\n+        setTransactions(res.data.data);\n+        setReTransactions(res.data.data);\n+        setLastUpdate(res.data.lastUpdate);\n+        \n+        setLoading(false);\n+    } catch (error) {\n+        console.error('Error fetching houses data:', error);\n+        setLoading(false);\n+    }\n+  };\n+\n+  const fetchTotalBalance = async () => {\n+    try {\n+        const response = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/balance`, {\n+           \n+        });\n+       // console.log(response.data)\n+        setTotalBalance(response.data.totalBalance);\n+        setTotalIncome(response.data.totalIncome);\n+        setTotalExpense(response.data.totalExpense);\n+        setLoading(false);\n+    } catch (error) {\n+        console.error('Error fetching total balance:', error);\n+        setLoading(false);\n+    }\n+  };\n+\n+  const fetchMonthlyBalances = async () => {\n+    //console.log(selectedPeriod)\n+    try {\n+        const response = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/balance-monthly`, {\n+            params: {\n+                period: selectedPeriod\n+            }\n+        });\n+\n+        //console.log('Response data:', response.data);\n+\n+        if (Array.isArray(response.data) && response.data.length > 0) {\n+            // Gunakan data yang ada jika valid\n+            setMonthlyBalances(response.data);\n+            setTotalIncomePeriod(response.data[0].totalIncome || 0);\n+            setTotalExpensePeriod(response.data[0].totalExpense || 0);\n+        } else {\n+            // Tangani kasus jika data tidak sesuai\n+            setMonthlyBalances([]);\n+            setTotalIncomePeriod(0);\n+            setTotalExpensePeriod(0);\n+        }\n+       \n+    } catch (error) {\n+        console.error('Error fetching monthly balances:', error);\n+        setMonthlyBalances([]);\n+        setTotalIncomePeriod(0);\n+        setTotalExpensePeriod(0);\n+    }\n+  };\n+\n+  const fetchMonthlyPaid = async () => {\n+    try {\n+      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/houses/fee`, {\n+         \n+          params: {\n+            period: selectedPeriod\n+        }\n+      });\n+     // console.log(res.data)\n+      setTotalHousesPaid(res.data.total_houses_paid);\n+      setTotalHouses(res.data.total);\n+      setPercentage(res.data.percentage_paid);\n+    } catch (error) {\n+        console.error('Error fetching houses data:', error);\n+        setLoading(false);\n+    }\n+  };\n+\n+\n+  const [relatedMonths, setRelatedMonths] = useState({\n+    value: moment().format('YYYY-MM'),\n+    label: moment().format('MMMM YYYY')\n+  });\n+  \n+  const handleMonthChange = (selectedOption) => {\n+    setSelectedPeriod(selectedOption.value);\n+  };\n+\n+\n+  useEffect(() => {\n+    // Set nilai bulan saat ini saat komponen pertama kali dimuat\n+    const currentMonthOption = MonthOptions().find(\n+      (option) => option.value === moment().format('YYYY-MM')\n+    );\n+    setRelatedMonths(currentMonthOption);\n+  }, []);\n+\n+  useEffect(() => {\n+    fetchTransactions();\n+    fetchTotalBalance();\n+    fetchMonthlyPaid();\n+    fetchMonthlyBalances();\n+\n+  }, [selectedPeriod]);\n+  \n+\n+\n+  const getTypeIcon = (type) => {\n+    switch (type) {\n+      case 'income':\n+        return <FaRegArrowAltCircleDown  className=\"text-green-500 h-4 w-4 md:h-5 md:w-5 \" />;\n+      case 'expense':\n+        return <FaRegArrowAltCircleUp  className=\"text-red-500 h-4 w-4 md:h-5 md:w-5 \" />;\n+      case 'ipl':\n+        return <FaRegArrowAltCircleDown  className=\"text-green-700  h-4 w-4 md:h-5 md:w-5 \" />;\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const getTextColor = (type) => {\n+    switch (type) {\n+      case 'income':\n+        return \"text-green-500\";\n+      case 'expense':\n+        return \"text-red-500\";\n+      case 'ipl':\n+        return \"text-green-700\";\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const groupedTransactions = _.groupBy(transactions, 'transaction_type');\n+\n+   //console.log(groupedTransactions)\n+  // console.log()\n+\n+  const handleExpandRow = (index) => {\n+    let currentExpandedRows = null;\n+    const isRowExpanded = currentExpandedRows === index ? index : null;\n+    const newExpandedRows = isRowExpanded\n+      ? null\n+      : (currentExpandedRows = index);\n+    if (expandedRows !== index) {\n+      setExpandedRows(newExpandedRows);\n+    } else {\n+      setExpandedRows(null);\n+    }\n+  };\n+\n+\n+  if (loading) {\n+    return <Spinner />;\n+  }\n+\n+  return (\n+    <>\n+    <CustomThemeProviderSecond>\n+          <Card className='mb-5 shadow-none'>\n+            <div className='flex flex-col lg:flex-row justify-between gap-3'>\n+              <div className='flex flex-col border-cyan-700 gap-3 border-2 p-3 rounded-md lg:w-1/2'>\n+                <div className='flex items-center content-center gap-2  md:gap-3 '>\n+                  <span className='items-center content-center'>\n+                    <GrMoney className=\"h-7 w-7 lg:h-10 lg:w-10 text-cyan-700\" />\n+                  </span>\n+                  <div>\n+                    <h2 className='md:text-2xl text-xl font-bold text-cyan-700 '>{formatCurrency(totalBalance)}</h2>\n+                    \n+                  </div>\n+                </div>\n+                <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Saldo Akhir</h3>\n+                \n+              </div>\n+             <div className='flex lg:flex-row gap-2 lg:gap-4 justify-between lg:justify-start'>\n+                <div className='flex flex-col items-center content-center  gap-2  md:gap-3 p-2 lg:p-3 border-green-500 border-2 rounded-md'>\n+                    <div className='flex items-center content-center gap-2  md:gap-3 '>\n+                      <span className=''>\n+                        <FaRegArrowAltCircleDown className=\"h-7 w-7 lg:h-10 lg:w-10 text-green-500\" />\n+                      </span>\n+                      <div>\n+                        <h2 className='md:text-2xl text-md font-bold text-green-500 '>{formatCurrency(totalIncome)}</h2>\n+                        {/* <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pemasukan</h3> */}\n+                      </div>\n+                    </div>\n+                    <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pemasukan</h3>\n+                </div>\n+                <div className='flex flex-col items-center content-center gap-2  md:gap-3 border-2 border-red-500 p-2 lg:p-3 rounded-md'>\n+                  <div className='flex items-center content-center gap-2  md:gap-3 '>\n+                    <span className=''>\n+                      <FaRegArrowAltCircleUp className=\"h-7 w-7 lg:h-10 lg:w-10 text-red-500\" />\n+                    </span>\n+                    <div>\n+                      <h2 className='md:text-2xl text-md font-bold text-red-500 '>{formatCurrency(totalExpense)}</h2>\n+                      {/* <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pengaluaran</h3> */}\n+                    </div>\n+                  </div>\n+                  <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pengaluaran</h3> \n+                   \n+                </div>\n+\n+             </div>\n+            </div>\n+          </Card>\n+    </CustomThemeProviderSecond>\n+        \n+    <CustomThemeProviderSecond>\n+        <Card>\n+            <div className='flex items-center justify-start gap-4 mb-4 mt-3 bg-cyan-700 rounded-md p-3 '>\n+                <div>\n+                    <span className='font-semibold text-white'>PERIODE</span>\n+                </div>\n+                <Select\n+                    id=\"relatedMonths\"\n+                    options={MonthOptions()}\n+                    value={MonthOptions().find(option => option.value === selectedPeriod)}\n+                    onChange={handleMonthChange}\n+                    placeholder=\"Pilih bulan\"\n+                    className='bg-cyan-700 rounded w-full md:w-1/3'\n+                    styles={{\n+                      control: (baseStyles, state) => ({\n+                        ...baseStyles,\n+                        backgroundColor: '#0e7490',\n+                      }),\n+                      input: (styles) => ({ ...styles, color: '#fff' }),\n+                      placeholder: (styles) => ({ ...styles, color: '#fff' }),\n+                      singleValue: (styles, { data }) => ({ ...styles, color: '#fff' }),\n+                    }}\n+                />\n+            </div>\n+            <div className='flex gap-1 md:gap-4 justify-between flex-row mb-4'>\n+            \n+                <Card className='bg-green-700 text-white w-1/3'>\n+                <h3 className='font-bold text-sm md:text-xl flex flex-col lg:flex-row  items-start lg:items-center content-center'>\n+                  <span className='flex'>\n+                    <span><HiHome className=\"h-5 w-5  md:h-7 md:w-7 mr-1 lg:mr-2\" /></span>\n+                    <span>IPL</span>\n+                  </span>\n+                  <span className='text-xs lg:text-sm font-normal lg:ml-3'>{`${totalHousesPaid} / ${totalHouses} Rumah`}</span>\n+                  </h3>\n+                <span className='font-semibold text-sm md:text-lg'>{percentage}</span>\n+                </Card>\n+                <Card className='bg-green-500 text-white w-1/3'>\n+                <h3 className='font-bold text-sm md:text-xl flex items-start'><span><FaRegArrowAltCircleDown className=\"h-5 w-5  md:h-7 md:w-7 mr-2\" /></span><span>Masuk</span></h3>\n+                <span className='font-semibold text-xs md:text-lg'>{formatCurrency(totalIncomePeriod)}</span>\n+                </Card>\n+                <Card className='bg-red-500 text-white w-1/3'>\n+                <h3 className='font-bold text-sm md:text-xl flex items-start'><span><FaRegArrowAltCircleUp className=\"h-5 w-5  md:h-7 md:w-7 mr-2\" /></span><span>Keluar</span></h3>\n+                <span className='font-semibold text-xs md:text-lg'>{formatCurrency(totalExpensePeriod)}</span>\n+                </Card>\n+            \n+            </div>\n+            {/* <div>{`Last Update: ${moment(lastUpdate).format('DD MMM yyyy')}`}</div> */}\n+            <CustomThemeProviderSecond>\n+              <div className=\"overflow-x-auto\">\n+                  <Table>\n+                      <Table.Head className='' >\n+                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white w-2/3'>Keterangan</Table.HeadCell>\n+                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white'>Tanggal</Table.HeadCell>\n+                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white '>Nominal</Table.HeadCell>\n+                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white '></Table.HeadCell>\n+                      </Table.Head>\n+                      <Table.Body className=\"divide-y\">\n+                        {transactions && transactions.length > 0 && transactions[0] !== undefined ? (\n+                          <>\n+                            {Object.keys(groupedTransactions).map((transactionType, index) => (\n+                              <React.Fragment key={index}>\n+                                {groupedTransactions[transactionType].length > 0 && (\n+                                  <Table.Row \n+                                  className={`bg-white dark:border-gray-700 dark:bg-gray-800 `}\n+                                  onClick={() => handleExpandRow(index)}>\n+                                    <Table.Cell colSpan=\"2\" className={`${getTextColor(transactionType)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>\n+                                      {transactionType === 'ipl' ? `Pemasukan IPL` : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}\n+                                      </Table.Cell>\n+                                    <Table.Cell className={`${getTextColor(transactionType)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>{formatCurrency(groupedTransactions[transactionType].reduce((acc, curr) => acc + curr.amount, 0))}</Table.Cell>\n+                                  </Table.Row>\n+                                )}\n+\n+                                  {groupedTransactions[transactionType].map((transaction, subIndex) => (\n+                                    <Table.Row key={subIndex} className={`bg-white dark:border-gray-700 dark:bg-gray-800 transition duration-300 ease-in-out ${expandedRows === index? '': 'hidden'}`}>\n+                                      <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                        <span className='flex items-start'>\n+                                          <span>{getTypeIcon(transaction.transaction_type)} </span>\n+                                          <span className=\"ml-2\">{transaction.description}</span>\n+                                        </span>\n+                                      </Table.Cell>\n+                                      <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                        {moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}\n+                                      </Table.Cell>\n+                                      <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                        {formatCurrency(transaction.amount)}\n+                                      </Table.Cell>\n+                                    </Table.Row>\n+                                  ))}\n+                              \n+                                \n+                                \n+                              </React.Fragment>\n+                            ))}\n+                          </>\n+                        ) : (\n+                          <Table.Row>\n+                          <Table.Cell colSpan=\"3\" className=\"text-center\">Data tidak tersedia</Table.Cell>\n+                          </Table.Row>\n+                        ) }\n+                      \n+                        \n+                      {/* {transactions && transactions.length > 0 && transactions[0] !== undefined ? (\n+                          transactions.map((transaction, index) => (\n+                              <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n+                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                      <span className='flex items-start'>\n+                                      <span>{getTypeIcon(transaction.transaction_type)} </span>\n+                                      <span className=\"ml-2\">{transaction.description}</span>\n+                                      </span>\n+                                  </Table.Cell>\n+                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                      {moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}\n+                                  </Table.Cell>\n+                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                      {formatCurrency(transaction.amount)}\n+                                  </Table.Cell>\n+                              </Table.Row>\n+                          ))\n+                          ) : (\n+                          <Table.Row>\n+                              <Table.Cell colSpan=\"3\" className=\"text-center\">Data tidak tersedia</Table.Cell>\n+                          </Table.Row>\n+                      )} */}\n+\n+                      \n+                      \n+                      </Table.Body>\n+                  </Table>\n+                  \n+              </div>\n+            </CustomThemeProviderSecond>\n+            \n+        </Card>\n+    </CustomThemeProviderSecond>\n+    </>\n+  );\n+}\n+\n+export const getServerSideProps = async (context) => {\n+    const session = await getSession(context);\n+    \n+    // if (!session) {\n+    //     return {\n+    //         redirect: {\n+    //             destination: '/',\n+    //             permanent: false,\n+    //         },\n+    //     };\n+    // }\n+  \n+    try {\n+        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n+            // headers: {\n+            //     Authorization: `Bearer ${session.accessToken}`,\n+            // },\n+        });\n+        return {\n+            props: {\n+              initialTransaction: res.data.data,\n+            },\n+        };\n+    } catch (error) {\n+        console.error('Error fetching tra data:', error);\n+        return {\n+            props: {\n+              initialTransaction: [],\n+            },\n+        };\n+    }\n+  };\n+\n+export default Report;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722342961753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -331,9 +331,9 @@\n                                   </Table.Row>\n                                 )}\n \n                                   {groupedTransactions[transactionType].map((transaction, subIndex) => (\n-                                    <Table.Row key={subIndex} className={`bg-white dark:border-gray-700 dark:bg-gray-800 transition duration-300 ease-in-out ${expandedRows === index? '': 'hidden'}`}>\n+                                    <Table.Row key={subIndex} className={`bg-white dark:border-gray-700 dark:bg-gray-800 transition duration-300 ease-in-out ${expandedRows === index? 'h-auto': 'h-0'}`}>\n                                       <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n                                         <span className='flex items-start'>\n                                           <span>{getTypeIcon(transaction.transaction_type)} </span>\n                                           <span className=\"ml-2\">{transaction.description}</span>\n@@ -429,438 +429,5 @@\n         };\n     }\n   };\n \n-export default Report;\n-// pages/home.js\n-import React from 'react';\n-import {useSession ,getSession} from 'next-auth/react';\n-import { useEffect,useState } from 'react';\n-import _ from 'lodash';\n-import axios from 'axios';\n-import Spinner from './Spinner';\n-import CustomThemeProviderSecond from './CustomThemeSecond';\n-import { Card, Button, Table, Accordion } from 'flowbite-react';\n-import { GrMoney } from \"react-icons/gr\";\n-import {FaRegArrowAltCircleDown, FaRegArrowAltCircleUp } from 'react-icons/fa';\n-\n-import { HiHome } from \"react-icons/hi\";\n-\n-import Select from 'react-select';\n-import 'react-datepicker/dist/react-datepicker.css';\n-import moment from 'moment';\n-import 'moment/locale/id';\n-moment.locale('id');\n-import MonthOptions from './MonthOptions';\n-\n-const Report = ({ initialTransaction }) =>  {\n-  \n-  const [loading, setLoading] = useState(true);\n-  const { data: session, status } = useSession();\n-  const [transactions, setTransactions] = useState([initialTransaction]);\n-  const [reTransactions, setReTransactions] = useState([initialTransaction]);\n-  const [totalBalance, setTotalBalance] = useState(null);\n-  const [totalIncome, setTotalIncome] = useState(null);\n-  const [totalExpense, setTotalExpense] = useState(null);\n-  const [selectedPeriod, setSelectedPeriod] = useState(moment().format('YYYY-MM')); // Format YYYY-MM moment().format('YYYY-MM')\n-  const [monthlyBalances, setMonthlyBalances] = useState([]);\n-  const [totalIncomePeriod, setTotalIncomePeriod] = useState(0);\n-  const [totalExpensePeriod, setTotalExpensePeriod] = useState(0);\n-  const [totalHousesPaid, setTotalHousesPaid] = useState(0);\n-  const [totalHouses, setTotalHouses] = useState(0);\n-  const [lastUpdate, setLastUpdate] = useState();\n-  const [percentage, setPercentage] = useState(0);\n-  const [expandedRows, setExpandedRows] = useState(null);\n-\n-  \n-  const formatCurrency = (amount) => {\n-    return new Intl.NumberFormat('id-ID', {\n-        style: 'currency',\n-        currency: 'IDR',\n-        minimumFractionDigits: 0,\n-    }).format(amount);\n-  };\n-\n-  const fetchTransactions = async () => {\n-    try {\n-        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n-            params: {\n-              period: selectedPeriod\n-          }\n-        });\n-        //console.log(res.data)\n-        setTransactions(res.data.data);\n-        setReTransactions(res.data.data);\n-        setLastUpdate(res.data.lastUpdate);\n-        \n-        setLoading(false);\n-    } catch (error) {\n-        console.error('Error fetching houses data:', error);\n-        setLoading(false);\n-    }\n-  };\n-\n-  const fetchTotalBalance = async () => {\n-    try {\n-        const response = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/balance`, {\n-           \n-        });\n-       // console.log(response.data)\n-        setTotalBalance(response.data.totalBalance);\n-        setTotalIncome(response.data.totalIncome);\n-        setTotalExpense(response.data.totalExpense);\n-        setLoading(false);\n-    } catch (error) {\n-        console.error('Error fetching total balance:', error);\n-        setLoading(false);\n-    }\n-  };\n-\n-  const fetchMonthlyBalances = async () => {\n-    //console.log(selectedPeriod)\n-    try {\n-        const response = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/balance-monthly`, {\n-            params: {\n-                period: selectedPeriod\n-            }\n-        });\n-\n-        //console.log('Response data:', response.data);\n-\n-        if (Array.isArray(response.data) && response.data.length > 0) {\n-            // Gunakan data yang ada jika valid\n-            setMonthlyBalances(response.data);\n-            setTotalIncomePeriod(response.data[0].totalIncome || 0);\n-            setTotalExpensePeriod(response.data[0].totalExpense || 0);\n-        } else {\n-            // Tangani kasus jika data tidak sesuai\n-            setMonthlyBalances([]);\n-            setTotalIncomePeriod(0);\n-            setTotalExpensePeriod(0);\n-        }\n-       \n-    } catch (error) {\n-        console.error('Error fetching monthly balances:', error);\n-        setMonthlyBalances([]);\n-        setTotalIncomePeriod(0);\n-        setTotalExpensePeriod(0);\n-    }\n-  };\n-\n-  const fetchMonthlyPaid = async () => {\n-    try {\n-      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/houses/fee`, {\n-         \n-          params: {\n-            period: selectedPeriod\n-        }\n-      });\n-     // console.log(res.data)\n-      setTotalHousesPaid(res.data.total_houses_paid);\n-      setTotalHouses(res.data.total);\n-      setPercentage(res.data.percentage_paid);\n-    } catch (error) {\n-        console.error('Error fetching houses data:', error);\n-        setLoading(false);\n-    }\n-  };\n-\n-\n-  const [relatedMonths, setRelatedMonths] = useState({\n-    value: moment().format('YYYY-MM'),\n-    label: moment().format('MMMM YYYY')\n-  });\n-  \n-  const handleMonthChange = (selectedOption) => {\n-    setSelectedPeriod(selectedOption.value);\n-  };\n-\n-\n-  useEffect(() => {\n-    // Set nilai bulan saat ini saat komponen pertama kali dimuat\n-    const currentMonthOption = MonthOptions().find(\n-      (option) => option.value === moment().format('YYYY-MM')\n-    );\n-    setRelatedMonths(currentMonthOption);\n-  }, []);\n-\n-  useEffect(() => {\n-    fetchTransactions();\n-    fetchTotalBalance();\n-    fetchMonthlyPaid();\n-    fetchMonthlyBalances();\n-\n-  }, [selectedPeriod]);\n-  \n-\n-\n-  const getTypeIcon = (type) => {\n-    switch (type) {\n-      case 'income':\n-        return <FaRegArrowAltCircleDown  className=\"text-green-500 h-4 w-4 md:h-5 md:w-5 \" />;\n-      case 'expense':\n-        return <FaRegArrowAltCircleUp  className=\"text-red-500 h-4 w-4 md:h-5 md:w-5 \" />;\n-      case 'ipl':\n-        return <FaRegArrowAltCircleDown  className=\"text-green-700  h-4 w-4 md:h-5 md:w-5 \" />;\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const getTextColor = (type) => {\n-    switch (type) {\n-      case 'income':\n-        return \"text-green-500\";\n-      case 'expense':\n-        return \"text-red-500\";\n-      case 'ipl':\n-        return \"text-green-700\";\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const groupedTransactions = _.groupBy(transactions, 'transaction_type');\n-\n-   //console.log(groupedTransactions)\n-  // console.log()\n-\n-  const handleExpandRow = (index) => {\n-    let currentExpandedRows = null;\n-    const isRowExpanded = currentExpandedRows === index ? index : null;\n-    const newExpandedRows = isRowExpanded\n-      ? null\n-      : (currentExpandedRows = index);\n-    if (expandedRows !== index) {\n-      setExpandedRows(newExpandedRows);\n-    } else {\n-      setExpandedRows(null);\n-    }\n-  };\n-\n-\n-  if (loading) {\n-    return <Spinner />;\n-  }\n-\n-  return (\n-    <>\n-    <CustomThemeProviderSecond>\n-          <Card className='mb-5 shadow-none'>\n-            <div className='flex flex-col lg:flex-row justify-between gap-3'>\n-              <div className='flex flex-col border-cyan-700 gap-3 border-2 p-3 rounded-md lg:w-1/2'>\n-                <div className='flex items-center content-center gap-2  md:gap-3 '>\n-                  <span className='items-center content-center'>\n-                    <GrMoney className=\"h-7 w-7 lg:h-10 lg:w-10 text-cyan-700\" />\n-                  </span>\n-                  <div>\n-                    <h2 className='md:text-2xl text-xl font-bold text-cyan-700 '>{formatCurrency(totalBalance)}</h2>\n-                    \n-                  </div>\n-                </div>\n-                <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Saldo Akhir</h3>\n-                \n-              </div>\n-             <div className='flex lg:flex-row gap-2 lg:gap-4 justify-between lg:justify-start'>\n-                <div className='flex flex-col items-center content-center  gap-2  md:gap-3 p-2 lg:p-3 border-green-500 border-2 rounded-md'>\n-                    <div className='flex items-center content-center gap-2  md:gap-3 '>\n-                      <span className=''>\n-                        <FaRegArrowAltCircleDown className=\"h-7 w-7 lg:h-10 lg:w-10 text-green-500\" />\n-                      </span>\n-                      <div>\n-                        <h2 className='md:text-2xl text-md font-bold text-green-500 '>{formatCurrency(totalIncome)}</h2>\n-                        {/* <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pemasukan</h3> */}\n-                      </div>\n-                    </div>\n-                    <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pemasukan</h3>\n-                </div>\n-                <div className='flex flex-col items-center content-center gap-2  md:gap-3 border-2 border-red-500 p-2 lg:p-3 rounded-md'>\n-                  <div className='flex items-center content-center gap-2  md:gap-3 '>\n-                    <span className=''>\n-                      <FaRegArrowAltCircleUp className=\"h-7 w-7 lg:h-10 lg:w-10 text-red-500\" />\n-                    </span>\n-                    <div>\n-                      <h2 className='md:text-2xl text-md font-bold text-red-500 '>{formatCurrency(totalExpense)}</h2>\n-                      {/* <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pengaluaran</h3> */}\n-                    </div>\n-                  </div>\n-                  <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pengaluaran</h3> \n-                   \n-                </div>\n-\n-             </div>\n-            </div>\n-          </Card>\n-    </CustomThemeProviderSecond>\n-        \n-    <CustomThemeProviderSecond>\n-        <Card>\n-            <div className='flex items-center justify-start gap-4 mb-4 mt-3 bg-cyan-700 rounded-md p-3 '>\n-                <div>\n-                    <span className='font-semibold text-white'>PERIODE</span>\n-                </div>\n-                <Select\n-                    id=\"relatedMonths\"\n-                    options={MonthOptions()}\n-                    value={MonthOptions().find(option => option.value === selectedPeriod)}\n-                    onChange={handleMonthChange}\n-                    placeholder=\"Pilih bulan\"\n-                    className='bg-cyan-700 rounded w-full md:w-1/3'\n-                    styles={{\n-                      control: (baseStyles, state) => ({\n-                        ...baseStyles,\n-                        backgroundColor: '#0e7490',\n-                      }),\n-                      input: (styles) => ({ ...styles, color: '#fff' }),\n-                      placeholder: (styles) => ({ ...styles, color: '#fff' }),\n-                      singleValue: (styles, { data }) => ({ ...styles, color: '#fff' }),\n-                    }}\n-                />\n-            </div>\n-            <div className='flex gap-1 md:gap-4 justify-between flex-row mb-4'>\n-            \n-                <Card className='bg-green-700 text-white w-1/3'>\n-                <h3 className='font-bold text-sm md:text-xl flex flex-col lg:flex-row  items-start lg:items-center content-center'>\n-                  <span className='flex'>\n-                    <span><HiHome className=\"h-5 w-5  md:h-7 md:w-7 mr-1 lg:mr-2\" /></span>\n-                    <span>IPL</span>\n-                  </span>\n-                  <span className='text-xs lg:text-sm font-normal lg:ml-3'>{`${totalHousesPaid} / ${totalHouses} Rumah`}</span>\n-                  </h3>\n-                <span className='font-semibold text-sm md:text-lg'>{percentage}</span>\n-                </Card>\n-                <Card className='bg-green-500 text-white w-1/3'>\n-                <h3 className='font-bold text-sm md:text-xl flex items-start'><span><FaRegArrowAltCircleDown className=\"h-5 w-5  md:h-7 md:w-7 mr-2\" /></span><span>Masuk</span></h3>\n-                <span className='font-semibold text-xs md:text-lg'>{formatCurrency(totalIncomePeriod)}</span>\n-                </Card>\n-                <Card className='bg-red-500 text-white w-1/3'>\n-                <h3 className='font-bold text-sm md:text-xl flex items-start'><span><FaRegArrowAltCircleUp className=\"h-5 w-5  md:h-7 md:w-7 mr-2\" /></span><span>Keluar</span></h3>\n-                <span className='font-semibold text-xs md:text-lg'>{formatCurrency(totalExpensePeriod)}</span>\n-                </Card>\n-            \n-            </div>\n-            {/* <div>{`Last Update: ${moment(lastUpdate).format('DD MMM yyyy')}`}</div> */}\n-            <CustomThemeProviderSecond>\n-              <div className=\"overflow-x-auto\">\n-                  <Table>\n-                      <Table.Head className='' >\n-                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white w-2/3'>Keterangan</Table.HeadCell>\n-                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white'>Tanggal</Table.HeadCell>\n-                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white '>Nominal</Table.HeadCell>\n-                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white '></Table.HeadCell>\n-                      </Table.Head>\n-                      <Table.Body className=\"divide-y\">\n-                        {transactions && transactions.length > 0 && transactions[0] !== undefined ? (\n-                          <>\n-                            {Object.keys(groupedTransactions).map((transactionType, index) => (\n-                              <React.Fragment key={index}>\n-                                {groupedTransactions[transactionType].length > 0 && (\n-                                  <Table.Row \n-                                  className={`bg-white dark:border-gray-700 dark:bg-gray-800`}\n-                                  onClick={() => handleExpandRow(index)}>\n-                                    <Table.Cell colSpan=\"2\" className={`${getTextColor(transactionType)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>\n-                                      {transactionType === 'ipl' ? `Pemasukan IPL` : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}\n-                                      </Table.Cell>\n-                                    <Table.Cell className={`${getTextColor(transactionType)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>{formatCurrency(groupedTransactions[transactionType].reduce((acc, curr) => acc + curr.amount, 0))}</Table.Cell>\n-                                  </Table.Row>\n-                                )}\n-\n-                                  {groupedTransactions[transactionType].map((transaction, subIndex) => (\n-                                    <Table.Row key={subIndex} className={`bg-white dark:border-gray-700 dark:bg-gray-800 transition duration-300 ${expandedRows === index? '': 'hidden'}`}>\n-                                      <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                        <span className='flex items-start'>\n-                                          <span>{getTypeIcon(transaction.transaction_type)} </span>\n-                                          <span className=\"ml-2\">{transaction.description}</span>\n-                                        </span>\n-                                      </Table.Cell>\n-                                      <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                        {moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}\n-                                      </Table.Cell>\n-                                      <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                        {formatCurrency(transaction.amount)}\n-                                      </Table.Cell>\n-                                    </Table.Row>\n-                                  ))}\n-                              \n-                                \n-                                \n-                              </React.Fragment>\n-                            ))}\n-                          </>\n-                        ) : (\n-                          <Table.Row>\n-                          <Table.Cell colSpan=\"3\" className=\"text-center\">Data tidak tersedia</Table.Cell>\n-                          </Table.Row>\n-                        ) }\n-                      \n-                        \n-                      {/* {transactions && transactions.length > 0 && transactions[0] !== undefined ? (\n-                          transactions.map((transaction, index) => (\n-                              <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                      <span className='flex items-start'>\n-                                      <span>{getTypeIcon(transaction.transaction_type)} </span>\n-                                      <span className=\"ml-2\">{transaction.description}</span>\n-                                      </span>\n-                                  </Table.Cell>\n-                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                      {moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}\n-                                  </Table.Cell>\n-                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                      {formatCurrency(transaction.amount)}\n-                                  </Table.Cell>\n-                              </Table.Row>\n-                          ))\n-                          ) : (\n-                          <Table.Row>\n-                              <Table.Cell colSpan=\"3\" className=\"text-center\">Data tidak tersedia</Table.Cell>\n-                          </Table.Row>\n-                      )} */}\n-\n-                      \n-                      \n-                      </Table.Body>\n-                  </Table>\n-                  \n-              </div>\n-            </CustomThemeProviderSecond>\n-            \n-        </Card>\n-    </CustomThemeProviderSecond>\n-    </>\n-  );\n-}\n-\n-export const getServerSideProps = async (context) => {\n-    const session = await getSession(context);\n-    \n-    // if (!session) {\n-    //     return {\n-    //         redirect: {\n-    //             destination: '/',\n-    //             permanent: false,\n-    //         },\n-    //     };\n-    // }\n-  \n-    try {\n-        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n-            // headers: {\n-            //     Authorization: `Bearer ${session.accessToken}`,\n-            // },\n-        });\n-        return {\n-            props: {\n-              initialTransaction: res.data.data,\n-            },\n-        };\n-    } catch (error) {\n-        console.error('Error fetching tra data:', error);\n-        return {\n-            props: {\n-              initialTransaction: [],\n-            },\n-        };\n-    }\n-  };\n-\n export default Report;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722342984819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -331,9 +331,9 @@\n                                   </Table.Row>\n                                 )}\n \n                                   {groupedTransactions[transactionType].map((transaction, subIndex) => (\n-                                    <Table.Row key={subIndex} className={`bg-white dark:border-gray-700 dark:bg-gray-800 transition duration-300 ease-in-out ${expandedRows === index? 'h-auto': 'h-0'}`}>\n+                                    <Table.Row key={subIndex} className={`bg-white dark:border-gray-700 dark:bg-gray-800 transition duration-300 ease-in-out ${expandedRows === index? 'h-auto': 'h-0 hidden'}`}>\n                                       <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n                                         <span className='flex items-start'>\n                                           <span>{getTypeIcon(transaction.transaction_type)} </span>\n                                           <span className=\"ml-2\">{transaction.description}</span>\n"
                },
                {
                    "date": 1722343095534,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,433 @@\n+// pages/home.js\n+import React from 'react';\n+import {useSession ,getSession} from 'next-auth/react';\n+import { useEffect,useState } from 'react';\n+import _ from 'lodash';\n+import axios from 'axios';\n+import Spinner from './Spinner';\n+import CustomThemeProviderSecond from './CustomThemeSecond';\n+import { Card, Button, Table, Accordion } from 'flowbite-react';\n+import { GrMoney } from \"react-icons/gr\";\n+import {FaRegArrowAltCircleDown, FaRegArrowAltCircleUp } from 'react-icons/fa';\n+\n+import { HiHome } from \"react-icons/hi\";\n+\n+import Select from 'react-select';\n+import 'react-datepicker/dist/react-datepicker.css';\n+import moment from 'moment';\n+import 'moment/locale/id';\n+moment.locale('id');\n+import MonthOptions from './MonthOptions';\n+\n+const Report = ({ initialTransaction }) =>  {\n+  \n+  const [loading, setLoading] = useState(true);\n+  const { data: session, status } = useSession();\n+  const [transactions, setTransactions] = useState([initialTransaction]);\n+  const [reTransactions, setReTransactions] = useState([initialTransaction]);\n+  const [totalBalance, setTotalBalance] = useState(null);\n+  const [totalIncome, setTotalIncome] = useState(null);\n+  const [totalExpense, setTotalExpense] = useState(null);\n+  const [selectedPeriod, setSelectedPeriod] = useState(moment().format('YYYY-MM')); // Format YYYY-MM moment().format('YYYY-MM')\n+  const [monthlyBalances, setMonthlyBalances] = useState([]);\n+  const [totalIncomePeriod, setTotalIncomePeriod] = useState(0);\n+  const [totalExpensePeriod, setTotalExpensePeriod] = useState(0);\n+  const [totalHousesPaid, setTotalHousesPaid] = useState(0);\n+  const [totalHouses, setTotalHouses] = useState(0);\n+  const [lastUpdate, setLastUpdate] = useState();\n+  const [percentage, setPercentage] = useState(0);\n+  const [expandedRows, setExpandedRows] = useState(null);\n+\n+  \n+  const formatCurrency = (amount) => {\n+    return new Intl.NumberFormat('id-ID', {\n+        style: 'currency',\n+        currency: 'IDR',\n+        minimumFractionDigits: 0,\n+    }).format(amount);\n+  };\n+\n+  const fetchTransactions = async () => {\n+    try {\n+        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n+            params: {\n+              period: selectedPeriod\n+          }\n+        });\n+        //console.log(res.data)\n+        setTransactions(res.data.data);\n+        setReTransactions(res.data.data);\n+        setLastUpdate(res.data.lastUpdate);\n+        \n+        setLoading(false);\n+    } catch (error) {\n+        console.error('Error fetching houses data:', error);\n+        setLoading(false);\n+    }\n+  };\n+\n+  const fetchTotalBalance = async () => {\n+    try {\n+        const response = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/balance`, {\n+           \n+        });\n+       // console.log(response.data)\n+        setTotalBalance(response.data.totalBalance);\n+        setTotalIncome(response.data.totalIncome);\n+        setTotalExpense(response.data.totalExpense);\n+        setLoading(false);\n+    } catch (error) {\n+        console.error('Error fetching total balance:', error);\n+        setLoading(false);\n+    }\n+  };\n+\n+  const fetchMonthlyBalances = async () => {\n+    //console.log(selectedPeriod)\n+    try {\n+        const response = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/balance-monthly`, {\n+            params: {\n+                period: selectedPeriod\n+            }\n+        });\n+\n+        //console.log('Response data:', response.data);\n+\n+        if (Array.isArray(response.data) && response.data.length > 0) {\n+            // Gunakan data yang ada jika valid\n+            setMonthlyBalances(response.data);\n+            setTotalIncomePeriod(response.data[0].totalIncome || 0);\n+            setTotalExpensePeriod(response.data[0].totalExpense || 0);\n+        } else {\n+            // Tangani kasus jika data tidak sesuai\n+            setMonthlyBalances([]);\n+            setTotalIncomePeriod(0);\n+            setTotalExpensePeriod(0);\n+        }\n+       \n+    } catch (error) {\n+        console.error('Error fetching monthly balances:', error);\n+        setMonthlyBalances([]);\n+        setTotalIncomePeriod(0);\n+        setTotalExpensePeriod(0);\n+    }\n+  };\n+\n+  const fetchMonthlyPaid = async () => {\n+    try {\n+      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/houses/fee`, {\n+         \n+          params: {\n+            period: selectedPeriod\n+        }\n+      });\n+     // console.log(res.data)\n+      setTotalHousesPaid(res.data.total_houses_paid);\n+      setTotalHouses(res.data.total);\n+      setPercentage(res.data.percentage_paid);\n+    } catch (error) {\n+        console.error('Error fetching houses data:', error);\n+        setLoading(false);\n+    }\n+  };\n+\n+\n+  const [relatedMonths, setRelatedMonths] = useState({\n+    value: moment().format('YYYY-MM'),\n+    label: moment().format('MMMM YYYY')\n+  });\n+  \n+  const handleMonthChange = (selectedOption) => {\n+    setSelectedPeriod(selectedOption.value);\n+  };\n+\n+\n+  useEffect(() => {\n+    // Set nilai bulan saat ini saat komponen pertama kali dimuat\n+    const currentMonthOption = MonthOptions().find(\n+      (option) => option.value === moment().format('YYYY-MM')\n+    );\n+    setRelatedMonths(currentMonthOption);\n+  }, []);\n+\n+  useEffect(() => {\n+    fetchTransactions();\n+    fetchTotalBalance();\n+    fetchMonthlyPaid();\n+    fetchMonthlyBalances();\n+\n+  }, [selectedPeriod]);\n+  \n+\n+\n+  const getTypeIcon = (type) => {\n+    switch (type) {\n+      case 'income':\n+        return <FaRegArrowAltCircleDown  className=\"text-green-500 h-4 w-4 md:h-5 md:w-5 \" />;\n+      case 'expense':\n+        return <FaRegArrowAltCircleUp  className=\"text-red-500 h-4 w-4 md:h-5 md:w-5 \" />;\n+      case 'ipl':\n+        return <FaRegArrowAltCircleDown  className=\"text-green-700  h-4 w-4 md:h-5 md:w-5 \" />;\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const getTextColor = (type) => {\n+    switch (type) {\n+      case 'income':\n+        return \"text-green-500\";\n+      case 'expense':\n+        return \"text-red-500\";\n+      case 'ipl':\n+        return \"text-green-700\";\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const groupedTransactions = _.groupBy(transactions, 'transaction_type');\n+\n+   //console.log(groupedTransactions)\n+  // console.log()\n+\n+  const handleExpandRow = (index) => {\n+    let currentExpandedRows = null;\n+    const isRowExpanded = currentExpandedRows === index ? index : null;\n+    const newExpandedRows = isRowExpanded\n+      ? null\n+      : (currentExpandedRows = index);\n+    if (expandedRows !== index) {\n+      setExpandedRows(newExpandedRows);\n+    } else {\n+      setExpandedRows(null);\n+    }\n+  };\n+\n+\n+  if (loading) {\n+    return <Spinner />;\n+  }\n+\n+  return (\n+    <>\n+    <CustomThemeProviderSecond>\n+          <Card className='mb-5 shadow-none'>\n+            <div className='flex flex-col lg:flex-row justify-between gap-3'>\n+              <div className='flex flex-col border-cyan-700 gap-3 border-2 p-3 rounded-md lg:w-1/2'>\n+                <div className='flex items-center content-center gap-2  md:gap-3 '>\n+                  <span className='items-center content-center'>\n+                    <GrMoney className=\"h-7 w-7 lg:h-10 lg:w-10 text-cyan-700\" />\n+                  </span>\n+                  <div>\n+                    <h2 className='md:text-2xl text-xl font-bold text-cyan-700 '>{formatCurrency(totalBalance)}</h2>\n+                    \n+                  </div>\n+                </div>\n+                <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Saldo Akhir</h3>\n+                \n+              </div>\n+             <div className='flex lg:flex-row gap-2 lg:gap-4 justify-between lg:justify-start'>\n+                <div className='flex flex-col items-center content-center  gap-2  md:gap-3 p-2 lg:p-3 border-green-500 border-2 rounded-md'>\n+                    <div className='flex items-center content-center gap-2  md:gap-3 '>\n+                      <span className=''>\n+                        <FaRegArrowAltCircleDown className=\"h-7 w-7 lg:h-10 lg:w-10 text-green-500\" />\n+                      </span>\n+                      <div>\n+                        <h2 className='md:text-2xl text-md font-bold text-green-500 '>{formatCurrency(totalIncome)}</h2>\n+                        {/* <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pemasukan</h3> */}\n+                      </div>\n+                    </div>\n+                    <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pemasukan</h3>\n+                </div>\n+                <div className='flex flex-col items-center content-center gap-2  md:gap-3 border-2 border-red-500 p-2 lg:p-3 rounded-md'>\n+                  <div className='flex items-center content-center gap-2  md:gap-3 '>\n+                    <span className=''>\n+                      <FaRegArrowAltCircleUp className=\"h-7 w-7 lg:h-10 lg:w-10 text-red-500\" />\n+                    </span>\n+                    <div>\n+                      <h2 className='md:text-2xl text-md font-bold text-red-500 '>{formatCurrency(totalExpense)}</h2>\n+                      {/* <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pengaluaran</h3> */}\n+                    </div>\n+                  </div>\n+                  <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pengaluaran</h3> \n+                   \n+                </div>\n+\n+             </div>\n+            </div>\n+          </Card>\n+    </CustomThemeProviderSecond>\n+        \n+    <CustomThemeProviderSecond>\n+        <Card>\n+            <div className='flex items-center justify-start gap-4 mb-4 mt-3 bg-cyan-700 rounded-md p-3 '>\n+                <div>\n+                    <span className='font-semibold text-white'>PERIODE</span>\n+                </div>\n+                <Select\n+                    id=\"relatedMonths\"\n+                    options={MonthOptions()}\n+                    value={MonthOptions().find(option => option.value === selectedPeriod)}\n+                    onChange={handleMonthChange}\n+                    placeholder=\"Pilih bulan\"\n+                    className='bg-cyan-700 rounded w-full md:w-1/3'\n+                    styles={{\n+                      control: (baseStyles, state) => ({\n+                        ...baseStyles,\n+                        backgroundColor: '#0e7490',\n+                      }),\n+                      input: (styles) => ({ ...styles, color: '#fff' }),\n+                      placeholder: (styles) => ({ ...styles, color: '#fff' }),\n+                      singleValue: (styles, { data }) => ({ ...styles, color: '#fff' }),\n+                    }}\n+                />\n+            </div>\n+            <div className='flex gap-1 md:gap-4 justify-between flex-row mb-4'>\n+            \n+                <Card className='bg-green-700 text-white w-1/3'>\n+                <h3 className='font-bold text-sm md:text-xl flex flex-col lg:flex-row  items-start lg:items-center content-center'>\n+                  <span className='flex'>\n+                    <span><HiHome className=\"h-5 w-5  md:h-7 md:w-7 mr-1 lg:mr-2\" /></span>\n+                    <span>IPL</span>\n+                  </span>\n+                  <span className='text-xs lg:text-sm font-normal lg:ml-3'>{`${totalHousesPaid} / ${totalHouses} Rumah`}</span>\n+                  </h3>\n+                <span className='font-semibold text-sm md:text-lg'>{percentage}</span>\n+                </Card>\n+                <Card className='bg-green-500 text-white w-1/3'>\n+                <h3 className='font-bold text-sm md:text-xl flex items-start'><span><FaRegArrowAltCircleDown className=\"h-5 w-5  md:h-7 md:w-7 mr-2\" /></span><span>Masuk</span></h3>\n+                <span className='font-semibold text-xs md:text-lg'>{formatCurrency(totalIncomePeriod)}</span>\n+                </Card>\n+                <Card className='bg-red-500 text-white w-1/3'>\n+                <h3 className='font-bold text-sm md:text-xl flex items-start'><span><FaRegArrowAltCircleUp className=\"h-5 w-5  md:h-7 md:w-7 mr-2\" /></span><span>Keluar</span></h3>\n+                <span className='font-semibold text-xs md:text-lg'>{formatCurrency(totalExpensePeriod)}</span>\n+                </Card>\n+            \n+            </div>\n+            {/* <div>{`Last Update: ${moment(lastUpdate).format('DD MMM yyyy')}`}</div> */}\n+            <CustomThemeProviderSecond>\n+              <div className=\"overflow-x-auto\">\n+                  <Table>\n+                      <Table.Head className='' >\n+                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white w-2/3'>Keterangan</Table.HeadCell>\n+                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white'>Tanggal</Table.HeadCell>\n+                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white '>Nominal</Table.HeadCell>\n+                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white '></Table.HeadCell>\n+                      </Table.Head>\n+                      <Table.Body className=\"divide-y\">\n+                        {transactions && transactions.length > 0 && transactions[0] !== undefined ? (\n+                          <>\n+                            {Object.keys(groupedTransactions).map((transactionType, index) => (\n+                              <React.Fragment key={index}>\n+                                {groupedTransactions[transactionType].length > 0 && (\n+                                  <Table.Row \n+                                  className={`bg-white dark:border-gray-700 dark:bg-gray-800 cursor-pointer`}\n+                                  onClick={() => handleExpandRow(index)}>\n+                                    <Table.Cell colSpan=\"2\" className={`${getTextColor(transactionType)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>\n+                                      {transactionType === 'ipl' ? `Pemasukan IPL` : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}\n+                                      </Table.Cell>\n+                                    <Table.Cell className={`${getTextColor(transactionType)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>{formatCurrency(groupedTransactions[transactionType].reduce((acc, curr) => acc + curr.amount, 0))}</Table.Cell>\n+                                  </Table.Row>\n+                                )}\n+\n+                                  {groupedTransactions[transactionType].map((transaction, subIndex) => (\n+                                    <Table.Row key={subIndex} className={`bg-white dark:border-gray-700 dark:bg-gray-800 transition duration-300 ease-in-out ${expandedRows === index? '': 'hidden'}`}>\n+                                      <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                        <span className='flex items-start'>\n+                                          <span>{getTypeIcon(transaction.transaction_type)} </span>\n+                                          <span className=\"ml-2\">{transaction.description}</span>\n+                                        </span>\n+                                      </Table.Cell>\n+                                      <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                        {moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}\n+                                      </Table.Cell>\n+                                      <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                        {formatCurrency(transaction.amount)}\n+                                      </Table.Cell>\n+                                    </Table.Row>\n+                                  ))}\n+                              \n+                                \n+                                \n+                              </React.Fragment>\n+                            ))}\n+                          </>\n+                        ) : (\n+                          <Table.Row>\n+                          <Table.Cell colSpan=\"3\" className=\"text-center\">Data tidak tersedia</Table.Cell>\n+                          </Table.Row>\n+                        ) }\n+                      \n+                        \n+                      {/* {transactions && transactions.length > 0 && transactions[0] !== undefined ? (\n+                          transactions.map((transaction, index) => (\n+                              <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n+                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                      <span className='flex items-start'>\n+                                      <span>{getTypeIcon(transaction.transaction_type)} </span>\n+                                      <span className=\"ml-2\">{transaction.description}</span>\n+                                      </span>\n+                                  </Table.Cell>\n+                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                      {moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}\n+                                  </Table.Cell>\n+                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                      {formatCurrency(transaction.amount)}\n+                                  </Table.Cell>\n+                              </Table.Row>\n+                          ))\n+                          ) : (\n+                          <Table.Row>\n+                              <Table.Cell colSpan=\"3\" className=\"text-center\">Data tidak tersedia</Table.Cell>\n+                          </Table.Row>\n+                      )} */}\n+\n+                      \n+                      \n+                      </Table.Body>\n+                  </Table>\n+                  \n+              </div>\n+            </CustomThemeProviderSecond>\n+            \n+        </Card>\n+    </CustomThemeProviderSecond>\n+    </>\n+  );\n+}\n+\n+export const getServerSideProps = async (context) => {\n+    const session = await getSession(context);\n+    \n+    // if (!session) {\n+    //     return {\n+    //         redirect: {\n+    //             destination: '/',\n+    //             permanent: false,\n+    //         },\n+    //     };\n+    // }\n+  \n+    try {\n+        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n+            // headers: {\n+            //     Authorization: `Bearer ${session.accessToken}`,\n+            // },\n+        });\n+        return {\n+            props: {\n+              initialTransaction: res.data.data,\n+            },\n+        };\n+    } catch (error) {\n+        console.error('Error fetching tra data:', error);\n+        return {\n+            props: {\n+              initialTransaction: [],\n+            },\n+        };\n+    }\n+  };\n+\n+export default Report;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722343129028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -331,9 +331,9 @@\n                                   </Table.Row>\n                                 )}\n \n                                   {groupedTransactions[transactionType].map((transaction, subIndex) => (\n-                                    <Table.Row key={subIndex} className={`bg-white dark:border-gray-700 dark:bg-gray-800 transition duration-300 ease-in-out ${expandedRows === index? '': 'hidden'}`}>\n+                                    <Table.Row key={subIndex} className={`bg-white dark:border-gray-700 dark:bg-gray-800 transition-all duration-500 ease-in-out overflow-hidden ${expandedRows === index? '': 'hidden'}`}>\n                                       <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n                                         <span className='flex items-start'>\n                                           <span>{getTypeIcon(transaction.transaction_type)} </span>\n                                           <span className=\"ml-2\">{transaction.description}</span>\n@@ -429,438 +429,5 @@\n         };\n     }\n   };\n \n-export default Report;\n-// pages/home.js\n-import React from 'react';\n-import {useSession ,getSession} from 'next-auth/react';\n-import { useEffect,useState } from 'react';\n-import _ from 'lodash';\n-import axios from 'axios';\n-import Spinner from './Spinner';\n-import CustomThemeProviderSecond from './CustomThemeSecond';\n-import { Card, Button, Table, Accordion } from 'flowbite-react';\n-import { GrMoney } from \"react-icons/gr\";\n-import {FaRegArrowAltCircleDown, FaRegArrowAltCircleUp } from 'react-icons/fa';\n-\n-import { HiHome } from \"react-icons/hi\";\n-\n-import Select from 'react-select';\n-import 'react-datepicker/dist/react-datepicker.css';\n-import moment from 'moment';\n-import 'moment/locale/id';\n-moment.locale('id');\n-import MonthOptions from './MonthOptions';\n-\n-const Report = ({ initialTransaction }) =>  {\n-  \n-  const [loading, setLoading] = useState(true);\n-  const { data: session, status } = useSession();\n-  const [transactions, setTransactions] = useState([initialTransaction]);\n-  const [reTransactions, setReTransactions] = useState([initialTransaction]);\n-  const [totalBalance, setTotalBalance] = useState(null);\n-  const [totalIncome, setTotalIncome] = useState(null);\n-  const [totalExpense, setTotalExpense] = useState(null);\n-  const [selectedPeriod, setSelectedPeriod] = useState(moment().format('YYYY-MM')); // Format YYYY-MM moment().format('YYYY-MM')\n-  const [monthlyBalances, setMonthlyBalances] = useState([]);\n-  const [totalIncomePeriod, setTotalIncomePeriod] = useState(0);\n-  const [totalExpensePeriod, setTotalExpensePeriod] = useState(0);\n-  const [totalHousesPaid, setTotalHousesPaid] = useState(0);\n-  const [totalHouses, setTotalHouses] = useState(0);\n-  const [lastUpdate, setLastUpdate] = useState();\n-  const [percentage, setPercentage] = useState(0);\n-  const [expandedRows, setExpandedRows] = useState(null);\n-\n-  \n-  const formatCurrency = (amount) => {\n-    return new Intl.NumberFormat('id-ID', {\n-        style: 'currency',\n-        currency: 'IDR',\n-        minimumFractionDigits: 0,\n-    }).format(amount);\n-  };\n-\n-  const fetchTransactions = async () => {\n-    try {\n-        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n-            params: {\n-              period: selectedPeriod\n-          }\n-        });\n-        //console.log(res.data)\n-        setTransactions(res.data.data);\n-        setReTransactions(res.data.data);\n-        setLastUpdate(res.data.lastUpdate);\n-        \n-        setLoading(false);\n-    } catch (error) {\n-        console.error('Error fetching houses data:', error);\n-        setLoading(false);\n-    }\n-  };\n-\n-  const fetchTotalBalance = async () => {\n-    try {\n-        const response = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/balance`, {\n-           \n-        });\n-       // console.log(response.data)\n-        setTotalBalance(response.data.totalBalance);\n-        setTotalIncome(response.data.totalIncome);\n-        setTotalExpense(response.data.totalExpense);\n-        setLoading(false);\n-    } catch (error) {\n-        console.error('Error fetching total balance:', error);\n-        setLoading(false);\n-    }\n-  };\n-\n-  const fetchMonthlyBalances = async () => {\n-    //console.log(selectedPeriod)\n-    try {\n-        const response = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/balance-monthly`, {\n-            params: {\n-                period: selectedPeriod\n-            }\n-        });\n-\n-        //console.log('Response data:', response.data);\n-\n-        if (Array.isArray(response.data) && response.data.length > 0) {\n-            // Gunakan data yang ada jika valid\n-            setMonthlyBalances(response.data);\n-            setTotalIncomePeriod(response.data[0].totalIncome || 0);\n-            setTotalExpensePeriod(response.data[0].totalExpense || 0);\n-        } else {\n-            // Tangani kasus jika data tidak sesuai\n-            setMonthlyBalances([]);\n-            setTotalIncomePeriod(0);\n-            setTotalExpensePeriod(0);\n-        }\n-       \n-    } catch (error) {\n-        console.error('Error fetching monthly balances:', error);\n-        setMonthlyBalances([]);\n-        setTotalIncomePeriod(0);\n-        setTotalExpensePeriod(0);\n-    }\n-  };\n-\n-  const fetchMonthlyPaid = async () => {\n-    try {\n-      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/houses/fee`, {\n-         \n-          params: {\n-            period: selectedPeriod\n-        }\n-      });\n-     // console.log(res.data)\n-      setTotalHousesPaid(res.data.total_houses_paid);\n-      setTotalHouses(res.data.total);\n-      setPercentage(res.data.percentage_paid);\n-    } catch (error) {\n-        console.error('Error fetching houses data:', error);\n-        setLoading(false);\n-    }\n-  };\n-\n-\n-  const [relatedMonths, setRelatedMonths] = useState({\n-    value: moment().format('YYYY-MM'),\n-    label: moment().format('MMMM YYYY')\n-  });\n-  \n-  const handleMonthChange = (selectedOption) => {\n-    setSelectedPeriod(selectedOption.value);\n-  };\n-\n-\n-  useEffect(() => {\n-    // Set nilai bulan saat ini saat komponen pertama kali dimuat\n-    const currentMonthOption = MonthOptions().find(\n-      (option) => option.value === moment().format('YYYY-MM')\n-    );\n-    setRelatedMonths(currentMonthOption);\n-  }, []);\n-\n-  useEffect(() => {\n-    fetchTransactions();\n-    fetchTotalBalance();\n-    fetchMonthlyPaid();\n-    fetchMonthlyBalances();\n-\n-  }, [selectedPeriod]);\n-  \n-\n-\n-  const getTypeIcon = (type) => {\n-    switch (type) {\n-      case 'income':\n-        return <FaRegArrowAltCircleDown  className=\"text-green-500 h-4 w-4 md:h-5 md:w-5 \" />;\n-      case 'expense':\n-        return <FaRegArrowAltCircleUp  className=\"text-red-500 h-4 w-4 md:h-5 md:w-5 \" />;\n-      case 'ipl':\n-        return <FaRegArrowAltCircleDown  className=\"text-green-700  h-4 w-4 md:h-5 md:w-5 \" />;\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const getTextColor = (type) => {\n-    switch (type) {\n-      case 'income':\n-        return \"text-green-500\";\n-      case 'expense':\n-        return \"text-red-500\";\n-      case 'ipl':\n-        return \"text-green-700\";\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const groupedTransactions = _.groupBy(transactions, 'transaction_type');\n-\n-   //console.log(groupedTransactions)\n-  // console.log()\n-\n-  const handleExpandRow = (index) => {\n-    let currentExpandedRows = null;\n-    const isRowExpanded = currentExpandedRows === index ? index : null;\n-    const newExpandedRows = isRowExpanded\n-      ? null\n-      : (currentExpandedRows = index);\n-    if (expandedRows !== index) {\n-      setExpandedRows(newExpandedRows);\n-    } else {\n-      setExpandedRows(null);\n-    }\n-  };\n-\n-\n-  if (loading) {\n-    return <Spinner />;\n-  }\n-\n-  return (\n-    <>\n-    <CustomThemeProviderSecond>\n-          <Card className='mb-5 shadow-none'>\n-            <div className='flex flex-col lg:flex-row justify-between gap-3'>\n-              <div className='flex flex-col border-cyan-700 gap-3 border-2 p-3 rounded-md lg:w-1/2'>\n-                <div className='flex items-center content-center gap-2  md:gap-3 '>\n-                  <span className='items-center content-center'>\n-                    <GrMoney className=\"h-7 w-7 lg:h-10 lg:w-10 text-cyan-700\" />\n-                  </span>\n-                  <div>\n-                    <h2 className='md:text-2xl text-xl font-bold text-cyan-700 '>{formatCurrency(totalBalance)}</h2>\n-                    \n-                  </div>\n-                </div>\n-                <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Saldo Akhir</h3>\n-                \n-              </div>\n-             <div className='flex lg:flex-row gap-2 lg:gap-4 justify-between lg:justify-start'>\n-                <div className='flex flex-col items-center content-center  gap-2  md:gap-3 p-2 lg:p-3 border-green-500 border-2 rounded-md'>\n-                    <div className='flex items-center content-center gap-2  md:gap-3 '>\n-                      <span className=''>\n-                        <FaRegArrowAltCircleDown className=\"h-7 w-7 lg:h-10 lg:w-10 text-green-500\" />\n-                      </span>\n-                      <div>\n-                        <h2 className='md:text-2xl text-md font-bold text-green-500 '>{formatCurrency(totalIncome)}</h2>\n-                        {/* <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pemasukan</h3> */}\n-                      </div>\n-                    </div>\n-                    <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pemasukan</h3>\n-                </div>\n-                <div className='flex flex-col items-center content-center gap-2  md:gap-3 border-2 border-red-500 p-2 lg:p-3 rounded-md'>\n-                  <div className='flex items-center content-center gap-2  md:gap-3 '>\n-                    <span className=''>\n-                      <FaRegArrowAltCircleUp className=\"h-7 w-7 lg:h-10 lg:w-10 text-red-500\" />\n-                    </span>\n-                    <div>\n-                      <h2 className='md:text-2xl text-md font-bold text-red-500 '>{formatCurrency(totalExpense)}</h2>\n-                      {/* <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pengaluaran</h3> */}\n-                    </div>\n-                  </div>\n-                  <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pengaluaran</h3> \n-                   \n-                </div>\n-\n-             </div>\n-            </div>\n-          </Card>\n-    </CustomThemeProviderSecond>\n-        \n-    <CustomThemeProviderSecond>\n-        <Card>\n-            <div className='flex items-center justify-start gap-4 mb-4 mt-3 bg-cyan-700 rounded-md p-3 '>\n-                <div>\n-                    <span className='font-semibold text-white'>PERIODE</span>\n-                </div>\n-                <Select\n-                    id=\"relatedMonths\"\n-                    options={MonthOptions()}\n-                    value={MonthOptions().find(option => option.value === selectedPeriod)}\n-                    onChange={handleMonthChange}\n-                    placeholder=\"Pilih bulan\"\n-                    className='bg-cyan-700 rounded w-full md:w-1/3'\n-                    styles={{\n-                      control: (baseStyles, state) => ({\n-                        ...baseStyles,\n-                        backgroundColor: '#0e7490',\n-                      }),\n-                      input: (styles) => ({ ...styles, color: '#fff' }),\n-                      placeholder: (styles) => ({ ...styles, color: '#fff' }),\n-                      singleValue: (styles, { data }) => ({ ...styles, color: '#fff' }),\n-                    }}\n-                />\n-            </div>\n-            <div className='flex gap-1 md:gap-4 justify-between flex-row mb-4'>\n-            \n-                <Card className='bg-green-700 text-white w-1/3'>\n-                <h3 className='font-bold text-sm md:text-xl flex flex-col lg:flex-row  items-start lg:items-center content-center'>\n-                  <span className='flex'>\n-                    <span><HiHome className=\"h-5 w-5  md:h-7 md:w-7 mr-1 lg:mr-2\" /></span>\n-                    <span>IPL</span>\n-                  </span>\n-                  <span className='text-xs lg:text-sm font-normal lg:ml-3'>{`${totalHousesPaid} / ${totalHouses} Rumah`}</span>\n-                  </h3>\n-                <span className='font-semibold text-sm md:text-lg'>{percentage}</span>\n-                </Card>\n-                <Card className='bg-green-500 text-white w-1/3'>\n-                <h3 className='font-bold text-sm md:text-xl flex items-start'><span><FaRegArrowAltCircleDown className=\"h-5 w-5  md:h-7 md:w-7 mr-2\" /></span><span>Masuk</span></h3>\n-                <span className='font-semibold text-xs md:text-lg'>{formatCurrency(totalIncomePeriod)}</span>\n-                </Card>\n-                <Card className='bg-red-500 text-white w-1/3'>\n-                <h3 className='font-bold text-sm md:text-xl flex items-start'><span><FaRegArrowAltCircleUp className=\"h-5 w-5  md:h-7 md:w-7 mr-2\" /></span><span>Keluar</span></h3>\n-                <span className='font-semibold text-xs md:text-lg'>{formatCurrency(totalExpensePeriod)}</span>\n-                </Card>\n-            \n-            </div>\n-            {/* <div>{`Last Update: ${moment(lastUpdate).format('DD MMM yyyy')}`}</div> */}\n-            <CustomThemeProviderSecond>\n-              <div className=\"overflow-x-auto\">\n-                  <Table>\n-                      <Table.Head className='' >\n-                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white w-2/3'>Keterangan</Table.HeadCell>\n-                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white'>Tanggal</Table.HeadCell>\n-                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white '>Nominal</Table.HeadCell>\n-                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white '></Table.HeadCell>\n-                      </Table.Head>\n-                      <Table.Body className=\"divide-y\">\n-                        {transactions && transactions.length > 0 && transactions[0] !== undefined ? (\n-                          <>\n-                            {Object.keys(groupedTransactions).map((transactionType, index) => (\n-                              <React.Fragment key={index}>\n-                                {groupedTransactions[transactionType].length > 0 && (\n-                                  <Table.Row \n-                                  className={`bg-white dark:border-gray-700 dark:bg-gray-800 `}\n-                                  onClick={() => handleExpandRow(index)}>\n-                                    <Table.Cell colSpan=\"2\" className={`${getTextColor(transactionType)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>\n-                                      {transactionType === 'ipl' ? `Pemasukan IPL` : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}\n-                                      </Table.Cell>\n-                                    <Table.Cell className={`${getTextColor(transactionType)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>{formatCurrency(groupedTransactions[transactionType].reduce((acc, curr) => acc + curr.amount, 0))}</Table.Cell>\n-                                  </Table.Row>\n-                                )}\n-\n-                                  {groupedTransactions[transactionType].map((transaction, subIndex) => (\n-                                    <Table.Row key={subIndex} className={`bg-white dark:border-gray-700 dark:bg-gray-800 transition duration-300 ease-in-out ${expandedRows === index? 'h-auto': 'h-0 hidden'}`}>\n-                                      <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                        <span className='flex items-start'>\n-                                          <span>{getTypeIcon(transaction.transaction_type)} </span>\n-                                          <span className=\"ml-2\">{transaction.description}</span>\n-                                        </span>\n-                                      </Table.Cell>\n-                                      <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                        {moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}\n-                                      </Table.Cell>\n-                                      <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                        {formatCurrency(transaction.amount)}\n-                                      </Table.Cell>\n-                                    </Table.Row>\n-                                  ))}\n-                              \n-                                \n-                                \n-                              </React.Fragment>\n-                            ))}\n-                          </>\n-                        ) : (\n-                          <Table.Row>\n-                          <Table.Cell colSpan=\"3\" className=\"text-center\">Data tidak tersedia</Table.Cell>\n-                          </Table.Row>\n-                        ) }\n-                      \n-                        \n-                      {/* {transactions && transactions.length > 0 && transactions[0] !== undefined ? (\n-                          transactions.map((transaction, index) => (\n-                              <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                      <span className='flex items-start'>\n-                                      <span>{getTypeIcon(transaction.transaction_type)} </span>\n-                                      <span className=\"ml-2\">{transaction.description}</span>\n-                                      </span>\n-                                  </Table.Cell>\n-                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                      {moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}\n-                                  </Table.Cell>\n-                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                      {formatCurrency(transaction.amount)}\n-                                  </Table.Cell>\n-                              </Table.Row>\n-                          ))\n-                          ) : (\n-                          <Table.Row>\n-                              <Table.Cell colSpan=\"3\" className=\"text-center\">Data tidak tersedia</Table.Cell>\n-                          </Table.Row>\n-                      )} */}\n-\n-                      \n-                      \n-                      </Table.Body>\n-                  </Table>\n-                  \n-              </div>\n-            </CustomThemeProviderSecond>\n-            \n-        </Card>\n-    </CustomThemeProviderSecond>\n-    </>\n-  );\n-}\n-\n-export const getServerSideProps = async (context) => {\n-    const session = await getSession(context);\n-    \n-    // if (!session) {\n-    //     return {\n-    //         redirect: {\n-    //             destination: '/',\n-    //             permanent: false,\n-    //         },\n-    //     };\n-    // }\n-  \n-    try {\n-        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n-            // headers: {\n-            //     Authorization: `Bearer ${session.accessToken}`,\n-            // },\n-        });\n-        return {\n-            props: {\n-              initialTransaction: res.data.data,\n-            },\n-        };\n-    } catch (error) {\n-        console.error('Error fetching tra data:', error);\n-        return {\n-            props: {\n-              initialTransaction: [],\n-            },\n-        };\n-    }\n-  };\n-\n export default Report;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722343152622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -331,9 +331,9 @@\n                                   </Table.Row>\n                                 )}\n \n                                   {groupedTransactions[transactionType].map((transaction, subIndex) => (\n-                                    <Table.Row key={subIndex} className={`bg-white dark:border-gray-700 dark:bg-gray-800 transition-all duration-500 ease-in-out overflow-hidden ${expandedRows === index? '': 'hidden'}`}>\n+                                    <Table.Row key={subIndex} className={`bg-white dark:border-gray-700 dark:bg-gray-800 transition-all duration-500 ease-in-out overflow-hidden ${expandedRows === index? 'max-h-screen opacity-100': 'max-h-0 opacity-0'}`}>\n                                       <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n                                         <span className='flex items-start'>\n                                           <span>{getTypeIcon(transaction.transaction_type)} </span>\n                                           <span className=\"ml-2\">{transaction.description}</span>\n"
                },
                {
                    "date": 1722343313711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -330,9 +330,11 @@\n                                     <Table.Cell className={`${getTextColor(transactionType)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>{formatCurrency(groupedTransactions[transactionType].reduce((acc, curr) => acc + curr.amount, 0))}</Table.Cell>\n                                   </Table.Row>\n                                 )}\n \n-                                  {groupedTransactions[transactionType].map((transaction, subIndex) => (\n+                                {expandedRows === index ? (\n+                                  <>\n+                                   {groupedTransactions[transactionType].map((transaction, subIndex) => (\n                                     <Table.Row key={subIndex} className={`bg-white dark:border-gray-700 dark:bg-gray-800 transition-all duration-500 ease-in-out overflow-hidden ${expandedRows === index? 'max-h-screen opacity-100': 'max-h-0 opacity-0'}`}>\n                                       <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n                                         <span className='flex items-start'>\n                                           <span>{getTypeIcon(transaction.transaction_type)} </span>\n@@ -346,11 +348,10 @@\n                                         {formatCurrency(transaction.amount)}\n                                       </Table.Cell>\n                                     </Table.Row>\n                                   ))}\n-                              \n-                                \n-                                \n+                                  </>\n+                                ) : null}\n                               </React.Fragment>\n                             ))}\n                           </>\n                         ) : (\n"
                },
                {
                    "date": 1722343457827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,9 @@\n import CustomThemeProviderSecond from './CustomThemeSecond';\n import { Card, Button, Table, Accordion } from 'flowbite-react';\n import { GrMoney } from \"react-icons/gr\";\n import {FaRegArrowAltCircleDown, FaRegArrowAltCircleUp } from 'react-icons/fa';\n+import { IoChevronDownSharp } from \"react-icons/io5\";\n \n import { HiHome } from \"react-icons/hi\";\n \n import Select from 'react-select';\n"
                },
                {
                    "date": 1722343469021,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,9 @@\n import { Card, Button, Table, Accordion } from 'flowbite-react';\n import { GrMoney } from \"react-icons/gr\";\n import {FaRegArrowAltCircleDown, FaRegArrowAltCircleUp } from 'react-icons/fa';\n import { IoChevronDownSharp } from \"react-icons/io5\";\n+import { IoChevronUpSharp } from \"react-icons/io5\";\n \n import { HiHome } from \"react-icons/hi\";\n \n import Select from 'react-select';\n"
                },
                {
                    "date": 1722343529858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,439 @@\n+// pages/home.js\n+import React from 'react';\n+import {useSession ,getSession} from 'next-auth/react';\n+import { useEffect,useState } from 'react';\n+import _ from 'lodash';\n+import axios from 'axios';\n+import Spinner from './Spinner';\n+import CustomThemeProviderSecond from './CustomThemeSecond';\n+import { Card, Button, Table, Accordion } from 'flowbite-react';\n+import { GrMoney } from \"react-icons/gr\";\n+import {FaRegArrowAltCircleDown, FaRegArrowAltCircleUp } from 'react-icons/fa';\n+import { IoChevronDownSharp } from \"react-icons/io5\";\n+import { IoChevronUpSharp } from \"react-icons/io5\";\n+\n+import { HiHome } from \"react-icons/hi\";\n+\n+import Select from 'react-select';\n+import 'react-datepicker/dist/react-datepicker.css';\n+import moment from 'moment';\n+import 'moment/locale/id';\n+moment.locale('id');\n+import MonthOptions from './MonthOptions';\n+\n+const Report = ({ initialTransaction }) =>  {\n+  \n+  const [loading, setLoading] = useState(true);\n+  const { data: session, status } = useSession();\n+  const [transactions, setTransactions] = useState([initialTransaction]);\n+  const [reTransactions, setReTransactions] = useState([initialTransaction]);\n+  const [totalBalance, setTotalBalance] = useState(null);\n+  const [totalIncome, setTotalIncome] = useState(null);\n+  const [totalExpense, setTotalExpense] = useState(null);\n+  const [selectedPeriod, setSelectedPeriod] = useState(moment().format('YYYY-MM')); // Format YYYY-MM moment().format('YYYY-MM')\n+  const [monthlyBalances, setMonthlyBalances] = useState([]);\n+  const [totalIncomePeriod, setTotalIncomePeriod] = useState(0);\n+  const [totalExpensePeriod, setTotalExpensePeriod] = useState(0);\n+  const [totalHousesPaid, setTotalHousesPaid] = useState(0);\n+  const [totalHouses, setTotalHouses] = useState(0);\n+  const [lastUpdate, setLastUpdate] = useState();\n+  const [percentage, setPercentage] = useState(0);\n+  const [expandedRows, setExpandedRows] = useState(null);\n+\n+  \n+  const formatCurrency = (amount) => {\n+    return new Intl.NumberFormat('id-ID', {\n+        style: 'currency',\n+        currency: 'IDR',\n+        minimumFractionDigits: 0,\n+    }).format(amount);\n+  };\n+\n+  const fetchTransactions = async () => {\n+    try {\n+        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n+            params: {\n+              period: selectedPeriod\n+          }\n+        });\n+        //console.log(res.data)\n+        setTransactions(res.data.data);\n+        setReTransactions(res.data.data);\n+        setLastUpdate(res.data.lastUpdate);\n+        \n+        setLoading(false);\n+    } catch (error) {\n+        console.error('Error fetching houses data:', error);\n+        setLoading(false);\n+    }\n+  };\n+\n+  const fetchTotalBalance = async () => {\n+    try {\n+        const response = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/balance`, {\n+           \n+        });\n+       // console.log(response.data)\n+        setTotalBalance(response.data.totalBalance);\n+        setTotalIncome(response.data.totalIncome);\n+        setTotalExpense(response.data.totalExpense);\n+        setLoading(false);\n+    } catch (error) {\n+        console.error('Error fetching total balance:', error);\n+        setLoading(false);\n+    }\n+  };\n+\n+  const fetchMonthlyBalances = async () => {\n+    //console.log(selectedPeriod)\n+    try {\n+        const response = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/balance-monthly`, {\n+            params: {\n+                period: selectedPeriod\n+            }\n+        });\n+\n+        //console.log('Response data:', response.data);\n+\n+        if (Array.isArray(response.data) && response.data.length > 0) {\n+            // Gunakan data yang ada jika valid\n+            setMonthlyBalances(response.data);\n+            setTotalIncomePeriod(response.data[0].totalIncome || 0);\n+            setTotalExpensePeriod(response.data[0].totalExpense || 0);\n+        } else {\n+            // Tangani kasus jika data tidak sesuai\n+            setMonthlyBalances([]);\n+            setTotalIncomePeriod(0);\n+            setTotalExpensePeriod(0);\n+        }\n+       \n+    } catch (error) {\n+        console.error('Error fetching monthly balances:', error);\n+        setMonthlyBalances([]);\n+        setTotalIncomePeriod(0);\n+        setTotalExpensePeriod(0);\n+    }\n+  };\n+\n+  const fetchMonthlyPaid = async () => {\n+    try {\n+      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/houses/fee`, {\n+         \n+          params: {\n+            period: selectedPeriod\n+        }\n+      });\n+     // console.log(res.data)\n+      setTotalHousesPaid(res.data.total_houses_paid);\n+      setTotalHouses(res.data.total);\n+      setPercentage(res.data.percentage_paid);\n+    } catch (error) {\n+        console.error('Error fetching houses data:', error);\n+        setLoading(false);\n+    }\n+  };\n+\n+\n+  const [relatedMonths, setRelatedMonths] = useState({\n+    value: moment().format('YYYY-MM'),\n+    label: moment().format('MMMM YYYY')\n+  });\n+  \n+  const handleMonthChange = (selectedOption) => {\n+    setSelectedPeriod(selectedOption.value);\n+  };\n+\n+\n+  useEffect(() => {\n+    // Set nilai bulan saat ini saat komponen pertama kali dimuat\n+    const currentMonthOption = MonthOptions().find(\n+      (option) => option.value === moment().format('YYYY-MM')\n+    );\n+    setRelatedMonths(currentMonthOption);\n+  }, []);\n+\n+  useEffect(() => {\n+    fetchTransactions();\n+    fetchTotalBalance();\n+    fetchMonthlyPaid();\n+    fetchMonthlyBalances();\n+\n+  }, [selectedPeriod]);\n+  \n+\n+\n+  const getTypeIcon = (type) => {\n+    switch (type) {\n+      case 'income':\n+        return <FaRegArrowAltCircleDown  className=\"text-green-500 h-4 w-4 md:h-5 md:w-5 \" />;\n+      case 'expense':\n+        return <FaRegArrowAltCircleUp  className=\"text-red-500 h-4 w-4 md:h-5 md:w-5 \" />;\n+      case 'ipl':\n+        return <FaRegArrowAltCircleDown  className=\"text-green-700  h-4 w-4 md:h-5 md:w-5 \" />;\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const getTextColor = (type) => {\n+    switch (type) {\n+      case 'income':\n+        return \"text-green-500\";\n+      case 'expense':\n+        return \"text-red-500\";\n+      case 'ipl':\n+        return \"text-green-700\";\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  const groupedTransactions = _.groupBy(transactions, 'transaction_type');\n+\n+   //console.log(groupedTransactions)\n+  // console.log()\n+\n+  const handleExpandRow = (index) => {\n+    let currentExpandedRows = null;\n+    const isRowExpanded = currentExpandedRows === index ? index : null;\n+    const newExpandedRows = isRowExpanded\n+      ? null\n+      : (currentExpandedRows = index);\n+    if (expandedRows !== index) {\n+      setExpandedRows(newExpandedRows);\n+    } else {\n+      setExpandedRows(null);\n+    }\n+  };\n+\n+\n+  if (loading) {\n+    return <Spinner />;\n+  }\n+\n+  return (\n+    <>\n+    <CustomThemeProviderSecond>\n+          <Card className='mb-5 shadow-none'>\n+            <div className='flex flex-col lg:flex-row justify-between gap-3'>\n+              <div className='flex flex-col border-cyan-700 gap-3 border-2 p-3 rounded-md lg:w-1/2'>\n+                <div className='flex items-center content-center gap-2  md:gap-3 '>\n+                  <span className='items-center content-center'>\n+                    <GrMoney className=\"h-7 w-7 lg:h-10 lg:w-10 text-cyan-700\" />\n+                  </span>\n+                  <div>\n+                    <h2 className='md:text-2xl text-xl font-bold text-cyan-700 '>{formatCurrency(totalBalance)}</h2>\n+                    \n+                  </div>\n+                </div>\n+                <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Saldo Akhir</h3>\n+                \n+              </div>\n+             <div className='flex lg:flex-row gap-2 lg:gap-4 justify-between lg:justify-start'>\n+                <div className='flex flex-col items-center content-center  gap-2  md:gap-3 p-2 lg:p-3 border-green-500 border-2 rounded-md'>\n+                    <div className='flex items-center content-center gap-2  md:gap-3 '>\n+                      <span className=''>\n+                        <FaRegArrowAltCircleDown className=\"h-7 w-7 lg:h-10 lg:w-10 text-green-500\" />\n+                      </span>\n+                      <div>\n+                        <h2 className='md:text-2xl text-md font-bold text-green-500 '>{formatCurrency(totalIncome)}</h2>\n+                        {/* <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pemasukan</h3> */}\n+                      </div>\n+                    </div>\n+                    <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pemasukan</h3>\n+                </div>\n+                <div className='flex flex-col items-center content-center gap-2  md:gap-3 border-2 border-red-500 p-2 lg:p-3 rounded-md'>\n+                  <div className='flex items-center content-center gap-2  md:gap-3 '>\n+                    <span className=''>\n+                      <FaRegArrowAltCircleUp className=\"h-7 w-7 lg:h-10 lg:w-10 text-red-500\" />\n+                    </span>\n+                    <div>\n+                      <h2 className='md:text-2xl text-md font-bold text-red-500 '>{formatCurrency(totalExpense)}</h2>\n+                      {/* <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pengaluaran</h3> */}\n+                    </div>\n+                  </div>\n+                  <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pengaluaran</h3> \n+                   \n+                </div>\n+\n+             </div>\n+            </div>\n+          </Card>\n+    </CustomThemeProviderSecond>\n+        \n+    <CustomThemeProviderSecond>\n+        <Card>\n+            <div className='flex items-center justify-start gap-4 mb-4 mt-3 bg-cyan-700 rounded-md p-3 '>\n+                <div>\n+                    <span className='font-semibold text-white'>PERIODE</span>\n+                </div>\n+                <Select\n+                    id=\"relatedMonths\"\n+                    options={MonthOptions()}\n+                    value={MonthOptions().find(option => option.value === selectedPeriod)}\n+                    onChange={handleMonthChange}\n+                    placeholder=\"Pilih bulan\"\n+                    className='bg-cyan-700 rounded w-full md:w-1/3'\n+                    styles={{\n+                      control: (baseStyles, state) => ({\n+                        ...baseStyles,\n+                        backgroundColor: '#0e7490',\n+                      }),\n+                      input: (styles) => ({ ...styles, color: '#fff' }),\n+                      placeholder: (styles) => ({ ...styles, color: '#fff' }),\n+                      singleValue: (styles, { data }) => ({ ...styles, color: '#fff' }),\n+                    }}\n+                />\n+            </div>\n+            <div className='flex gap-1 md:gap-4 justify-between flex-row mb-4'>\n+            \n+                <Card className='bg-green-700 text-white w-1/3'>\n+                <h3 className='font-bold text-sm md:text-xl flex flex-col lg:flex-row  items-start lg:items-center content-center'>\n+                  <span className='flex'>\n+                    <span><HiHome className=\"h-5 w-5  md:h-7 md:w-7 mr-1 lg:mr-2\" /></span>\n+                    <span>IPL</span>\n+                  </span>\n+                  <span className='text-xs lg:text-sm font-normal lg:ml-3'>{`${totalHousesPaid} / ${totalHouses} Rumah`}</span>\n+                  </h3>\n+                <span className='font-semibold text-sm md:text-lg'>{percentage}</span>\n+                </Card>\n+                <Card className='bg-green-500 text-white w-1/3'>\n+                <h3 className='font-bold text-sm md:text-xl flex items-start'><span><FaRegArrowAltCircleDown className=\"h-5 w-5  md:h-7 md:w-7 mr-2\" /></span><span>Masuk</span></h3>\n+                <span className='font-semibold text-xs md:text-lg'>{formatCurrency(totalIncomePeriod)}</span>\n+                </Card>\n+                <Card className='bg-red-500 text-white w-1/3'>\n+                <h3 className='font-bold text-sm md:text-xl flex items-start'><span><FaRegArrowAltCircleUp className=\"h-5 w-5  md:h-7 md:w-7 mr-2\" /></span><span>Keluar</span></h3>\n+                <span className='font-semibold text-xs md:text-lg'>{formatCurrency(totalExpensePeriod)}</span>\n+                </Card>\n+            \n+            </div>\n+            {/* <div>{`Last Update: ${moment(lastUpdate).format('DD MMM yyyy')}`}</div> */}\n+            <CustomThemeProviderSecond>\n+              <div className=\"overflow-x-auto\">\n+                  <Table>\n+                      <Table.Head className='' >\n+                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white w-2/3'>Keterangan</Table.HeadCell>\n+                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white'>Tanggal</Table.HeadCell>\n+                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white '>Nominal</Table.HeadCell>\n+                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white '></Table.HeadCell>\n+                      </Table.Head>\n+                      <Table.Body className=\"divide-y\">\n+                        {transactions && transactions.length > 0 && transactions[0] !== undefined ? (\n+                          <>\n+                            {Object.keys(groupedTransactions).map((transactionType, index) => (\n+                              <React.Fragment key={index}>\n+                                {groupedTransactions[transactionType].length > 0 && (\n+                                  <Table.Row \n+                                  className={`bg-white dark:border-gray-700 dark:bg-gray-800 cursor-pointer`}\n+                                  onClick={() => handleExpandRow(index)}>\n+                                    <Table.Cell colSpan=\"2\" className={`${getTextColor(transactionType)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>\n+                                      {transactionType === 'ipl' ? `Pemasukan IPL` : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}\n+                                      </Table.Cell>\n+                                    <Table.Cell className={`${getTextColor(transactionType)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>{formatCurrency(groupedTransactions[transactionType].reduce((acc, curr) => acc + curr.amount, 0))}</Table.Cell>\n+                                    <Table.Cell className={`${getTextColor(transactionType)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>\n+                                      {expandedRows === index ? '<IoChevronDownSharp />':'<IoChevronUpSharp />'}\n+                                      </Table.Cell>\n+                                  </Table.Row>\n+                                )}\n+\n+                                {expandedRows === index ? (\n+                                  <>\n+                                   {groupedTransactions[transactionType].map((transaction, subIndex) => (\n+                                    <Table.Row key={subIndex} className={`bg-white dark:border-gray-700 dark:bg-gray-800 transition-all duration-500 ease-in-out overflow-hidden ${expandedRows === index? 'max-h-screen opacity-100': 'max-h-0 opacity-0'}`}>\n+                                      <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                        <span className='flex items-start'>\n+                                          <span>{getTypeIcon(transaction.transaction_type)} </span>\n+                                          <span className=\"ml-2\">{transaction.description}</span>\n+                                        </span>\n+                                      </Table.Cell>\n+                                      <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                        {moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}\n+                                      </Table.Cell>\n+                                      <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                        {formatCurrency(transaction.amount)}\n+                                      </Table.Cell>\n+                                    </Table.Row>\n+                                  ))}\n+                                  </>\n+                                ) : null}\n+                              </React.Fragment>\n+                            ))}\n+                          </>\n+                        ) : (\n+                          <Table.Row>\n+                          <Table.Cell colSpan=\"3\" className=\"text-center\">Data tidak tersedia</Table.Cell>\n+                          </Table.Row>\n+                        ) }\n+                      \n+                        \n+                      {/* {transactions && transactions.length > 0 && transactions[0] !== undefined ? (\n+                          transactions.map((transaction, index) => (\n+                              <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n+                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                      <span className='flex items-start'>\n+                                      <span>{getTypeIcon(transaction.transaction_type)} </span>\n+                                      <span className=\"ml-2\">{transaction.description}</span>\n+                                      </span>\n+                                  </Table.Cell>\n+                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                      {moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}\n+                                  </Table.Cell>\n+                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n+                                      {formatCurrency(transaction.amount)}\n+                                  </Table.Cell>\n+                              </Table.Row>\n+                          ))\n+                          ) : (\n+                          <Table.Row>\n+                              <Table.Cell colSpan=\"3\" className=\"text-center\">Data tidak tersedia</Table.Cell>\n+                          </Table.Row>\n+                      )} */}\n+\n+                      \n+                      \n+                      </Table.Body>\n+                  </Table>\n+                  \n+              </div>\n+            </CustomThemeProviderSecond>\n+            \n+        </Card>\n+    </CustomThemeProviderSecond>\n+    </>\n+  );\n+}\n+\n+export const getServerSideProps = async (context) => {\n+    const session = await getSession(context);\n+    \n+    // if (!session) {\n+    //     return {\n+    //         redirect: {\n+    //             destination: '/',\n+    //             permanent: false,\n+    //         },\n+    //     };\n+    // }\n+  \n+    try {\n+        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n+            // headers: {\n+            //     Authorization: `Bearer ${session.accessToken}`,\n+            // },\n+        });\n+        return {\n+            props: {\n+              initialTransaction: res.data.data,\n+            },\n+        };\n+    } catch (error) {\n+        console.error('Error fetching tra data:', error);\n+        return {\n+            props: {\n+              initialTransaction: [],\n+            },\n+        };\n+    }\n+  };\n+\n+export default Report;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722343542196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -330,9 +330,9 @@\n                                       {transactionType === 'ipl' ? `Pemasukan IPL` : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}\n                                       </Table.Cell>\n                                     <Table.Cell className={`${getTextColor(transactionType)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>{formatCurrency(groupedTransactions[transactionType].reduce((acc, curr) => acc + curr.amount, 0))}</Table.Cell>\n                                     <Table.Cell className={`${getTextColor(transactionType)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>\n-                                      {expandedRows === index ? '<IoChevronDownSharp />':'<IoChevronUpSharp />'}\n+                                      {expandedRows === index ? <IoChevronDownSharp /> : <IoChevronUpSharp />}\n                                       </Table.Cell>\n                                   </Table.Row>\n                                 )}\n \n@@ -435,441 +435,5 @@\n         };\n     }\n   };\n \n-export default Report;\n-// pages/home.js\n-import React from 'react';\n-import {useSession ,getSession} from 'next-auth/react';\n-import { useEffect,useState } from 'react';\n-import _ from 'lodash';\n-import axios from 'axios';\n-import Spinner from './Spinner';\n-import CustomThemeProviderSecond from './CustomThemeSecond';\n-import { Card, Button, Table, Accordion } from 'flowbite-react';\n-import { GrMoney } from \"react-icons/gr\";\n-import {FaRegArrowAltCircleDown, FaRegArrowAltCircleUp } from 'react-icons/fa';\n-import { IoChevronDownSharp } from \"react-icons/io5\";\n-import { IoChevronUpSharp } from \"react-icons/io5\";\n-\n-import { HiHome } from \"react-icons/hi\";\n-\n-import Select from 'react-select';\n-import 'react-datepicker/dist/react-datepicker.css';\n-import moment from 'moment';\n-import 'moment/locale/id';\n-moment.locale('id');\n-import MonthOptions from './MonthOptions';\n-\n-const Report = ({ initialTransaction }) =>  {\n-  \n-  const [loading, setLoading] = useState(true);\n-  const { data: session, status } = useSession();\n-  const [transactions, setTransactions] = useState([initialTransaction]);\n-  const [reTransactions, setReTransactions] = useState([initialTransaction]);\n-  const [totalBalance, setTotalBalance] = useState(null);\n-  const [totalIncome, setTotalIncome] = useState(null);\n-  const [totalExpense, setTotalExpense] = useState(null);\n-  const [selectedPeriod, setSelectedPeriod] = useState(moment().format('YYYY-MM')); // Format YYYY-MM moment().format('YYYY-MM')\n-  const [monthlyBalances, setMonthlyBalances] = useState([]);\n-  const [totalIncomePeriod, setTotalIncomePeriod] = useState(0);\n-  const [totalExpensePeriod, setTotalExpensePeriod] = useState(0);\n-  const [totalHousesPaid, setTotalHousesPaid] = useState(0);\n-  const [totalHouses, setTotalHouses] = useState(0);\n-  const [lastUpdate, setLastUpdate] = useState();\n-  const [percentage, setPercentage] = useState(0);\n-  const [expandedRows, setExpandedRows] = useState(null);\n-\n-  \n-  const formatCurrency = (amount) => {\n-    return new Intl.NumberFormat('id-ID', {\n-        style: 'currency',\n-        currency: 'IDR',\n-        minimumFractionDigits: 0,\n-    }).format(amount);\n-  };\n-\n-  const fetchTransactions = async () => {\n-    try {\n-        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n-            params: {\n-              period: selectedPeriod\n-          }\n-        });\n-        //console.log(res.data)\n-        setTransactions(res.data.data);\n-        setReTransactions(res.data.data);\n-        setLastUpdate(res.data.lastUpdate);\n-        \n-        setLoading(false);\n-    } catch (error) {\n-        console.error('Error fetching houses data:', error);\n-        setLoading(false);\n-    }\n-  };\n-\n-  const fetchTotalBalance = async () => {\n-    try {\n-        const response = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/balance`, {\n-           \n-        });\n-       // console.log(response.data)\n-        setTotalBalance(response.data.totalBalance);\n-        setTotalIncome(response.data.totalIncome);\n-        setTotalExpense(response.data.totalExpense);\n-        setLoading(false);\n-    } catch (error) {\n-        console.error('Error fetching total balance:', error);\n-        setLoading(false);\n-    }\n-  };\n-\n-  const fetchMonthlyBalances = async () => {\n-    //console.log(selectedPeriod)\n-    try {\n-        const response = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/balance-monthly`, {\n-            params: {\n-                period: selectedPeriod\n-            }\n-        });\n-\n-        //console.log('Response data:', response.data);\n-\n-        if (Array.isArray(response.data) && response.data.length > 0) {\n-            // Gunakan data yang ada jika valid\n-            setMonthlyBalances(response.data);\n-            setTotalIncomePeriod(response.data[0].totalIncome || 0);\n-            setTotalExpensePeriod(response.data[0].totalExpense || 0);\n-        } else {\n-            // Tangani kasus jika data tidak sesuai\n-            setMonthlyBalances([]);\n-            setTotalIncomePeriod(0);\n-            setTotalExpensePeriod(0);\n-        }\n-       \n-    } catch (error) {\n-        console.error('Error fetching monthly balances:', error);\n-        setMonthlyBalances([]);\n-        setTotalIncomePeriod(0);\n-        setTotalExpensePeriod(0);\n-    }\n-  };\n-\n-  const fetchMonthlyPaid = async () => {\n-    try {\n-      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/houses/fee`, {\n-         \n-          params: {\n-            period: selectedPeriod\n-        }\n-      });\n-     // console.log(res.data)\n-      setTotalHousesPaid(res.data.total_houses_paid);\n-      setTotalHouses(res.data.total);\n-      setPercentage(res.data.percentage_paid);\n-    } catch (error) {\n-        console.error('Error fetching houses data:', error);\n-        setLoading(false);\n-    }\n-  };\n-\n-\n-  const [relatedMonths, setRelatedMonths] = useState({\n-    value: moment().format('YYYY-MM'),\n-    label: moment().format('MMMM YYYY')\n-  });\n-  \n-  const handleMonthChange = (selectedOption) => {\n-    setSelectedPeriod(selectedOption.value);\n-  };\n-\n-\n-  useEffect(() => {\n-    // Set nilai bulan saat ini saat komponen pertama kali dimuat\n-    const currentMonthOption = MonthOptions().find(\n-      (option) => option.value === moment().format('YYYY-MM')\n-    );\n-    setRelatedMonths(currentMonthOption);\n-  }, []);\n-\n-  useEffect(() => {\n-    fetchTransactions();\n-    fetchTotalBalance();\n-    fetchMonthlyPaid();\n-    fetchMonthlyBalances();\n-\n-  }, [selectedPeriod]);\n-  \n-\n-\n-  const getTypeIcon = (type) => {\n-    switch (type) {\n-      case 'income':\n-        return <FaRegArrowAltCircleDown  className=\"text-green-500 h-4 w-4 md:h-5 md:w-5 \" />;\n-      case 'expense':\n-        return <FaRegArrowAltCircleUp  className=\"text-red-500 h-4 w-4 md:h-5 md:w-5 \" />;\n-      case 'ipl':\n-        return <FaRegArrowAltCircleDown  className=\"text-green-700  h-4 w-4 md:h-5 md:w-5 \" />;\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const getTextColor = (type) => {\n-    switch (type) {\n-      case 'income':\n-        return \"text-green-500\";\n-      case 'expense':\n-        return \"text-red-500\";\n-      case 'ipl':\n-        return \"text-green-700\";\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  const groupedTransactions = _.groupBy(transactions, 'transaction_type');\n-\n-   //console.log(groupedTransactions)\n-  // console.log()\n-\n-  const handleExpandRow = (index) => {\n-    let currentExpandedRows = null;\n-    const isRowExpanded = currentExpandedRows === index ? index : null;\n-    const newExpandedRows = isRowExpanded\n-      ? null\n-      : (currentExpandedRows = index);\n-    if (expandedRows !== index) {\n-      setExpandedRows(newExpandedRows);\n-    } else {\n-      setExpandedRows(null);\n-    }\n-  };\n-\n-\n-  if (loading) {\n-    return <Spinner />;\n-  }\n-\n-  return (\n-    <>\n-    <CustomThemeProviderSecond>\n-          <Card className='mb-5 shadow-none'>\n-            <div className='flex flex-col lg:flex-row justify-between gap-3'>\n-              <div className='flex flex-col border-cyan-700 gap-3 border-2 p-3 rounded-md lg:w-1/2'>\n-                <div className='flex items-center content-center gap-2  md:gap-3 '>\n-                  <span className='items-center content-center'>\n-                    <GrMoney className=\"h-7 w-7 lg:h-10 lg:w-10 text-cyan-700\" />\n-                  </span>\n-                  <div>\n-                    <h2 className='md:text-2xl text-xl font-bold text-cyan-700 '>{formatCurrency(totalBalance)}</h2>\n-                    \n-                  </div>\n-                </div>\n-                <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Saldo Akhir</h3>\n-                \n-              </div>\n-             <div className='flex lg:flex-row gap-2 lg:gap-4 justify-between lg:justify-start'>\n-                <div className='flex flex-col items-center content-center  gap-2  md:gap-3 p-2 lg:p-3 border-green-500 border-2 rounded-md'>\n-                    <div className='flex items-center content-center gap-2  md:gap-3 '>\n-                      <span className=''>\n-                        <FaRegArrowAltCircleDown className=\"h-7 w-7 lg:h-10 lg:w-10 text-green-500\" />\n-                      </span>\n-                      <div>\n-                        <h2 className='md:text-2xl text-md font-bold text-green-500 '>{formatCurrency(totalIncome)}</h2>\n-                        {/* <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pemasukan</h3> */}\n-                      </div>\n-                    </div>\n-                    <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pemasukan</h3>\n-                </div>\n-                <div className='flex flex-col items-center content-center gap-2  md:gap-3 border-2 border-red-500 p-2 lg:p-3 rounded-md'>\n-                  <div className='flex items-center content-center gap-2  md:gap-3 '>\n-                    <span className=''>\n-                      <FaRegArrowAltCircleUp className=\"h-7 w-7 lg:h-10 lg:w-10 text-red-500\" />\n-                    </span>\n-                    <div>\n-                      <h2 className='md:text-2xl text-md font-bold text-red-500 '>{formatCurrency(totalExpense)}</h2>\n-                      {/* <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pengaluaran</h3> */}\n-                    </div>\n-                  </div>\n-                  <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pengaluaran</h3> \n-                   \n-                </div>\n-\n-             </div>\n-            </div>\n-          </Card>\n-    </CustomThemeProviderSecond>\n-        \n-    <CustomThemeProviderSecond>\n-        <Card>\n-            <div className='flex items-center justify-start gap-4 mb-4 mt-3 bg-cyan-700 rounded-md p-3 '>\n-                <div>\n-                    <span className='font-semibold text-white'>PERIODE</span>\n-                </div>\n-                <Select\n-                    id=\"relatedMonths\"\n-                    options={MonthOptions()}\n-                    value={MonthOptions().find(option => option.value === selectedPeriod)}\n-                    onChange={handleMonthChange}\n-                    placeholder=\"Pilih bulan\"\n-                    className='bg-cyan-700 rounded w-full md:w-1/3'\n-                    styles={{\n-                      control: (baseStyles, state) => ({\n-                        ...baseStyles,\n-                        backgroundColor: '#0e7490',\n-                      }),\n-                      input: (styles) => ({ ...styles, color: '#fff' }),\n-                      placeholder: (styles) => ({ ...styles, color: '#fff' }),\n-                      singleValue: (styles, { data }) => ({ ...styles, color: '#fff' }),\n-                    }}\n-                />\n-            </div>\n-            <div className='flex gap-1 md:gap-4 justify-between flex-row mb-4'>\n-            \n-                <Card className='bg-green-700 text-white w-1/3'>\n-                <h3 className='font-bold text-sm md:text-xl flex flex-col lg:flex-row  items-start lg:items-center content-center'>\n-                  <span className='flex'>\n-                    <span><HiHome className=\"h-5 w-5  md:h-7 md:w-7 mr-1 lg:mr-2\" /></span>\n-                    <span>IPL</span>\n-                  </span>\n-                  <span className='text-xs lg:text-sm font-normal lg:ml-3'>{`${totalHousesPaid} / ${totalHouses} Rumah`}</span>\n-                  </h3>\n-                <span className='font-semibold text-sm md:text-lg'>{percentage}</span>\n-                </Card>\n-                <Card className='bg-green-500 text-white w-1/3'>\n-                <h3 className='font-bold text-sm md:text-xl flex items-start'><span><FaRegArrowAltCircleDown className=\"h-5 w-5  md:h-7 md:w-7 mr-2\" /></span><span>Masuk</span></h3>\n-                <span className='font-semibold text-xs md:text-lg'>{formatCurrency(totalIncomePeriod)}</span>\n-                </Card>\n-                <Card className='bg-red-500 text-white w-1/3'>\n-                <h3 className='font-bold text-sm md:text-xl flex items-start'><span><FaRegArrowAltCircleUp className=\"h-5 w-5  md:h-7 md:w-7 mr-2\" /></span><span>Keluar</span></h3>\n-                <span className='font-semibold text-xs md:text-lg'>{formatCurrency(totalExpensePeriod)}</span>\n-                </Card>\n-            \n-            </div>\n-            {/* <div>{`Last Update: ${moment(lastUpdate).format('DD MMM yyyy')}`}</div> */}\n-            <CustomThemeProviderSecond>\n-              <div className=\"overflow-x-auto\">\n-                  <Table>\n-                      <Table.Head className='' >\n-                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white w-2/3'>Keterangan</Table.HeadCell>\n-                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white'>Tanggal</Table.HeadCell>\n-                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white '>Nominal</Table.HeadCell>\n-                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white '></Table.HeadCell>\n-                      </Table.Head>\n-                      <Table.Body className=\"divide-y\">\n-                        {transactions && transactions.length > 0 && transactions[0] !== undefined ? (\n-                          <>\n-                            {Object.keys(groupedTransactions).map((transactionType, index) => (\n-                              <React.Fragment key={index}>\n-                                {groupedTransactions[transactionType].length > 0 && (\n-                                  <Table.Row \n-                                  className={`bg-white dark:border-gray-700 dark:bg-gray-800 cursor-pointer`}\n-                                  onClick={() => handleExpandRow(index)}>\n-                                    <Table.Cell colSpan=\"2\" className={`${getTextColor(transactionType)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>\n-                                      {transactionType === 'ipl' ? `Pemasukan IPL` : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}\n-                                      </Table.Cell>\n-                                    <Table.Cell className={`${getTextColor(transactionType)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>{formatCurrency(groupedTransactions[transactionType].reduce((acc, curr) => acc + curr.amount, 0))}</Table.Cell>\n-                                  </Table.Row>\n-                                )}\n-\n-                                {expandedRows === index ? (\n-                                  <>\n-                                   {groupedTransactions[transactionType].map((transaction, subIndex) => (\n-                                    <Table.Row key={subIndex} className={`bg-white dark:border-gray-700 dark:bg-gray-800 transition-all duration-500 ease-in-out overflow-hidden ${expandedRows === index? 'max-h-screen opacity-100': 'max-h-0 opacity-0'}`}>\n-                                      <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                        <span className='flex items-start'>\n-                                          <span>{getTypeIcon(transaction.transaction_type)} </span>\n-                                          <span className=\"ml-2\">{transaction.description}</span>\n-                                        </span>\n-                                      </Table.Cell>\n-                                      <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                        {moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}\n-                                      </Table.Cell>\n-                                      <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                        {formatCurrency(transaction.amount)}\n-                                      </Table.Cell>\n-                                    </Table.Row>\n-                                  ))}\n-                                  </>\n-                                ) : null}\n-                              </React.Fragment>\n-                            ))}\n-                          </>\n-                        ) : (\n-                          <Table.Row>\n-                          <Table.Cell colSpan=\"3\" className=\"text-center\">Data tidak tersedia</Table.Cell>\n-                          </Table.Row>\n-                        ) }\n-                      \n-                        \n-                      {/* {transactions && transactions.length > 0 && transactions[0] !== undefined ? (\n-                          transactions.map((transaction, index) => (\n-                              <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n-                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                      <span className='flex items-start'>\n-                                      <span>{getTypeIcon(transaction.transaction_type)} </span>\n-                                      <span className=\"ml-2\">{transaction.description}</span>\n-                                      </span>\n-                                  </Table.Cell>\n-                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                      {moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}\n-                                  </Table.Cell>\n-                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n-                                      {formatCurrency(transaction.amount)}\n-                                  </Table.Cell>\n-                              </Table.Row>\n-                          ))\n-                          ) : (\n-                          <Table.Row>\n-                              <Table.Cell colSpan=\"3\" className=\"text-center\">Data tidak tersedia</Table.Cell>\n-                          </Table.Row>\n-                      )} */}\n-\n-                      \n-                      \n-                      </Table.Body>\n-                  </Table>\n-                  \n-              </div>\n-            </CustomThemeProviderSecond>\n-            \n-        </Card>\n-    </CustomThemeProviderSecond>\n-    </>\n-  );\n-}\n-\n-export const getServerSideProps = async (context) => {\n-    const session = await getSession(context);\n-    \n-    // if (!session) {\n-    //     return {\n-    //         redirect: {\n-    //             destination: '/',\n-    //             permanent: false,\n-    //         },\n-    //     };\n-    // }\n-  \n-    try {\n-        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n-            // headers: {\n-            //     Authorization: `Bearer ${session.accessToken}`,\n-            // },\n-        });\n-        return {\n-            props: {\n-              initialTransaction: res.data.data,\n-            },\n-        };\n-    } catch (error) {\n-        console.error('Error fetching tra data:', error);\n-        return {\n-            props: {\n-              initialTransaction: [],\n-            },\n-        };\n-    }\n-  };\n-\n export default Report;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722343565641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -330,9 +330,9 @@\n                                       {transactionType === 'ipl' ? `Pemasukan IPL` : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}\n                                       </Table.Cell>\n                                     <Table.Cell className={`${getTextColor(transactionType)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>{formatCurrency(groupedTransactions[transactionType].reduce((acc, curr) => acc + curr.amount, 0))}</Table.Cell>\n                                     <Table.Cell className={`${getTextColor(transactionType)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base font-bold`}>\n-                                      {expandedRows === index ? <IoChevronDownSharp /> : <IoChevronUpSharp />}\n+                                      {expandedRows === index ? <IoChevronUpSharp /> : <IoChevronDownSharp />}\n                                       </Table.Cell>\n                                   </Table.Row>\n                                 )}\n \n"
                },
                {
                    "date": 1722343605868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -308,9 +308,9 @@\n             \n             </div>\n             {/* <div>{`Last Update: ${moment(lastUpdate).format('DD MMM yyyy')}`}</div> */}\n             <CustomThemeProviderSecond>\n-              <div className=\"overflow-x-auto\">\n+              <div className=\"overflow-x-auto mb-11\">\n                   <Table>\n                       <Table.Head className='' >\n                           <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white w-2/3'>Keterangan</Table.HeadCell>\n                           <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white'>Tanggal</Table.HeadCell>\n"
                },
                {
                    "date": 1722343614672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -308,9 +308,9 @@\n             \n             </div>\n             {/* <div>{`Last Update: ${moment(lastUpdate).format('DD MMM yyyy')}`}</div> */}\n             <CustomThemeProviderSecond>\n-              <div className=\"overflow-x-auto mb-11\">\n+              <div className=\"overflow-x-auto\">\n                   <Table>\n                       <Table.Head className='' >\n                           <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white w-2/3'>Keterangan</Table.HeadCell>\n                           <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white'>Tanggal</Table.HeadCell>\n"
                },
                {
                    "date": 1722343622770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -261,9 +261,9 @@\n           </Card>\n     </CustomThemeProviderSecond>\n         \n     <CustomThemeProviderSecond>\n-        <Card>\n+        <Card className='mb-11'>\n             <div className='flex items-center justify-start gap-4 mb-4 mt-3 bg-cyan-700 rounded-md p-3 '>\n                 <div>\n                     <span className='font-semibold text-white'>PERIODE</span>\n                 </div>\n"
                }
            ],
            "date": 1722339068735,
            "name": "Commit-0",
            "content": "// pages/home.js\nimport React from 'react';\nimport {useSession ,getSession} from 'next-auth/react';\nimport { useEffect,useState } from 'react';\nimport _ from 'lodash';\nimport axios from 'axios';\nimport Spinner from './Spinner';\nimport CustomThemeProviderSecond from './CustomThemeSecond';\nimport { Card, Button, Table, Accordion } from 'flowbite-react';\nimport { GrMoney } from \"react-icons/gr\";\nimport {FaRegArrowAltCircleDown, FaRegArrowAltCircleUp } from 'react-icons/fa';\n\nimport { HiHome } from \"react-icons/hi\";\n\nimport Select from 'react-select';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport moment from 'moment';\nimport 'moment/locale/id';\nmoment.locale('id');\nimport MonthOptions from './MonthOptions';\n\nconst Report = ({ initialTransaction }) =>  {\n  \n  const [loading, setLoading] = useState(true);\n  const { data: session, status } = useSession();\n  const [transactions, setTransactions] = useState([initialTransaction]);\n  const [reTransactions, setReTransactions] = useState([initialTransaction]);\n  const [totalBalance, setTotalBalance] = useState(null);\n  const [totalIncome, setTotalIncome] = useState(null);\n  const [totalExpense, setTotalExpense] = useState(null);\n  const [selectedPeriod, setSelectedPeriod] = useState(moment().format('YYYY-MM')); // Format YYYY-MM moment().format('YYYY-MM')\n  const [monthlyBalances, setMonthlyBalances] = useState([]);\n  const [totalIncomePeriod, setTotalIncomePeriod] = useState(0);\n  const [totalExpensePeriod, setTotalExpensePeriod] = useState(0);\n  const [totalHousesPaid, setTotalHousesPaid] = useState(0);\n  const [totalHouses, setTotalHouses] = useState(0);\n  const [lastUpdate, setLastUpdate] = useState();\n  const [percentage, setPercentage] = useState(0);\n\n  \n  const formatCurrency = (amount) => {\n    return new Intl.NumberFormat('id-ID', {\n        style: 'currency',\n        currency: 'IDR',\n        minimumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const fetchTransactions = async () => {\n    try {\n        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n            params: {\n              period: selectedPeriod\n          }\n        });\n        //console.log(res.data)\n        setTransactions(res.data.data);\n        setReTransactions(res.data.data);\n        setLastUpdate(res.data.lastUpdate);\n        \n        setLoading(false);\n    } catch (error) {\n        console.error('Error fetching houses data:', error);\n        setLoading(false);\n    }\n  };\n\n  const fetchTotalBalance = async () => {\n    try {\n        const response = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/balance`, {\n           \n        });\n       // console.log(response.data)\n        setTotalBalance(response.data.totalBalance);\n        setTotalIncome(response.data.totalIncome);\n        setTotalExpense(response.data.totalExpense);\n        setLoading(false);\n    } catch (error) {\n        console.error('Error fetching total balance:', error);\n        setLoading(false);\n    }\n  };\n\n  const fetchMonthlyBalances = async () => {\n    //console.log(selectedPeriod)\n    try {\n        const response = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/balance-monthly`, {\n            params: {\n                period: selectedPeriod\n            }\n        });\n\n        //console.log('Response data:', response.data);\n\n        if (Array.isArray(response.data) && response.data.length > 0) {\n            // Gunakan data yang ada jika valid\n            setMonthlyBalances(response.data);\n            setTotalIncomePeriod(response.data[0].totalIncome || 0);\n            setTotalExpensePeriod(response.data[0].totalExpense || 0);\n        } else {\n            // Tangani kasus jika data tidak sesuai\n            setMonthlyBalances([]);\n            setTotalIncomePeriod(0);\n            setTotalExpensePeriod(0);\n        }\n       \n    } catch (error) {\n        console.error('Error fetching monthly balances:', error);\n        setMonthlyBalances([]);\n        setTotalIncomePeriod(0);\n        setTotalExpensePeriod(0);\n    }\n  };\n\n  const fetchMonthlyPaid = async () => {\n    try {\n      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/houses/fee`, {\n         \n          params: {\n            period: selectedPeriod\n        }\n      });\n     // console.log(res.data)\n      setTotalHousesPaid(res.data.total_houses_paid);\n      setTotalHouses(res.data.total);\n      setPercentage(res.data.percentage_paid);\n    } catch (error) {\n        console.error('Error fetching houses data:', error);\n        setLoading(false);\n    }\n  };\n\n\n  const [relatedMonths, setRelatedMonths] = useState({\n    value: moment().format('YYYY-MM'),\n    label: moment().format('MMMM YYYY')\n  });\n  \n  const handleMonthChange = (selectedOption) => {\n    setSelectedPeriod(selectedOption.value);\n  };\n\n\n  useEffect(() => {\n    // Set nilai bulan saat ini saat komponen pertama kali dimuat\n    const currentMonthOption = MonthOptions().find(\n      (option) => option.value === moment().format('YYYY-MM')\n    );\n    setRelatedMonths(currentMonthOption);\n  }, []);\n\n  useEffect(() => {\n    fetchTransactions();\n    fetchTotalBalance();\n    fetchMonthlyPaid();\n    fetchMonthlyBalances();\n\n  }, [selectedPeriod]);\n  \n\n\n  const getTypeIcon = (type) => {\n    switch (type) {\n      case 'income':\n        return <FaRegArrowAltCircleDown  className=\"text-green-500 h-4 w-4 md:h-5 md:w-5 \" />;\n      case 'expense':\n        return <FaRegArrowAltCircleUp  className=\"text-red-500 h-4 w-4 md:h-5 md:w-5 \" />;\n      case 'ipl':\n        return <FaRegArrowAltCircleDown  className=\"text-green-500  h-4 w-4 md:h-5 md:w-5 \" />;\n      default:\n        return null;\n    }\n  };\n\n  const getTextColor = (type) => {\n    switch (type) {\n      case 'income':\n        return \"text-green-500\";\n      case 'expense':\n        return \"text-red-500\";\n      case 'ipl':\n        return \"text-green-500\";\n      default:\n        return null;\n    }\n  };\n\n  const groupedTransactions = _.groupBy(transactions, 'transaction_type');\n\n  // console.log(groupedTransactions)\n  // console.log()\n\n  if (loading) {\n    return <Spinner />;\n  }\n\n  return (\n    <>\n    <CustomThemeProviderSecond>\n          <Card className='mb-5 shadow-none'>\n            <div className='flex flex-col lg:flex-row justify-between gap-3'>\n              <div className='flex flex-col border-cyan-700 gap-3 border-2 p-3 rounded-md lg:w-1/2'>\n                <div className='flex items-center content-center gap-2  md:gap-3 '>\n                  <span className='items-center content-center'>\n                    <GrMoney className=\"h-7 w-7 lg:h-10 lg:w-10 text-cyan-700\" />\n                  </span>\n                  <div>\n                    <h2 className='md:text-2xl text-xl font-bold text-cyan-700 '>{formatCurrency(totalBalance)}</h2>\n                    \n                  </div>\n                </div>\n                <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Saldo Akhir</h3>\n                \n              </div>\n             <div className='flex lg:flex-row gap-2 lg:gap-4 justify-between lg:justify-start'>\n                <div className='flex flex-col items-center content-center  gap-2  md:gap-3 p-2 lg:p-3 border-green-500 border-2 rounded-md'>\n                    <div className='flex items-center content-center gap-2  md:gap-3 '>\n                      <span className=''>\n                        <FaRegArrowAltCircleDown className=\"h-7 w-7 lg:h-10 lg:w-10 text-green-500\" />\n                      </span>\n                      <div>\n                        <h2 className='md:text-2xl text-md font-bold text-green-500 '>{formatCurrency(totalIncome)}</h2>\n                        {/* <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pemasukan</h3> */}\n                      </div>\n                    </div>\n                    <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pemasukan</h3>\n                </div>\n                <div className='flex flex-col items-center content-center gap-2  md:gap-3 border-2 border-red-500 p-2 lg:p-3 rounded-md'>\n                  <div className='flex items-center content-center gap-2  md:gap-3 '>\n                    <span className=''>\n                      <FaRegArrowAltCircleUp className=\"h-7 w-7 lg:h-10 lg:w-10 text-red-500\" />\n                    </span>\n                    <div>\n                      <h2 className='md:text-2xl text-md font-bold text-red-500 '>{formatCurrency(totalExpense)}</h2>\n                      {/* <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pengaluaran</h3> */}\n                    </div>\n                  </div>\n                  <h3 className=\"md:text-base text-sm font-light text-gray-500 dark:text-gray-400\">Total Pengaluaran</h3> \n                   \n                </div>\n\n             </div>\n            </div>\n          </Card>\n    </CustomThemeProviderSecond>\n        \n    <CustomThemeProviderSecond>\n        <Card>\n            <div className='flex items-center justify-start gap-4 mb-4 mt-3 bg-cyan-700 rounded-md p-3 '>\n                <div>\n                    <span className='font-semibold text-white'>PERIODE</span>\n                </div>\n                <Select\n                    id=\"relatedMonths\"\n                    options={MonthOptions()}\n                    value={MonthOptions().find(option => option.value === selectedPeriod)}\n                    onChange={handleMonthChange}\n                    placeholder=\"Pilih bulan\"\n                    className='bg-cyan-700 rounded w-full md:w-1/3'\n                    styles={{\n                      control: (baseStyles, state) => ({\n                        ...baseStyles,\n                        backgroundColor: '#0e7490',\n                      }),\n                      input: (styles) => ({ ...styles, color: '#fff' }),\n                      placeholder: (styles) => ({ ...styles, color: '#fff' }),\n                      singleValue: (styles, { data }) => ({ ...styles, color: '#fff' }),\n                    }}\n                />\n            </div>\n            <div className='flex gap-1 md:gap-4 justify-between flex-row mb-4'>\n            \n                <Card className='bg-green-700 text-white w-1/3'>\n                <h3 className='font-bold text-sm md:text-xl flex flex-col lg:flex-row  items-start lg:items-center content-center'>\n                  <span className='flex'>\n                    <span><HiHome className=\"h-5 w-5  md:h-7 md:w-7 mr-1 lg:mr-2\" /></span>\n                    <span>IPL</span>\n                  </span>\n                  <span className='text-xs lg:text-sm font-normal lg:ml-3'>{`${totalHousesPaid} / ${totalHouses} Rumah`}</span>\n                  </h3>\n                <span className='font-semibold text-sm md:text-lg'>{percentage}</span>\n                </Card>\n                <Card className='bg-green-500 text-white w-1/3'>\n                <h3 className='font-bold text-sm md:text-xl flex items-start'><span><FaRegArrowAltCircleDown className=\"h-5 w-5  md:h-7 md:w-7 mr-2\" /></span><span>Masuk</span></h3>\n                <span className='font-semibold text-xs md:text-lg'>{formatCurrency(totalIncomePeriod)}</span>\n                </Card>\n                <Card className='bg-red-500 text-white w-1/3'>\n                <h3 className='font-bold text-sm md:text-xl flex items-start'><span><FaRegArrowAltCircleUp className=\"h-5 w-5  md:h-7 md:w-7 mr-2\" /></span><span>Keluar</span></h3>\n                <span className='font-semibold text-xs md:text-lg'>{formatCurrency(totalExpensePeriod)}</span>\n                </Card>\n            \n            </div>\n            {/* <div>{`Last Update: ${moment(lastUpdate).format('DD MMM yyyy')}`}</div> */}\n            <CustomThemeProviderSecond>\n              <div className=\"overflow-x-auto\">\n                  <Table>\n                      <Table.Head className='' >\n                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white'>Keterangan</Table.HeadCell>\n                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white'>Tanggal</Table.HeadCell>\n                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white '>Nominal</Table.HeadCell>\n                          <Table.HeadCell className='py-2 px-2 md:py-3 md:px-3 bg-cyan-600 text-white '></Table.HeadCell>\n                      </Table.Head>\n                      <Table.Body className=\"divide-y\">\n                        \n                      {/* {transactions && transactions.length > 0 && transactions[0] !== undefined ? (\n                          transactions.map((transaction, index) => (\n                              <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n                                      <span className='flex items-start'>\n                                      <span>{getTypeIcon(transaction.transaction_type)} </span>\n                                      <span className=\"ml-2\">{transaction.description}</span>\n                                      </span>\n                                  </Table.Cell>\n                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n                                      {moment(transaction.date, 'DD MMM YYYY').format('DD/MM/YY')}\n                                  </Table.Cell>\n                                  <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start  py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n                                      {formatCurrency(transaction.amount)}\n                                  </Table.Cell>\n                              </Table.Row>\n                          ))\n                          ) : (\n                          <Table.Row>\n                              <Table.Cell colSpan=\"3\" className=\"text-center\">Data tidak tersedia</Table.Cell>\n                          </Table.Row>\n                      )} */}\n\n                      \n                      \n                      </Table.Body>\n                  </Table>\n                  {/* {groupedTransactions? (\n                    <>\n                    {Object.keys(groupedTransactions).map((transactionType, index) => (\n                      <React.Fragment key={index}>\n                       {groupedTransactions[transactionType].length > 0 && (\n                          <Accordion>\n                            <Accordion.Panel>\n                              <Accordion.Title className='py-2 px-2 md:py-3 md:px-3 '>{transactionType === 'ipl' ? 'Pemasukan IPL' : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}</Accordion.Title>\n                              <Accordion.Panel>\n                                sds\n                              </Accordion.Panel>\n                            </Accordion.Panel>\n                          </Accordion>\n                       )}\n                      </React.Fragment>\n                    ))}\n                    </>\n                  ) :(\n                    <></>\n                  )} */}\n\n                  {/* {groupedTransactions? (\n                          <>\n                            {Object.keys(groupedTransactions).map((transactionType, index) => (\n                              <React.Fragment key={index}>\n                                \n                                {groupedTransactions[transactionType].length > 0 && (\n                                  <Table.Row>\n                                  <Table.Cell colSpan=\"4\" className='p-0'>\n                                  <Accordion collapseAll>\n                                  <Accordion.Panel className='rounded-none'>\n                                  <Accordion.Title className='py-2 px-2 md:py-3 md:px-3 '>{transactionType === 'ipl' ? 'Pemasukan IPL' : transactionType === 'income' ? 'Pemasukan Lainnya' : transactionType === 'expense' ? 'Pengeluaran' : ''}</Accordion.Title>\n                                    {groupedTransactions[transactionType].map((transaction, subIndex) =>(\n                                      <Accordion.Content key={subIndex} >\n                                        <Table  striped>\n                                        <Table.Body>\n                                        <Table.Row className=' border-gray-700 '>\n                                          <Table.Cell className={`${getTextColor(transaction.transaction_type)} items-start content-start py-2 px-2 md:py-3 md:px-3 text-xs md:text-base`}>\n                                              {`sadsa`}\n                                          </Table.Cell>\n                                        </Table.Row>\n                                        </Table.Body>\n                                        </Table>\n                                        \n                                      </Accordion.Content>\n                                    ))}\n                                  </Accordion.Panel>\n                                </Accordion>\n                                  </Table.Cell>\n                                  </Table.Row>\n                                  \n                                )}\n                              \n                              </React.Fragment>\n                            ))}\n                          </>\n                        ): (\n                          <Table.Row>\n                              <Table.Cell colSpan=\"4\" className=\"text-center\">Data belum tersedia</Table.Cell>\n                          </Table.Row>\n                        )} */}\n              </div>\n            </CustomThemeProviderSecond>\n            \n        </Card>\n    </CustomThemeProviderSecond>\n    </>\n  );\n}\n\nexport const getServerSideProps = async (context) => {\n    const session = await getSession(context);\n    \n    // if (!session) {\n    //     return {\n    //         redirect: {\n    //             destination: '/',\n    //             permanent: false,\n    //         },\n    //     };\n    // }\n  \n    try {\n        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/transactions/all`, {\n            // headers: {\n            //     Authorization: `Bearer ${session.accessToken}`,\n            // },\n        });\n        return {\n            props: {\n              initialTransaction: res.data.data,\n            },\n        };\n    } catch (error) {\n        console.error('Error fetching tra data:', error);\n        return {\n            props: {\n              initialTransaction: [],\n            },\n        };\n    }\n  };\n\nexport default Report;"
        }
    ]
}