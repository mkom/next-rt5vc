{
    "sourceFile": "components/dashboard/TransactionDrawer.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 46,
            "patches": [
                {
                    "date": 1722398974280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1722399132267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,350 @@\n+// components/TransactionDrawer.js\n+import { getSession, useSession } from 'next-auth/react';\n+import { useState, useEffect, useRef } from 'react';\n+import { Drawer, Button, Input, FileInput, Textarea, Label, TextInput, Dropdown,Alert } from 'flowbite-react';\n+import {FaCalendarAlt, FaMoneyBill, FaRegArrowAltCircleDown, FaRegArrowAltCircleUp } from 'react-icons/fa';\n+import { FaExchangeAlt } from \"react-icons/fa\";\n+import { AiOutlineLoading } from \"react-icons/ai\";\n+import axios from 'axios';\n+import Autocomplete from '../Autocomplete';\n+import DatePicker from 'react-datepicker';\n+import 'react-datepicker/dist/react-datepicker.css'\n+import Select from 'react-select';\n+import moment from 'moment';\n+import 'moment/locale/id';\n+import id from \"date-fns/locale/id\";\n+moment.locale('id');\n+\n+const TransactionDrawer = ({ isOpen, onClose, onSubmit, transactionType }) => {\n+  const [houseId, setHouseId] = useState('');\n+  const [houseName, setHouseName] = useState('');\n+  const [amount, setAmount] = useState('');\n+  const [description, setDescription] = useState('');\n+  const [proofOfTransfer, setProofOfTransfer] = useState('');\n+  const [relatedMonths, setRelatedMonths] = useState([]);\n+  const [status, setStatus] = useState('berhasil');\n+  const [houses, setHouses] = useState([]);\n+  const [selectedHouse, setSelectedHouse] = useState(null);\n+  const [paymentDate, setPaymentDate] = useState(new Date());\n+  const { data: session } = useSession();\n+  const [errors, setErrors] = useState({});\n+  const [uploadUrl, setUploadUrl] = useState('');\n+  const fileInputRef = useRef(null);\n+  const [isProcessing, setIsProcessing] = useState(false);\n+\n+  useEffect(() => {\n+    if (session) {\n+      const fetchHouses = async () => {\n+        try {\n+          const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/houses/all`, {\n+            headers: {\n+              Authorization: `Bearer ${session.accessToken}`,\n+            },\n+          });\n+          setHouses(res.data.map(house => ({\n+            value: house.house_id,\n+            label: house.house_id\n+          })));\n+        } catch (error) {\n+          console.error('Error fetching houses data:', error);\n+        }\n+      };\n+\n+      fetchHouses();\n+    }\n+  }, [session]);\n+\n+  useEffect(() => {\n+    if (transactionType === 'ipl') {\n+      if(relatedMonths.length > 0 && houseName ) {\n+        const monthLabels = relatedMonths.map(option => moment(option.value, \"YYYY-MM\").format(\"MMMM YYYY\")).join(', ');\n+        const descriptionText = `IPL Rumah ${houseName} periode ${monthLabels}`;\n+        setDescription(descriptionText);\n+      }\n+     \n+    }\n+  }, [houseId, relatedMonths, transactionType]);\n+\n+  const handleFileChange = (e) => {\n+    const file = e.target.files[0];\n+    if (file) {\n+        setProofOfTransfer(file); // Set file for upload\n+    }\n+  };\n+\n+  const handleFileUpload = async (file) => {\n+    const formData = new FormData();\n+    formData.append('file', file);\n+\n+    try {\n+        const response = await axios.post(`${process.env.NEXT_PUBLIC_API_URL}/upload`, formData, {\n+            headers: {\n+                'Content-Type': 'multipart/form-data',\n+            },\n+        });\n+        setUploadUrl(response.data.url);\n+        return response.data.url;\n+    } catch (error) {\n+        //console.error('Error uploading file:', error);\n+        //alert('Failed to upload file.');\n+        return null;\n+    }\n+ };\n+\n+  const handleSubmit = async (e) => {\n+    e.preventDefault();\n+    const newErrors = {};\n+\n+    if (!transactionType) newErrors.transactionType = 'Transaction type is required';\n+    if (!amount || amount <= 0) newErrors.amount = 'Amount must be a positive number';\n+    if (!description) newErrors.description = 'Description is required';\n+    if (!paymentDate) newErrors.paymentDate = 'Payment date is required';\n+    if (!relatedMonths) newErrors.relatedMonths = 'Months is required';\n+    if (transactionType === 'ipl' && !houseId) newErrors.houseId = 'House ID is required';\n+    if (transactionType === 'ipl' && !proofOfTransfer) newErrors.proofOfTransfer = 'Proof of transfer is required';\n+\n+    if (Object.keys(newErrors).length > 0) {\n+      setErrors(newErrors);\n+      return;\n+    }\n+\n+    setIsProcessing(true); // Start processing\n+\n+    let proofOfTransferUrl = uploadUrl;\n+    // If proofOfTransfer is a file that needs to be uploaded\n+    if (proofOfTransfer && proofOfTransfer instanceof File) {\n+      proofOfTransferUrl = await handleFileUpload(proofOfTransfer);\n+      if (!proofOfTransferUrl) return; // Abort if upload fails\n+    }\n+\n+    const convertStringToArray = (dateString) => {\n+      // Memisahkan string berdasarkan koma dan spasi\n+      const dateArray = dateString.split(', ').map(date => date.trim());\n+      return dateArray;\n+    };\n+\n+    const dateString = relatedMonths.map(option => option.value).join(', ');\n+    const dateArray = convertStringToArray(dateString);\n+\n+    //console.log(relatedMonths.map(option => option.value))\n+    const newTransaction = {\n+      transaction_type: transactionType,\n+      amount,\n+      description,\n+      proof_of_transfer: proofOfTransferUrl,\n+      houseId,\n+      related_months: dateArray,\n+      //relatedMonths:relatedMonths.map(option => moment(option.value, \"YYYY-MM\")).join(', '),\n+      paymentDate,\n+      status\n+    };\n+\n+   // console.log(newTransaction)\n+\n+    onSubmit(newTransaction);\n+    setHouseId('');\n+    setAmount('');\n+    setDescription('');\n+    setProofOfTransfer('');\n+    setRelatedMonths([]);\n+    setPaymentDate(new Date());\n+    setStatus('berhasil');\n+    fileInputRef.current.value = '';\n+    setIsProcessing(false); // Stop processing\n+    onClose();\n+  };\n+\n+  const handleHouseChange = (newValue) => {\n+    setHouseId(newValue);\n+  };\n+\n+  const handleHouseSelect = (selectedHouse) => {\n+    setHouseId(selectedHouse.value);\n+    setHouseName(selectedHouse.label)\n+    //setDescription(`IPL rumah ${selectedHouse.value} periode ${relatedMonths.join(', ')}`);\n+  };\n+\n+  const handleMonthChange = (selectedOptions) => {\n+    setRelatedMonths(selectedOptions || []);\n+  };\n+\n+  const generateMonthsOptions = () => {\n+    const options = [];\n+    const startYear = moment().year();\n+    const endYear = startYear + 2; // 2 tahun ke depan\n+\n+    for (let year = startYear; year <= endYear; year++) {\n+      for (let month = 0; month < 12; month++) {\n+        const value = moment().month(month).year(year).format(\"YYYY-MM\");\n+        const label = moment().month(month).year(year).format(\"MMMM YYYY\");\n+        options.push({ value, label });\n+      }\n+    }\n+    return options;\n+  };\n+\n+  const resetForm = () => {\n+    setHouseId('');\n+    setAmount('');\n+    setDescription('');\n+    setProofOfTransfer('');\n+    setRelatedMonths([]);\n+    setPaymentDate(new Date());\n+    setStatus('berhasil');\n+    fileInputRef.current.value = '';\n+    setErrors({});\n+  };\n+\n+ \n+\n+  return (\n+    <Drawer\n+      open={isOpen}\n+      onClose={() => {\n+        resetForm();\n+        onClose();\n+      }}\n+      position=\"right\"\n+      className=\"py-4 px-7 top-0 z-50 w-full md:w-2/4\"\n+    >\n+      <Drawer.Header title={`Transaksi ${transactionType === 'ipl' ? 'IPL' : transactionType === 'income' ? 'Masuk' : 'Keluar'}`} titleIcon={FaExchangeAlt} />\n+      <Drawer.Items>\n+        <form onSubmit={handleSubmit} className=\"space-y-4\">\n+          {transactionType === 'ipl' && (\n+            <>\n+              <div className=\"mb-6 mt-3\">\n+                <Label htmlFor=\"houseId\" className=\"mb-2 block\">No Rumah</Label>\n+                <Autocomplete\n+                  value={houseId}\n+                  onChange={handleHouseChange}\n+                  options={houses}\n+                  onSelect={handleHouseSelect}\n+                />\n+                {errors.houseId && <div className=\"text-red-500 text-sm\">{errors.houseId}</div>}\n+              </div>\n+\n+              <div className=\"mb-6 mt-3\">\n+                <Label htmlFor=\"relatedMonths\" className=\"mb-2 block\">Periode</Label>\n+                <Select\n+                 id=\"relatedMonths\"\n+                 isMulti\n+                 options={generateMonthsOptions()}\n+                 value={relatedMonths}\n+                 onChange={handleMonthChange}\n+                 placeholder=\"Pilih bulan\"\n+                 className='bg-gray-50'\n+                />\n+                {errors.relatedMonths && <div className=\"text-red-500 text-sm\">{errors.relatedMonths}</div>}\n+              </div>\n+            </>\n+          )}\n+\n+          <div className=\"mb-6 mt-3\">\n+            <Label htmlFor=\"description\" className=\"mb-2 block\">Deskripsi</Label>\n+            <Textarea\n+              id=\"description\"\n+              name=\"description\"\n+              value={description}\n+              onChange={(e) => setDescription(e.target.value)}\n+              placeholder=\"Masukkan deskripsi\"\n+              readOnly={transactionType === 'ipl'} // Make description read-only for IPL transactions\n+            />\n+            {errors.description && <div className=\"text-red-500 text-sm\">{errors.description}</div>}\n+          </div>\n+\n+          <div className=\"mb-6 mt-3\">\n+            <Label htmlFor=\"amount\" className=\"mb-2 block\">Jumlah</Label>\n+            <TextInput\n+              id=\"amount\"\n+              name=\"amount\"\n+              type=\"number\"\n+              value={amount}\n+              onChange={(e) => setAmount(e.target.value)}\n+              placeholder=\"Masukkan jumlah\"\n+            />\n+            {errors.amount && <div className=\"text-red-500 text-sm\">{errors.amount}</div>}\n+          </div>\n+\n+          <div className=\"mb-6 mt-3\">\n+            <Label htmlFor=\"payment_type\" className=\"mb-2 block\">Tipe Pembayaran</Label>\n+              <Select\n+                id=\"payment_type\"\n+                isMulti\n+                options={generateMonthsOptions()}\n+                value={relatedMonths}\n+                onChange={handleMonthChange}\n+                placeholder=\"Cash atau Transfer\"\n+                className='bg-gray-50'\n+              />\n+            {/* {errors.amount && <div className=\"text-red-500 text-sm\">{errors.amount}</div>} */}\n+          </div>\n+\n+          <div className=\"mb-6 mt-3\">\n+              <Label htmlFor=\"proofOfTransfer\" className=\"mb-2 block\">Lampiran</Label>\n+              <FileInput \n+                id=\"file\" \n+                onChange={handleFileChange} \n+                accept=\".jpg,.png,.pdf\"\n+                ref={fileInputRef}\n+              />\n+              <TextInput\n+                id=\"proofOfTransfer\"\n+                name=\"proofOfTransfer\"\n+                value={proofOfTransfer}\n+                onChange={(e) => setProofOfTransfer(e.target.value)}\n+                placeholder=\"Masukkan URL lampiran\"\n+                className='hidden'\n+              />\n+              {errors.proofOfTransfer && <div className=\"text-red-500 text-sm\">{errors.proofOfTransfer}</div>}\n+            </div>\n+\n+          <div className=\"mb-6 mt-3\">\n+            <Label htmlFor=\"paymentDate\" className=\"mb-2 block\">Tanggal Pembayaran</Label>\n+            <div className='flex items-center w-72 relative border border-gray-300 rounded-md shadow-sm bg-gray-50'>\n+            <FaCalendarAlt className=\"absolute h-5 w-5 left-2 z-50 top-1/2 transform -translate-y-1/2 text-gray-500\" />\n+            <DatePicker\n+              locale={id}\n+              id=\"paymentDate\"\n+              name=\"paymentDate\"\n+              selected={paymentDate}\n+              onChange={(date) => setPaymentDate(date)}\n+              dateFormat=\"dd MMMM yyyy\"\n+              calendarClassName=\"light-blue-stripes\"\n+              placeholderText=\"Pilih tanggal\"\n+              className=\"block w-full pl-8 text-sm text-gray-900  border-gray-300 border-none rounded-md py-2 px-4 focus:ring-0 bg-gray-50\"\n+            />\n+            </div>\n+            {errors.paymentDate && <div className=\"text-red-500 text-sm\">{errors.paymentDate}</div>}\n+            \n+          </div>\n+\n+          <div className='flex gap-2'>\n+            <Button \n+            type=\"submit\" \n+            color={transactionType === 'ipl' ? 'success' : transactionType === 'income' ? 'blue' : 'failure'}\n+            disabled={isProcessing}\n+            >\n+              {isProcessing && <AiOutlineLoading className=\"h-5 w-5 animate-spin mr-2\" />}\n+              {transactionType === 'ipl' && <FaExchangeAlt className=\"mr-2 h-5 w-5\" />}\n+              {transactionType === 'income' && <FaRegArrowAltCircleDown className=\"mr-2 h-5 w-5\" />}\n+              {transactionType === 'expense' && <FaRegArrowAltCircleUp className=\"mr-2 h-5 w-5\" />}\n+              Simpan\n+            </Button>\n+            <Button\n+              type=\"button\"\n+              color=\"gray\"\n+              onClick={() => {\n+                resetForm();\n+                onClose();\n+              }}\n+            >\n+              Batal\n+            </Button>\n+          </div>\n+        </form>\n+      </Drawer.Items>\n+    </Drawer>\n+  );\n+};\n+\n+export default TransactionDrawer;\n"
                },
                {
                    "date": 1722399147810,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -269,11 +269,11 @@\n             <Label htmlFor=\"payment_type\" className=\"mb-2 block\">Tipe Pembayaran</Label>\n               <Select\n                 id=\"payment_type\"\n                 isMulti\n-                options={generateMonthsOptions()}\n-                value={relatedMonths}\n-                onChange={handleMonthChange}\n+                options={''}\n+                value={''}\n+                onChange={''}\n                 placeholder=\"Cash atau Transfer\"\n                 className='bg-gray-50'\n               />\n             {/* {errors.amount && <div className=\"text-red-500 text-sm\">{errors.amount}</div>} */}\n@@ -347,349 +347,4 @@\n   );\n };\n \n export default TransactionDrawer;\n-// components/TransactionDrawer.js\n-import { getSession, useSession } from 'next-auth/react';\n-import { useState, useEffect, useRef } from 'react';\n-import { Drawer, Button, Input, FileInput, Textarea, Label, TextInput, Dropdown,Alert } from 'flowbite-react';\n-import {FaCalendarAlt, FaMoneyBill, FaRegArrowAltCircleDown, FaRegArrowAltCircleUp } from 'react-icons/fa';\n-import { FaExchangeAlt } from \"react-icons/fa\";\n-import { AiOutlineLoading } from \"react-icons/ai\";\n-import axios from 'axios';\n-import Autocomplete from '../Autocomplete';\n-import DatePicker from 'react-datepicker';\n-import 'react-datepicker/dist/react-datepicker.css'\n-import Select from 'react-select';\n-import moment from 'moment';\n-import 'moment/locale/id';\n-import id from \"date-fns/locale/id\";\n-moment.locale('id');\n-\n-const TransactionDrawer = ({ isOpen, onClose, onSubmit, transactionType }) => {\n-  const [houseId, setHouseId] = useState('');\n-  const [houseName, setHouseName] = useState('');\n-  const [amount, setAmount] = useState('');\n-  const [description, setDescription] = useState('');\n-  const [proofOfTransfer, setProofOfTransfer] = useState('');\n-  const [relatedMonths, setRelatedMonths] = useState([]);\n-  const [status, setStatus] = useState('berhasil');\n-  const [houses, setHouses] = useState([]);\n-  const [selectedHouse, setSelectedHouse] = useState(null);\n-  const [paymentDate, setPaymentDate] = useState(new Date());\n-  const { data: session } = useSession();\n-  const [errors, setErrors] = useState({});\n-  const [uploadUrl, setUploadUrl] = useState('');\n-  const fileInputRef = useRef(null);\n-  const [isProcessing, setIsProcessing] = useState(false);\n-\n-  useEffect(() => {\n-    if (session) {\n-      const fetchHouses = async () => {\n-        try {\n-          const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/houses/all`, {\n-            headers: {\n-              Authorization: `Bearer ${session.accessToken}`,\n-            },\n-          });\n-          setHouses(res.data.map(house => ({\n-            value: house.house_id,\n-            label: house.house_id\n-          })));\n-        } catch (error) {\n-          console.error('Error fetching houses data:', error);\n-        }\n-      };\n-\n-      fetchHouses();\n-    }\n-  }, [session]);\n-\n-  useEffect(() => {\n-    if (transactionType === 'ipl') {\n-      if(relatedMonths.length > 0 && houseName ) {\n-        const monthLabels = relatedMonths.map(option => moment(option.value, \"YYYY-MM\").format(\"MMMM YYYY\")).join(', ');\n-        const descriptionText = `IPL Rumah ${houseName} periode ${monthLabels}`;\n-        setDescription(descriptionText);\n-      }\n-     \n-    }\n-  }, [houseId, relatedMonths, transactionType]);\n-\n-  const handleFileChange = (e) => {\n-    const file = e.target.files[0];\n-    if (file) {\n-        setProofOfTransfer(file); // Set file for upload\n-    }\n-  };\n-\n-  const handleFileUpload = async (file) => {\n-    const formData = new FormData();\n-    formData.append('file', file);\n-\n-    try {\n-        const response = await axios.post(`${process.env.NEXT_PUBLIC_API_URL}/upload`, formData, {\n-            headers: {\n-                'Content-Type': 'multipart/form-data',\n-            },\n-        });\n-        setUploadUrl(response.data.url);\n-        return response.data.url;\n-    } catch (error) {\n-        //console.error('Error uploading file:', error);\n-        //alert('Failed to upload file.');\n-        return null;\n-    }\n- };\n-\n-  const handleSubmit = async (e) => {\n-    e.preventDefault();\n-    const newErrors = {};\n-\n-    if (!transactionType) newErrors.transactionType = 'Transaction type is required';\n-    if (!amount || amount <= 0) newErrors.amount = 'Amount must be a positive number';\n-    if (!description) newErrors.description = 'Description is required';\n-    if (!paymentDate) newErrors.paymentDate = 'Payment date is required';\n-    if (!relatedMonths) newErrors.relatedMonths = 'Months is required';\n-    if (transactionType === 'ipl' && !houseId) newErrors.houseId = 'House ID is required';\n-    if (transactionType === 'ipl' && !proofOfTransfer) newErrors.proofOfTransfer = 'Proof of transfer is required';\n-\n-    if (Object.keys(newErrors).length > 0) {\n-      setErrors(newErrors);\n-      return;\n-    }\n-\n-    setIsProcessing(true); // Start processing\n-\n-    let proofOfTransferUrl = uploadUrl;\n-    // If proofOfTransfer is a file that needs to be uploaded\n-    if (proofOfTransfer && proofOfTransfer instanceof File) {\n-      proofOfTransferUrl = await handleFileUpload(proofOfTransfer);\n-      if (!proofOfTransferUrl) return; // Abort if upload fails\n-    }\n-\n-    const convertStringToArray = (dateString) => {\n-      // Memisahkan string berdasarkan koma dan spasi\n-      const dateArray = dateString.split(', ').map(date => date.trim());\n-      return dateArray;\n-    };\n-\n-    const dateString = relatedMonths.map(option => option.value).join(', ');\n-    const dateArray = convertStringToArray(dateString);\n-\n-    //console.log(relatedMonths.map(option => option.value))\n-    const newTransaction = {\n-      transaction_type: transactionType,\n-      amount,\n-      description,\n-      proof_of_transfer: proofOfTransferUrl,\n-      houseId,\n-      related_months: dateArray,\n-      //relatedMonths:relatedMonths.map(option => moment(option.value, \"YYYY-MM\")).join(', '),\n-      paymentDate,\n-      status\n-    };\n-\n-   // console.log(newTransaction)\n-\n-    onSubmit(newTransaction);\n-    setHouseId('');\n-    setAmount('');\n-    setDescription('');\n-    setProofOfTransfer('');\n-    setRelatedMonths([]);\n-    setPaymentDate(new Date());\n-    setStatus('berhasil');\n-    fileInputRef.current.value = '';\n-    setIsProcessing(false); // Stop processing\n-    onClose();\n-  };\n-\n-  const handleHouseChange = (newValue) => {\n-    setHouseId(newValue);\n-  };\n-\n-  const handleHouseSelect = (selectedHouse) => {\n-    setHouseId(selectedHouse.value);\n-    setHouseName(selectedHouse.label)\n-    //setDescription(`IPL rumah ${selectedHouse.value} periode ${relatedMonths.join(', ')}`);\n-  };\n-\n-  const handleMonthChange = (selectedOptions) => {\n-    setRelatedMonths(selectedOptions || []);\n-  };\n-\n-  const generateMonthsOptions = () => {\n-    const options = [];\n-    const startYear = moment().year();\n-    const endYear = startYear + 2; // 2 tahun ke depan\n-\n-    for (let year = startYear; year <= endYear; year++) {\n-      for (let month = 0; month < 12; month++) {\n-        const value = moment().month(month).year(year).format(\"YYYY-MM\");\n-        const label = moment().month(month).year(year).format(\"MMMM YYYY\");\n-        options.push({ value, label });\n-      }\n-    }\n-    return options;\n-  };\n-\n-  const resetForm = () => {\n-    setHouseId('');\n-    setAmount('');\n-    setDescription('');\n-    setProofOfTransfer('');\n-    setRelatedMonths([]);\n-    setPaymentDate(new Date());\n-    setStatus('berhasil');\n-    fileInputRef.current.value = '';\n-    setErrors({});\n-  };\n-\n- \n-\n-  return (\n-    <Drawer\n-      open={isOpen}\n-      onClose={() => {\n-        resetForm();\n-        onClose();\n-      }}\n-      position=\"right\"\n-      className=\"py-4 px-7 top-0 z-50 w-full md:w-2/4\"\n-    >\n-      <Drawer.Header title={`Transaksi ${transactionType === 'ipl' ? 'IPL' : transactionType === 'income' ? 'Masuk' : 'Keluar'}`} titleIcon={FaExchangeAlt} />\n-      <Drawer.Items>\n-        <form onSubmit={handleSubmit} className=\"space-y-4\">\n-          {transactionType === 'ipl' && (\n-            <>\n-              <div className=\"mb-6 mt-3\">\n-                <Label htmlFor=\"houseId\" className=\"mb-2 block\">No Rumah</Label>\n-                <Autocomplete\n-                  value={houseId}\n-                  onChange={handleHouseChange}\n-                  options={houses}\n-                  onSelect={handleHouseSelect}\n-                />\n-                {errors.houseId && <div className=\"text-red-500 text-sm\">{errors.houseId}</div>}\n-              </div>\n-\n-              <div className=\"mb-6 mt-3\">\n-                <Label htmlFor=\"relatedMonths\" className=\"mb-2 block\">Periode</Label>\n-                <Select\n-                 id=\"relatedMonths\"\n-                 isMulti\n-                 options={generateMonthsOptions()}\n-                 value={relatedMonths}\n-                 onChange={handleMonthChange}\n-                 placeholder=\"Pilih bulan\"\n-                 className='bg-gray-50'\n-                />\n-                {errors.relatedMonths && <div className=\"text-red-500 text-sm\">{errors.relatedMonths}</div>}\n-              </div>\n-            </>\n-          )}\n-\n-          <div className=\"mb-6 mt-3\">\n-            <Label htmlFor=\"description\" className=\"mb-2 block\">Deskripsi</Label>\n-            <Textarea\n-              id=\"description\"\n-              name=\"description\"\n-              value={description}\n-              onChange={(e) => setDescription(e.target.value)}\n-              placeholder=\"Masukkan deskripsi\"\n-              readOnly={transactionType === 'ipl'} // Make description read-only for IPL transactions\n-            />\n-            {errors.description && <div className=\"text-red-500 text-sm\">{errors.description}</div>}\n-          </div>\n-\n-          <div className=\"mb-6 mt-3\">\n-            <Label htmlFor=\"amount\" className=\"mb-2 block\">Jumlah</Label>\n-            <TextInput\n-              id=\"amount\"\n-              name=\"amount\"\n-              type=\"number\"\n-              value={amount}\n-              onChange={(e) => setAmount(e.target.value)}\n-              placeholder=\"Masukkan jumlah\"\n-            />\n-            {errors.amount && <div className=\"text-red-500 text-sm\">{errors.amount}</div>}\n-          </div>\n-\n-          <div className=\"mb-6 mt-3\">\n-            <Label htmlFor=\"payment_type\" className=\"mb-2 block\">Tipe Pembayaran</Label>\n-            <Select id=\"payment_type\" required>\n-              <option>Transfer</option>\n-              <option>Cash</option>\n-            </Select>\n-            {errors.amount && <div className=\"text-red-500 text-sm\">{errors.amount}</div>}\n-          </div>\n-\n-          <div className=\"mb-6 mt-3\">\n-              <Label htmlFor=\"proofOfTransfer\" className=\"mb-2 block\">Lampiran</Label>\n-              <FileInput \n-                id=\"file\" \n-                onChange={handleFileChange} \n-                accept=\".jpg,.png,.pdf\"\n-                ref={fileInputRef}\n-              />\n-              <TextInput\n-                id=\"proofOfTransfer\"\n-                name=\"proofOfTransfer\"\n-                value={proofOfTransfer}\n-                onChange={(e) => setProofOfTransfer(e.target.value)}\n-                placeholder=\"Masukkan URL lampiran\"\n-                className='hidden'\n-              />\n-              {errors.proofOfTransfer && <div className=\"text-red-500 text-sm\">{errors.proofOfTransfer}</div>}\n-            </div>\n-\n-          <div className=\"mb-6 mt-3\">\n-            <Label htmlFor=\"paymentDate\" className=\"mb-2 block\">Tanggal Pembayaran</Label>\n-            <div className='flex items-center w-72 relative border border-gray-300 rounded-md shadow-sm bg-gray-50'>\n-            <FaCalendarAlt className=\"absolute h-5 w-5 left-2 z-50 top-1/2 transform -translate-y-1/2 text-gray-500\" />\n-            <DatePicker\n-              locale={id}\n-              id=\"paymentDate\"\n-              name=\"paymentDate\"\n-              selected={paymentDate}\n-              onChange={(date) => setPaymentDate(date)}\n-              dateFormat=\"dd MMMM yyyy\"\n-              calendarClassName=\"light-blue-stripes\"\n-              placeholderText=\"Pilih tanggal\"\n-              className=\"block w-full pl-8 text-sm text-gray-900  border-gray-300 border-none rounded-md py-2 px-4 focus:ring-0 bg-gray-50\"\n-            />\n-            </div>\n-            {errors.paymentDate && <div className=\"text-red-500 text-sm\">{errors.paymentDate}</div>}\n-            \n-          </div>\n-\n-          <div className='flex gap-2'>\n-            <Button \n-            type=\"submit\" \n-            color={transactionType === 'ipl' ? 'success' : transactionType === 'income' ? 'blue' : 'failure'}\n-            disabled={isProcessing}\n-            >\n-              {isProcessing && <AiOutlineLoading className=\"h-5 w-5 animate-spin mr-2\" />}\n-              {transactionType === 'ipl' && <FaExchangeAlt className=\"mr-2 h-5 w-5\" />}\n-              {transactionType === 'income' && <FaRegArrowAltCircleDown className=\"mr-2 h-5 w-5\" />}\n-              {transactionType === 'expense' && <FaRegArrowAltCircleUp className=\"mr-2 h-5 w-5\" />}\n-              Simpan\n-            </Button>\n-            <Button\n-              type=\"button\"\n-              color=\"gray\"\n-              onClick={() => {\n-                resetForm();\n-                onClose();\n-              }}\n-            >\n-              Batal\n-            </Button>\n-          </div>\n-        </form>\n-      </Drawer.Items>\n-    </Drawer>\n-  );\n-};\n-\n-export default TransactionDrawer;\n"
                },
                {
                    "date": 1722399184310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,350 @@\n+// components/TransactionDrawer.js\n+import { getSession, useSession } from 'next-auth/react';\n+import { useState, useEffect, useRef } from 'react';\n+import { Drawer, Button, Input, FileInput, Textarea, Label, TextInput, Dropdown,Alert } from 'flowbite-react';\n+import {FaCalendarAlt, FaMoneyBill, FaRegArrowAltCircleDown, FaRegArrowAltCircleUp } from 'react-icons/fa';\n+import { FaExchangeAlt } from \"react-icons/fa\";\n+import { AiOutlineLoading } from \"react-icons/ai\";\n+import axios from 'axios';\n+import Autocomplete from '../Autocomplete';\n+import DatePicker from 'react-datepicker';\n+import 'react-datepicker/dist/react-datepicker.css'\n+import Select from 'react-select';\n+import moment from 'moment';\n+import 'moment/locale/id';\n+import id from \"date-fns/locale/id\";\n+moment.locale('id');\n+\n+const TransactionDrawer = ({ isOpen, onClose, onSubmit, transactionType }) => {\n+  const [houseId, setHouseId] = useState('');\n+  const [houseName, setHouseName] = useState('');\n+  const [amount, setAmount] = useState('');\n+  const [description, setDescription] = useState('');\n+  const [proofOfTransfer, setProofOfTransfer] = useState('');\n+  const [relatedMonths, setRelatedMonths] = useState([]);\n+  const [status, setStatus] = useState('berhasil');\n+  const [houses, setHouses] = useState([]);\n+  const [selectedHouse, setSelectedHouse] = useState(null);\n+  const [paymentDate, setPaymentDate] = useState(new Date());\n+  const { data: session } = useSession();\n+  const [errors, setErrors] = useState({});\n+  const [uploadUrl, setUploadUrl] = useState('');\n+  const fileInputRef = useRef(null);\n+  const [isProcessing, setIsProcessing] = useState(false);\n+\n+  useEffect(() => {\n+    if (session) {\n+      const fetchHouses = async () => {\n+        try {\n+          const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/houses/all`, {\n+            headers: {\n+              Authorization: `Bearer ${session.accessToken}`,\n+            },\n+          });\n+          setHouses(res.data.map(house => ({\n+            value: house.house_id,\n+            label: house.house_id\n+          })));\n+        } catch (error) {\n+          console.error('Error fetching houses data:', error);\n+        }\n+      };\n+\n+      fetchHouses();\n+    }\n+  }, [session]);\n+\n+  useEffect(() => {\n+    if (transactionType === 'ipl') {\n+      if(relatedMonths.length > 0 && houseName ) {\n+        const monthLabels = relatedMonths.map(option => moment(option.value, \"YYYY-MM\").format(\"MMMM YYYY\")).join(', ');\n+        const descriptionText = `IPL Rumah ${houseName} periode ${monthLabels}`;\n+        setDescription(descriptionText);\n+      }\n+     \n+    }\n+  }, [houseId, relatedMonths, transactionType]);\n+\n+  const handleFileChange = (e) => {\n+    const file = e.target.files[0];\n+    if (file) {\n+        setProofOfTransfer(file); // Set file for upload\n+    }\n+  };\n+\n+  const handleFileUpload = async (file) => {\n+    const formData = new FormData();\n+    formData.append('file', file);\n+\n+    try {\n+        const response = await axios.post(`${process.env.NEXT_PUBLIC_API_URL}/upload`, formData, {\n+            headers: {\n+                'Content-Type': 'multipart/form-data',\n+            },\n+        });\n+        setUploadUrl(response.data.url);\n+        return response.data.url;\n+    } catch (error) {\n+        //console.error('Error uploading file:', error);\n+        //alert('Failed to upload file.');\n+        return null;\n+    }\n+ };\n+\n+  const handleSubmit = async (e) => {\n+    e.preventDefault();\n+    const newErrors = {};\n+\n+    if (!transactionType) newErrors.transactionType = 'Transaction type is required';\n+    if (!amount || amount <= 0) newErrors.amount = 'Amount must be a positive number';\n+    if (!description) newErrors.description = 'Description is required';\n+    if (!paymentDate) newErrors.paymentDate = 'Payment date is required';\n+    if (!relatedMonths) newErrors.relatedMonths = 'Months is required';\n+    if (transactionType === 'ipl' && !houseId) newErrors.houseId = 'House ID is required';\n+    if (transactionType === 'ipl' && !proofOfTransfer) newErrors.proofOfTransfer = 'Proof of transfer is required';\n+\n+    if (Object.keys(newErrors).length > 0) {\n+      setErrors(newErrors);\n+      return;\n+    }\n+\n+    setIsProcessing(true); // Start processing\n+\n+    let proofOfTransferUrl = uploadUrl;\n+    // If proofOfTransfer is a file that needs to be uploaded\n+    if (proofOfTransfer && proofOfTransfer instanceof File) {\n+      proofOfTransferUrl = await handleFileUpload(proofOfTransfer);\n+      if (!proofOfTransferUrl) return; // Abort if upload fails\n+    }\n+\n+    const convertStringToArray = (dateString) => {\n+      // Memisahkan string berdasarkan koma dan spasi\n+      const dateArray = dateString.split(', ').map(date => date.trim());\n+      return dateArray;\n+    };\n+\n+    const dateString = relatedMonths.map(option => option.value).join(', ');\n+    const dateArray = convertStringToArray(dateString);\n+\n+    //console.log(relatedMonths.map(option => option.value))\n+    const newTransaction = {\n+      transaction_type: transactionType,\n+      amount,\n+      description,\n+      proof_of_transfer: proofOfTransferUrl,\n+      houseId,\n+      related_months: dateArray,\n+      //relatedMonths:relatedMonths.map(option => moment(option.value, \"YYYY-MM\")).join(', '),\n+      paymentDate,\n+      status\n+    };\n+\n+   // console.log(newTransaction)\n+\n+    onSubmit(newTransaction);\n+    setHouseId('');\n+    setAmount('');\n+    setDescription('');\n+    setProofOfTransfer('');\n+    setRelatedMonths([]);\n+    setPaymentDate(new Date());\n+    setStatus('berhasil');\n+    fileInputRef.current.value = '';\n+    setIsProcessing(false); // Stop processing\n+    onClose();\n+  };\n+\n+  const handleHouseChange = (newValue) => {\n+    setHouseId(newValue);\n+  };\n+\n+  const handleHouseSelect = (selectedHouse) => {\n+    setHouseId(selectedHouse.value);\n+    setHouseName(selectedHouse.label)\n+    //setDescription(`IPL rumah ${selectedHouse.value} periode ${relatedMonths.join(', ')}`);\n+  };\n+\n+  const handleMonthChange = (selectedOptions) => {\n+    setRelatedMonths(selectedOptions || []);\n+  };\n+\n+  const generateMonthsOptions = () => {\n+    const options = [];\n+    const startYear = moment().year();\n+    const endYear = startYear + 2; // 2 tahun ke depan\n+\n+    for (let year = startYear; year <= endYear; year++) {\n+      for (let month = 0; month < 12; month++) {\n+        const value = moment().month(month).year(year).format(\"YYYY-MM\");\n+        const label = moment().month(month).year(year).format(\"MMMM YYYY\");\n+        options.push({ value, label });\n+      }\n+    }\n+    return options;\n+  };\n+\n+  const resetForm = () => {\n+    setHouseId('');\n+    setAmount('');\n+    setDescription('');\n+    setProofOfTransfer('');\n+    setRelatedMonths([]);\n+    setPaymentDate(new Date());\n+    setStatus('berhasil');\n+    fileInputRef.current.value = '';\n+    setErrors({});\n+  };\n+\n+ \n+\n+  return (\n+    <Drawer\n+      open={isOpen}\n+      onClose={() => {\n+        resetForm();\n+        onClose();\n+      }}\n+      position=\"right\"\n+      className=\"py-4 px-7 top-0 z-50 w-full md:w-2/4\"\n+    >\n+      <Drawer.Header title={`Transaksi ${transactionType === 'ipl' ? 'IPL' : transactionType === 'income' ? 'Masuk' : 'Keluar'}`} titleIcon={FaExchangeAlt} />\n+      <Drawer.Items>\n+        <form onSubmit={handleSubmit} className=\"space-y-4\">\n+          {transactionType === 'ipl' && (\n+            <>\n+              <div className=\"mb-6 mt-3\">\n+                <Label htmlFor=\"houseId\" className=\"mb-2 block\">No Rumah</Label>\n+                <Autocomplete\n+                  value={houseId}\n+                  onChange={handleHouseChange}\n+                  options={houses}\n+                  onSelect={handleHouseSelect}\n+                />\n+                {errors.houseId && <div className=\"text-red-500 text-sm\">{errors.houseId}</div>}\n+              </div>\n+\n+              <div className=\"mb-6 mt-3\">\n+                <Label htmlFor=\"relatedMonths\" className=\"mb-2 block\">Periode</Label>\n+                <Select\n+                 id=\"relatedMonths\"\n+                 isMulti\n+                 options={generateMonthsOptions()}\n+                 value={relatedMonths}\n+                 onChange={handleMonthChange}\n+                 placeholder=\"Pilih bulan\"\n+                 className='bg-gray-50'\n+                />\n+                {errors.relatedMonths && <div className=\"text-red-500 text-sm\">{errors.relatedMonths}</div>}\n+              </div>\n+            </>\n+          )}\n+\n+          <div className=\"mb-6 mt-3\">\n+            <Label htmlFor=\"description\" className=\"mb-2 block\">Deskripsi</Label>\n+            <Textarea\n+              id=\"description\"\n+              name=\"description\"\n+              value={description}\n+              onChange={(e) => setDescription(e.target.value)}\n+              placeholder=\"Masukkan deskripsi\"\n+              readOnly={transactionType === 'ipl'} // Make description read-only for IPL transactions\n+            />\n+            {errors.description && <div className=\"text-red-500 text-sm\">{errors.description}</div>}\n+          </div>\n+\n+          <div className=\"mb-6 mt-3\">\n+            <Label htmlFor=\"amount\" className=\"mb-2 block\">Jumlah</Label>\n+            <TextInput\n+              id=\"amount\"\n+              name=\"amount\"\n+              type=\"number\"\n+              value={amount}\n+              onChange={(e) => setAmount(e.target.value)}\n+              placeholder=\"Masukkan jumlah\"\n+            />\n+            {errors.amount && <div className=\"text-red-500 text-sm\">{errors.amount}</div>}\n+          </div>\n+\n+          <div className=\"mb-6 mt-3\">\n+            <Label htmlFor=\"payment_type\" className=\"mb-2 block\">Tipe Pembayaran</Label>\n+              <Select\n+                id=\"payment_type\"\n+                isMulti\n+                options={''}\n+                value={''}\n+                onChange={''}\n+                placeholder=\"Cash atau Transfer\"\n+                className='bg-gray-50 text-sm'\n+              />\n+            {/* {errors.amount && <div className=\"text-red-500 text-sm\">{errors.amount}</div>} */}\n+          </div>\n+\n+          <div className=\"mb-6 mt-3\">\n+              <Label htmlFor=\"proofOfTransfer\" className=\"mb-2 block\">Lampiran</Label>\n+              <FileInput \n+                id=\"file\" \n+                onChange={handleFileChange} \n+                accept=\".jpg,.png,.pdf\"\n+                ref={fileInputRef}\n+              />\n+              <TextInput\n+                id=\"proofOfTransfer\"\n+                name=\"proofOfTransfer\"\n+                value={proofOfTransfer}\n+                onChange={(e) => setProofOfTransfer(e.target.value)}\n+                placeholder=\"Masukkan URL lampiran\"\n+                className='hidden'\n+              />\n+              {errors.proofOfTransfer && <div className=\"text-red-500 text-sm\">{errors.proofOfTransfer}</div>}\n+            </div>\n+\n+          <div className=\"mb-6 mt-3\">\n+            <Label htmlFor=\"paymentDate\" className=\"mb-2 block\">Tanggal Pembayaran</Label>\n+            <div className='flex items-center w-72 relative border border-gray-300 rounded-md shadow-sm bg-gray-50'>\n+            <FaCalendarAlt className=\"absolute h-5 w-5 left-2 z-50 top-1/2 transform -translate-y-1/2 text-gray-500\" />\n+            <DatePicker\n+              locale={id}\n+              id=\"paymentDate\"\n+              name=\"paymentDate\"\n+              selected={paymentDate}\n+              onChange={(date) => setPaymentDate(date)}\n+              dateFormat=\"dd MMMM yyyy\"\n+              calendarClassName=\"light-blue-stripes\"\n+              placeholderText=\"Pilih tanggal\"\n+              className=\"block w-full pl-8 text-sm text-gray-900  border-gray-300 border-none rounded-md py-2 px-4 focus:ring-0 bg-gray-50\"\n+            />\n+            </div>\n+            {errors.paymentDate && <div className=\"text-red-500 text-sm\">{errors.paymentDate}</div>}\n+            \n+          </div>\n+\n+          <div className='flex gap-2'>\n+            <Button \n+            type=\"submit\" \n+            color={transactionType === 'ipl' ? 'success' : transactionType === 'income' ? 'blue' : 'failure'}\n+            disabled={isProcessing}\n+            >\n+              {isProcessing && <AiOutlineLoading className=\"h-5 w-5 animate-spin mr-2\" />}\n+              {transactionType === 'ipl' && <FaExchangeAlt className=\"mr-2 h-5 w-5\" />}\n+              {transactionType === 'income' && <FaRegArrowAltCircleDown className=\"mr-2 h-5 w-5\" />}\n+              {transactionType === 'expense' && <FaRegArrowAltCircleUp className=\"mr-2 h-5 w-5\" />}\n+              Simpan\n+            </Button>\n+            <Button\n+              type=\"button\"\n+              color=\"gray\"\n+              onClick={() => {\n+                resetForm();\n+                onClose();\n+              }}\n+            >\n+              Batal\n+            </Button>\n+          </div>\n+        </form>\n+      </Drawer.Items>\n+    </Drawer>\n+  );\n+};\n+\n+export default TransactionDrawer;\n"
                },
                {
                    "date": 1722399190564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -273,9 +273,9 @@\n                 options={''}\n                 value={''}\n                 onChange={''}\n                 placeholder=\"Cash atau Transfer\"\n-                className='bg-gray-50 text-sm'\n+                className='bg-gray-50 text-md'\n               />\n             {/* {errors.amount && <div className=\"text-red-500 text-sm\">{errors.amount}</div>} */}\n           </div>\n \n@@ -347,354 +347,4 @@\n   );\n };\n \n export default TransactionDrawer;\n-// components/TransactionDrawer.js\n-import { getSession, useSession } from 'next-auth/react';\n-import { useState, useEffect, useRef } from 'react';\n-import { Drawer, Button, Input, FileInput, Textarea, Label, TextInput, Dropdown,Alert } from 'flowbite-react';\n-import {FaCalendarAlt, FaMoneyBill, FaRegArrowAltCircleDown, FaRegArrowAltCircleUp } from 'react-icons/fa';\n-import { FaExchangeAlt } from \"react-icons/fa\";\n-import { AiOutlineLoading } from \"react-icons/ai\";\n-import axios from 'axios';\n-import Autocomplete from '../Autocomplete';\n-import DatePicker from 'react-datepicker';\n-import 'react-datepicker/dist/react-datepicker.css'\n-import Select from 'react-select';\n-import moment from 'moment';\n-import 'moment/locale/id';\n-import id from \"date-fns/locale/id\";\n-moment.locale('id');\n-\n-const TransactionDrawer = ({ isOpen, onClose, onSubmit, transactionType }) => {\n-  const [houseId, setHouseId] = useState('');\n-  const [houseName, setHouseName] = useState('');\n-  const [amount, setAmount] = useState('');\n-  const [description, setDescription] = useState('');\n-  const [proofOfTransfer, setProofOfTransfer] = useState('');\n-  const [relatedMonths, setRelatedMonths] = useState([]);\n-  const [status, setStatus] = useState('berhasil');\n-  const [houses, setHouses] = useState([]);\n-  const [selectedHouse, setSelectedHouse] = useState(null);\n-  const [paymentDate, setPaymentDate] = useState(new Date());\n-  const { data: session } = useSession();\n-  const [errors, setErrors] = useState({});\n-  const [uploadUrl, setUploadUrl] = useState('');\n-  const fileInputRef = useRef(null);\n-  const [isProcessing, setIsProcessing] = useState(false);\n-\n-  useEffect(() => {\n-    if (session) {\n-      const fetchHouses = async () => {\n-        try {\n-          const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/houses/all`, {\n-            headers: {\n-              Authorization: `Bearer ${session.accessToken}`,\n-            },\n-          });\n-          setHouses(res.data.map(house => ({\n-            value: house.house_id,\n-            label: house.house_id\n-          })));\n-        } catch (error) {\n-          console.error('Error fetching houses data:', error);\n-        }\n-      };\n-\n-      fetchHouses();\n-    }\n-  }, [session]);\n-\n-  useEffect(() => {\n-    if (transactionType === 'ipl') {\n-      if(relatedMonths.length > 0 && houseName ) {\n-        const monthLabels = relatedMonths.map(option => moment(option.value, \"YYYY-MM\").format(\"MMMM YYYY\")).join(', ');\n-        const descriptionText = `IPL Rumah ${houseName} periode ${monthLabels}`;\n-        setDescription(descriptionText);\n-      }\n-     \n-    }\n-  }, [houseId, relatedMonths, transactionType]);\n-\n-  const handleFileChange = (e) => {\n-    const file = e.target.files[0];\n-    if (file) {\n-        setProofOfTransfer(file); // Set file for upload\n-    }\n-  };\n-\n-  const handleFileUpload = async (file) => {\n-    const formData = new FormData();\n-    formData.append('file', file);\n-\n-    try {\n-        const response = await axios.post(`${process.env.NEXT_PUBLIC_API_URL}/upload`, formData, {\n-            headers: {\n-                'Content-Type': 'multipart/form-data',\n-            },\n-        });\n-        setUploadUrl(response.data.url);\n-        return response.data.url;\n-    } catch (error) {\n-        //console.error('Error uploading file:', error);\n-        //alert('Failed to upload file.');\n-        return null;\n-    }\n- };\n-\n-  const handleSubmit = async (e) => {\n-    e.preventDefault();\n-    const newErrors = {};\n-\n-    if (!transactionType) newErrors.transactionType = 'Transaction type is required';\n-    if (!amount || amount <= 0) newErrors.amount = 'Amount must be a positive number';\n-    if (!description) newErrors.description = 'Description is required';\n-    if (!paymentDate) newErrors.paymentDate = 'Payment date is required';\n-    if (!relatedMonths) newErrors.relatedMonths = 'Months is required';\n-    if (transactionType === 'ipl' && !houseId) newErrors.houseId = 'House ID is required';\n-    if (transactionType === 'ipl' && !proofOfTransfer) newErrors.proofOfTransfer = 'Proof of transfer is required';\n-\n-    if (Object.keys(newErrors).length > 0) {\n-      setErrors(newErrors);\n-      return;\n-    }\n-\n-    setIsProcessing(true); // Start processing\n-\n-    let proofOfTransferUrl = uploadUrl;\n-    // If proofOfTransfer is a file that needs to be uploaded\n-    if (proofOfTransfer && proofOfTransfer instanceof File) {\n-      proofOfTransferUrl = await handleFileUpload(proofOfTransfer);\n-      if (!proofOfTransferUrl) return; // Abort if upload fails\n-    }\n-\n-    const convertStringToArray = (dateString) => {\n-      // Memisahkan string berdasarkan koma dan spasi\n-      const dateArray = dateString.split(', ').map(date => date.trim());\n-      return dateArray;\n-    };\n-\n-    const dateString = relatedMonths.map(option => option.value).join(', ');\n-    const dateArray = convertStringToArray(dateString);\n-\n-    //console.log(relatedMonths.map(option => option.value))\n-    const newTransaction = {\n-      transaction_type: transactionType,\n-      amount,\n-      description,\n-      proof_of_transfer: proofOfTransferUrl,\n-      houseId,\n-      related_months: dateArray,\n-      //relatedMonths:relatedMonths.map(option => moment(option.value, \"YYYY-MM\")).join(', '),\n-      paymentDate,\n-      status\n-    };\n-\n-   // console.log(newTransaction)\n-\n-    onSubmit(newTransaction);\n-    setHouseId('');\n-    setAmount('');\n-    setDescription('');\n-    setProofOfTransfer('');\n-    setRelatedMonths([]);\n-    setPaymentDate(new Date());\n-    setStatus('berhasil');\n-    fileInputRef.current.value = '';\n-    setIsProcessing(false); // Stop processing\n-    onClose();\n-  };\n-\n-  const handleHouseChange = (newValue) => {\n-    setHouseId(newValue);\n-  };\n-\n-  const handleHouseSelect = (selectedHouse) => {\n-    setHouseId(selectedHouse.value);\n-    setHouseName(selectedHouse.label)\n-    //setDescription(`IPL rumah ${selectedHouse.value} periode ${relatedMonths.join(', ')}`);\n-  };\n-\n-  const handleMonthChange = (selectedOptions) => {\n-    setRelatedMonths(selectedOptions || []);\n-  };\n-\n-  const generateMonthsOptions = () => {\n-    const options = [];\n-    const startYear = moment().year();\n-    const endYear = startYear + 2; // 2 tahun ke depan\n-\n-    for (let year = startYear; year <= endYear; year++) {\n-      for (let month = 0; month < 12; month++) {\n-        const value = moment().month(month).year(year).format(\"YYYY-MM\");\n-        const label = moment().month(month).year(year).format(\"MMMM YYYY\");\n-        options.push({ value, label });\n-      }\n-    }\n-    return options;\n-  };\n-\n-  const resetForm = () => {\n-    setHouseId('');\n-    setAmount('');\n-    setDescription('');\n-    setProofOfTransfer('');\n-    setRelatedMonths([]);\n-    setPaymentDate(new Date());\n-    setStatus('berhasil');\n-    fileInputRef.current.value = '';\n-    setErrors({});\n-  };\n-\n- \n-\n-  return (\n-    <Drawer\n-      open={isOpen}\n-      onClose={() => {\n-        resetForm();\n-        onClose();\n-      }}\n-      position=\"right\"\n-      className=\"py-4 px-7 top-0 z-50 w-full md:w-2/4\"\n-    >\n-      <Drawer.Header title={`Transaksi ${transactionType === 'ipl' ? 'IPL' : transactionType === 'income' ? 'Masuk' : 'Keluar'}`} titleIcon={FaExchangeAlt} />\n-      <Drawer.Items>\n-        <form onSubmit={handleSubmit} className=\"space-y-4\">\n-          {transactionType === 'ipl' && (\n-            <>\n-              <div className=\"mb-6 mt-3\">\n-                <Label htmlFor=\"houseId\" className=\"mb-2 block\">No Rumah</Label>\n-                <Autocomplete\n-                  value={houseId}\n-                  onChange={handleHouseChange}\n-                  options={houses}\n-                  onSelect={handleHouseSelect}\n-                />\n-                {errors.houseId && <div className=\"text-red-500 text-sm\">{errors.houseId}</div>}\n-              </div>\n-\n-              <div className=\"mb-6 mt-3\">\n-                <Label htmlFor=\"relatedMonths\" className=\"mb-2 block\">Periode</Label>\n-                <Select\n-                 id=\"relatedMonths\"\n-                 isMulti\n-                 options={generateMonthsOptions()}\n-                 value={relatedMonths}\n-                 onChange={handleMonthChange}\n-                 placeholder=\"Pilih bulan\"\n-                 className='bg-gray-50'\n-                />\n-                {errors.relatedMonths && <div className=\"text-red-500 text-sm\">{errors.relatedMonths}</div>}\n-              </div>\n-            </>\n-          )}\n-\n-          <div className=\"mb-6 mt-3\">\n-            <Label htmlFor=\"description\" className=\"mb-2 block\">Deskripsi</Label>\n-            <Textarea\n-              id=\"description\"\n-              name=\"description\"\n-              value={description}\n-              onChange={(e) => setDescription(e.target.value)}\n-              placeholder=\"Masukkan deskripsi\"\n-              readOnly={transactionType === 'ipl'} // Make description read-only for IPL transactions\n-            />\n-            {errors.description && <div className=\"text-red-500 text-sm\">{errors.description}</div>}\n-          </div>\n-\n-          <div className=\"mb-6 mt-3\">\n-            <Label htmlFor=\"amount\" className=\"mb-2 block\">Jumlah</Label>\n-            <TextInput\n-              id=\"amount\"\n-              name=\"amount\"\n-              type=\"number\"\n-              value={amount}\n-              onChange={(e) => setAmount(e.target.value)}\n-              placeholder=\"Masukkan jumlah\"\n-            />\n-            {errors.amount && <div className=\"text-red-500 text-sm\">{errors.amount}</div>}\n-          </div>\n-\n-          <div className=\"mb-6 mt-3\">\n-            <Label htmlFor=\"payment_type\" className=\"mb-2 block\">Tipe Pembayaran</Label>\n-              <Select\n-                id=\"payment_type\"\n-                isMulti\n-                options={''}\n-                value={''}\n-                onChange={''}\n-                placeholder=\"Cash atau Transfer\"\n-                className='bg-gray-50'\n-              />\n-            {/* {errors.amount && <div className=\"text-red-500 text-sm\">{errors.amount}</div>} */}\n-          </div>\n-\n-          <div className=\"mb-6 mt-3\">\n-              <Label htmlFor=\"proofOfTransfer\" className=\"mb-2 block\">Lampiran</Label>\n-              <FileInput \n-                id=\"file\" \n-                onChange={handleFileChange} \n-                accept=\".jpg,.png,.pdf\"\n-                ref={fileInputRef}\n-              />\n-              <TextInput\n-                id=\"proofOfTransfer\"\n-                name=\"proofOfTransfer\"\n-                value={proofOfTransfer}\n-                onChange={(e) => setProofOfTransfer(e.target.value)}\n-                placeholder=\"Masukkan URL lampiran\"\n-                className='hidden'\n-              />\n-              {errors.proofOfTransfer && <div className=\"text-red-500 text-sm\">{errors.proofOfTransfer}</div>}\n-            </div>\n-\n-          <div className=\"mb-6 mt-3\">\n-            <Label htmlFor=\"paymentDate\" className=\"mb-2 block\">Tanggal Pembayaran</Label>\n-            <div className='flex items-center w-72 relative border border-gray-300 rounded-md shadow-sm bg-gray-50'>\n-            <FaCalendarAlt className=\"absolute h-5 w-5 left-2 z-50 top-1/2 transform -translate-y-1/2 text-gray-500\" />\n-            <DatePicker\n-              locale={id}\n-              id=\"paymentDate\"\n-              name=\"paymentDate\"\n-              selected={paymentDate}\n-              onChange={(date) => setPaymentDate(date)}\n-              dateFormat=\"dd MMMM yyyy\"\n-              calendarClassName=\"light-blue-stripes\"\n-              placeholderText=\"Pilih tanggal\"\n-              className=\"block w-full pl-8 text-sm text-gray-900  border-gray-300 border-none rounded-md py-2 px-4 focus:ring-0 bg-gray-50\"\n-            />\n-            </div>\n-            {errors.paymentDate && <div className=\"text-red-500 text-sm\">{errors.paymentDate}</div>}\n-            \n-          </div>\n-\n-          <div className='flex gap-2'>\n-            <Button \n-            type=\"submit\" \n-            color={transactionType === 'ipl' ? 'success' : transactionType === 'income' ? 'blue' : 'failure'}\n-            disabled={isProcessing}\n-            >\n-              {isProcessing && <AiOutlineLoading className=\"h-5 w-5 animate-spin mr-2\" />}\n-              {transactionType === 'ipl' && <FaExchangeAlt className=\"mr-2 h-5 w-5\" />}\n-              {transactionType === 'income' && <FaRegArrowAltCircleDown className=\"mr-2 h-5 w-5\" />}\n-              {transactionType === 'expense' && <FaRegArrowAltCircleUp className=\"mr-2 h-5 w-5\" />}\n-              Simpan\n-            </Button>\n-            <Button\n-              type=\"button\"\n-              color=\"gray\"\n-              onClick={() => {\n-                resetForm();\n-                onClose();\n-              }}\n-            >\n-              Batal\n-            </Button>\n-          </div>\n-        </form>\n-      </Drawer.Items>\n-    </Drawer>\n-  );\n-};\n-\n-export default TransactionDrawer;\n"
                },
                {
                    "date": 1722399251653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -182,8 +182,13 @@\n     }\n     return options;\n   };\n \n+  const optionsType = [\n+    { value: 'cash', label: 'Cash' },\n+    { value: 'transfer', label: 'Transfer' },\n+  ]\n+\n   const resetForm = () => {\n     setHouseId('');\n     setAmount('');\n     setDescription('');\n@@ -273,9 +278,9 @@\n                 options={''}\n                 value={''}\n                 onChange={''}\n                 placeholder=\"Cash atau Transfer\"\n-                className='bg-gray-50 text-md'\n+                className='bg-gray-50 text-sm'\n               />\n             {/* {errors.amount && <div className=\"text-red-500 text-sm\">{errors.amount}</div>} */}\n           </div>\n \n"
                },
                {
                    "date": 1722399259495,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -274,9 +274,9 @@\n             <Label htmlFor=\"payment_type\" className=\"mb-2 block\">Tipe Pembayaran</Label>\n               <Select\n                 id=\"payment_type\"\n                 isMulti\n-                options={''}\n+                options={optionsType}\n                 value={''}\n                 onChange={''}\n                 placeholder=\"Cash atau Transfer\"\n                 className='bg-gray-50 text-sm'\n"
                },
                {
                    "date": 1722399384051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,8 +30,9 @@\n   const [errors, setErrors] = useState({});\n   const [uploadUrl, setUploadUrl] = useState('');\n   const fileInputRef = useRef(null);\n   const [isProcessing, setIsProcessing] = useState(false);\n+  const [paymentType, setPaymentType] = useState('');\n \n   useEffect(() => {\n     if (session) {\n       const fetchHouses = async () => {\n"
                },
                {
                    "date": 1722399477855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -188,8 +188,12 @@\n     { value: 'cash', label: 'Cash' },\n     { value: 'transfer', label: 'Transfer' },\n   ]\n \n+  const handleTypeChange = (value) => {\n+    setPaymentType(value);\n+  };\n+\n   const resetForm = () => {\n     setHouseId('');\n     setAmount('');\n     setDescription('');\n@@ -276,10 +280,10 @@\n               <Select\n                 id=\"payment_type\"\n                 isMulti\n                 options={optionsType}\n-                value={''}\n-                onChange={''}\n+                value={paymentType}\n+                onChange={handleTypeChange}\n                 placeholder=\"Cash atau Transfer\"\n                 className='bg-gray-50 text-sm'\n               />\n             {/* {errors.amount && <div className=\"text-red-500 text-sm\">{errors.amount}</div>} */}\n"
                },
                {
                    "date": 1722399493351,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -278,9 +278,8 @@\n           <div className=\"mb-6 mt-3\">\n             <Label htmlFor=\"payment_type\" className=\"mb-2 block\">Tipe Pembayaran</Label>\n               <Select\n                 id=\"payment_type\"\n-                isMulti\n                 options={optionsType}\n                 value={paymentType}\n                 onChange={handleTypeChange}\n                 placeholder=\"Cash atau Transfer\"\n"
                },
                {
                    "date": 1722399515004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -241,9 +241,9 @@\n                  options={generateMonthsOptions()}\n                  value={relatedMonths}\n                  onChange={handleMonthChange}\n                  placeholder=\"Pilih bulan\"\n-                 className='bg-gray-50'\n+                 className='bg-gray-50 text-sm'\n                 />\n                 {errors.relatedMonths && <div className=\"text-red-500 text-sm\">{errors.relatedMonths}</div>}\n               </div>\n             </>\n"
                },
                {
                    "date": 1722399848211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,8 +133,9 @@\n       amount,\n       description,\n       proof_of_transfer: proofOfTransferUrl,\n       houseId,\n+      payment_type: paymentType,\n       related_months: dateArray,\n       //relatedMonths:relatedMonths.map(option => moment(option.value, \"YYYY-MM\")).join(', '),\n       paymentDate,\n       status\n"
                },
                {
                    "date": 1722399862683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,8 +151,9 @@\n     setRelatedMonths([]);\n     setPaymentDate(new Date());\n     setStatus('berhasil');\n     fileInputRef.current.value = '';\n+    setPaymentType('');\n     setIsProcessing(false); // Stop processing\n     onClose();\n   };\n \n"
                },
                {
                    "date": 1722399877290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -202,8 +202,9 @@\n     setProofOfTransfer('');\n     setRelatedMonths([]);\n     setPaymentDate(new Date());\n     setStatus('berhasil');\n+    setPaymentType('');\n     fileInputRef.current.value = '';\n     setErrors({});\n   };\n \n"
                },
                {
                    "date": 1722399949901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,9 @@\n     if (!description) newErrors.description = 'Description is required';\n     if (!paymentDate) newErrors.paymentDate = 'Payment date is required';\n     if (!relatedMonths) newErrors.relatedMonths = 'Months is required';\n     if (transactionType === 'ipl' && !houseId) newErrors.houseId = 'House ID is required';\n-    if (transactionType === 'ipl' && !proofOfTransfer) newErrors.proofOfTransfer = 'Proof of transfer is required';\n+    if (paymentType === 'transfer' && !proofOfTransfer) newErrors.proofOfTransfer = 'Proof of transfer is required';\n \n     if (Object.keys(newErrors).length > 0) {\n       setErrors(newErrors);\n       return;\n"
                },
                {
                    "date": 1722401715218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n   useEffect(() => {\n     if (transactionType === 'ipl') {\n       if(relatedMonths.length > 0 && houseName ) {\n         const monthLabels = relatedMonths.map(option => moment(option.value, \"YYYY-MM\").format(\"MMMM YYYY\")).join(', ');\n-        const descriptionText = `IPL Rumah ${houseName} periode ${monthLabels}`;\n+        const descriptionText = `IPL ${houseName} periode ${monthLabels}`;\n         setDescription(descriptionText);\n       }\n      \n     }\n"
                },
                {
                    "date": 1722401916482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,364 @@\n+// components/TransactionDrawer.js\n+import { getSession, useSession } from 'next-auth/react';\n+import { useState, useEffect, useRef } from 'react';\n+import { Drawer, Button, Input, FileInput, Textarea, Label, TextInput, Dropdown,Alert } from 'flowbite-react';\n+import {FaCalendarAlt, FaMoneyBill, FaRegArrowAltCircleDown, FaRegArrowAltCircleUp } from 'react-icons/fa';\n+import { FaExchangeAlt } from \"react-icons/fa\";\n+import { AiOutlineLoading } from \"react-icons/ai\";\n+import axios from 'axios';\n+import Autocomplete from '../Autocomplete';\n+import DatePicker from 'react-datepicker';\n+import 'react-datepicker/dist/react-datepicker.css'\n+import Select from 'react-select';\n+import moment from 'moment';\n+import 'moment/locale/id';\n+import id from \"date-fns/locale/id\";\n+moment.locale('id');\n+\n+const TransactionDrawer = ({ isOpen, onClose, onSubmit, transactionType }) => {\n+  const [houseId, setHouseId] = useState('');\n+  const [houseName, setHouseName] = useState('');\n+  const [amount, setAmount] = useState('');\n+  const [description, setDescription] = useState('');\n+  const [proofOfTransfer, setProofOfTransfer] = useState('');\n+  const [relatedMonths, setRelatedMonths] = useState([]);\n+  const [status, setStatus] = useState('berhasil');\n+  const [houses, setHouses] = useState([]);\n+  const [selectedHouse, setSelectedHouse] = useState(null);\n+  const [paymentDate, setPaymentDate] = useState(new Date());\n+  const { data: session } = useSession();\n+  const [errors, setErrors] = useState({});\n+  const [uploadUrl, setUploadUrl] = useState('');\n+  const fileInputRef = useRef(null);\n+  const [isProcessing, setIsProcessing] = useState(false);\n+  const [paymentType, setPaymentType] = useState('');\n+\n+  useEffect(() => {\n+    if (session) {\n+      const fetchHouses = async () => {\n+        try {\n+          const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/houses/all`, {\n+            headers: {\n+              Authorization: `Bearer ${session.accessToken}`,\n+            },\n+          });\n+          setHouses(res.data.map(house => ({\n+            value: house.house_id,\n+            label: house.house_id\n+          })));\n+        } catch (error) {\n+          console.error('Error fetching houses data:', error);\n+        }\n+      };\n+\n+      fetchHouses();\n+    }\n+  }, [session]);\n+\n+  useEffect(() => {\n+    if (transactionType === 'ipl') {\n+      if(relatedMonths.length > 0 && houseName ) {\n+        const monthLabels = relatedMonths.map(option => moment(option.value, \"YYYY-MM\").format(\"MMMM YYYY\")).join(', ');\n+        const descriptionText = `IPL ${houseName} periode ${monthLabels}`;\n+        setDescription(descriptionText);\n+      }\n+     \n+    }\n+  }, [houseId, relatedMonths, transactionType]);\n+\n+  const handleFileChange = (e) => {\n+    const file = e.target.files[0];\n+    if (file) {\n+        setProofOfTransfer(file); // Set file for upload\n+    }\n+  };\n+\n+  const handleFileUpload = async (file) => {\n+    const formData = new FormData();\n+    formData.append('file', file);\n+\n+    try {\n+        const response = await axios.post(`${process.env.NEXT_PUBLIC_API_URL}/upload`, formData, {\n+            headers: {\n+                'Content-Type': 'multipart/form-data',\n+            },\n+        });\n+        setUploadUrl(response.data.url);\n+        return response.data.url;\n+    } catch (error) {\n+        //console.error('Error uploading file:', error);\n+        //alert('Failed to upload file.');\n+        return null;\n+    }\n+ };\n+\n+  const handleSubmit = async (e) => {\n+    e.preventDefault();\n+    const newErrors = {};\n+\n+    if (!transactionType) newErrors.transactionType = 'Transaction type is required';\n+    if (!amount || amount <= 0) newErrors.amount = 'Amount must be a positive number';\n+    if (!description) newErrors.description = 'Description is required';\n+    if (!paymentDate) newErrors.paymentDate = 'Payment date is required';\n+    if (!relatedMonths) newErrors.relatedMonths = 'Months is required';\n+    if (transactionType === 'ipl' && !houseId) newErrors.houseId = 'House ID is required';\n+    if (paymentType === 'transfer' && !proofOfTransfer) newErrors.proofOfTransfer = 'Proof of transfer is required';\n+\n+    if (Object.keys(newErrors).length > 0) {\n+      setErrors(newErrors);\n+      return;\n+    }\n+\n+    setIsProcessing(true); // Start processing\n+\n+    let proofOfTransferUrl = uploadUrl;\n+    // If proofOfTransfer is a file that needs to be uploaded\n+    if (proofOfTransfer && proofOfTransfer instanceof File) {\n+      proofOfTransferUrl = await handleFileUpload(proofOfTransfer);\n+      if (!proofOfTransferUrl) return; // Abort if upload fails\n+    }\n+\n+    const convertStringToArray = (dateString) => {\n+      // Memisahkan string berdasarkan koma dan spasi\n+      const dateArray = dateString.split(', ').map(date => date.trim());\n+      return dateArray;\n+    };\n+\n+    const dateString = relatedMonths.map(option => option.value).join(', ');\n+    const dateArray = convertStringToArray(dateString);\n+\n+    console.log(paymentType)\n+\n+    //console.log(relatedMonths.map(option => option.value))\n+    const newTransaction = {\n+      transaction_type: transactionType,\n+      amount,\n+      description,\n+      proof_of_transfer: proofOfTransferUrl,\n+      houseId,\n+      payment_type: paymentType,\n+      related_months: dateArray,\n+      //relatedMonths:relatedMonths.map(option => moment(option.value, \"YYYY-MM\")).join(', '),\n+      paymentDate,\n+      status\n+    };\n+\n+   // console.log(newTransaction)\n+\n+    onSubmit(newTransaction);\n+    setHouseId('');\n+    setAmount('');\n+    setDescription('');\n+    setProofOfTransfer('');\n+    setRelatedMonths([]);\n+    setPaymentDate(new Date());\n+    setStatus('berhasil');\n+    fileInputRef.current.value = '';\n+    setPaymentType('');\n+    setIsProcessing(false); // Stop processing\n+    onClose();\n+  };\n+\n+  const handleHouseChange = (newValue) => {\n+    setHouseId(newValue);\n+  };\n+\n+  const handleHouseSelect = (selectedHouse) => {\n+    setHouseId(selectedHouse.value);\n+    setHouseName(selectedHouse.label)\n+    //setDescription(`IPL rumah ${selectedHouse.value} periode ${relatedMonths.join(', ')}`);\n+  };\n+\n+  const handleMonthChange = (selectedOptions) => {\n+    setRelatedMonths(selectedOptions || []);\n+  };\n+\n+  const generateMonthsOptions = () => {\n+    const options = [];\n+    const startYear = moment().year();\n+    const endYear = startYear + 2; // 2 tahun ke depan\n+\n+    for (let year = startYear; year <= endYear; year++) {\n+      for (let month = 0; month < 12; month++) {\n+        const value = moment().month(month).year(year).format(\"YYYY-MM\");\n+        const label = moment().month(month).year(year).format(\"MMMM YYYY\");\n+        options.push({ value, label });\n+      }\n+    }\n+    return options;\n+  };\n+\n+  const optionsType = [\n+    { value: 'cash', label: 'Cash' },\n+    { value: 'transfer', label: 'Transfer' },\n+  ]\n+\n+  const handleTypeChange = (value) => {\n+    setPaymentType(value);\n+  };\n+\n+  const resetForm = () => {\n+    setHouseId('');\n+    setAmount('');\n+    setDescription('');\n+    setProofOfTransfer('');\n+    setRelatedMonths([]);\n+    setPaymentDate(new Date());\n+    setStatus('berhasil');\n+    setPaymentType('');\n+    fileInputRef.current.value = '';\n+    setErrors({});\n+  };\n+\n+ \n+\n+  return (\n+    <Drawer\n+      open={isOpen}\n+      onClose={() => {\n+        resetForm();\n+        onClose();\n+      }}\n+      position=\"right\"\n+      className=\"py-4 px-7 top-0 z-50 w-full md:w-2/4\"\n+    >\n+      <Drawer.Header title={`Transaksi ${transactionType === 'ipl' ? 'IPL' : transactionType === 'income' ? 'Masuk' : 'Keluar'}`} titleIcon={FaExchangeAlt} />\n+      <Drawer.Items>\n+        <form onSubmit={handleSubmit} className=\"space-y-4\">\n+          {transactionType === 'ipl' && (\n+            <>\n+              <div className=\"mb-6 mt-3\">\n+                <Label htmlFor=\"houseId\" className=\"mb-2 block\">No Rumah</Label>\n+                <Autocomplete\n+                  value={houseId}\n+                  onChange={handleHouseChange}\n+                  options={houses}\n+                  onSelect={handleHouseSelect}\n+                />\n+                {errors.houseId && <div className=\"text-red-500 text-sm\">{errors.houseId}</div>}\n+              </div>\n+\n+              <div className=\"mb-6 mt-3\">\n+                <Label htmlFor=\"relatedMonths\" className=\"mb-2 block\">Periode</Label>\n+                <Select\n+                 id=\"relatedMonths\"\n+                 isMulti\n+                 options={generateMonthsOptions()}\n+                 value={relatedMonths}\n+                 onChange={handleMonthChange}\n+                 placeholder=\"Pilih bulan\"\n+                 className='bg-gray-50 text-sm'\n+                />\n+                {errors.relatedMonths && <div className=\"text-red-500 text-sm\">{errors.relatedMonths}</div>}\n+              </div>\n+            </>\n+          )}\n+\n+          <div className=\"mb-6 mt-3\">\n+            <Label htmlFor=\"description\" className=\"mb-2 block\">Deskripsi</Label>\n+            <Textarea\n+              id=\"description\"\n+              name=\"description\"\n+              value={description}\n+              onChange={(e) => setDescription(e.target.value)}\n+              placeholder=\"Masukkan deskripsi\"\n+              readOnly={transactionType === 'ipl'} // Make description read-only for IPL transactions\n+            />\n+            {errors.description && <div className=\"text-red-500 text-sm\">{errors.description}</div>}\n+          </div>\n+\n+          <div className=\"mb-6 mt-3\">\n+            <Label htmlFor=\"amount\" className=\"mb-2 block\">Jumlah</Label>\n+            <TextInput\n+              id=\"amount\"\n+              name=\"amount\"\n+              type=\"number\"\n+              value={amount}\n+              onChange={(e) => setAmount(e.target.value)}\n+              placeholder=\"Masukkan jumlah\"\n+            />\n+            {errors.amount && <div className=\"text-red-500 text-sm\">{errors.amount}</div>}\n+          </div>\n+\n+          <div className=\"mb-6 mt-3\">\n+            <Label htmlFor=\"payment_type\" className=\"mb-2 block\">Tipe Pembayaran</Label>\n+              <Select\n+                id=\"payment_type\"\n+                options={optionsType}\n+                value={paymentType}\n+                onChange={handleTypeChange}\n+                placeholder=\"Cash atau Transfer\"\n+                className='bg-gray-50 text-sm'\n+              />\n+            {/* {errors.amount && <div className=\"text-red-500 text-sm\">{errors.amount}</div>} */}\n+          </div>\n+\n+          <div className=\"mb-6 mt-3\">\n+              <Label htmlFor=\"proofOfTransfer\" className=\"mb-2 block\">Lampiran</Label>\n+              <FileInput \n+                id=\"file\" \n+                onChange={handleFileChange} \n+                accept=\".jpg,.png,.pdf\"\n+                ref={fileInputRef}\n+              />\n+              <TextInput\n+                id=\"proofOfTransfer\"\n+                name=\"proofOfTransfer\"\n+                value={proofOfTransfer}\n+                onChange={(e) => setProofOfTransfer(e.target.value)}\n+                placeholder=\"Masukkan URL lampiran\"\n+                className='hidden'\n+              />\n+              {errors.proofOfTransfer && <div className=\"text-red-500 text-sm\">{errors.proofOfTransfer}</div>}\n+            </div>\n+\n+          <div className=\"mb-6 mt-3\">\n+            <Label htmlFor=\"paymentDate\" className=\"mb-2 block\">Tanggal Pembayaran</Label>\n+            <div className='flex items-center w-72 relative border border-gray-300 rounded-md shadow-sm bg-gray-50'>\n+            <FaCalendarAlt className=\"absolute h-5 w-5 left-2 z-50 top-1/2 transform -translate-y-1/2 text-gray-500\" />\n+            <DatePicker\n+              locale={id}\n+              id=\"paymentDate\"\n+              name=\"paymentDate\"\n+              selected={paymentDate}\n+              onChange={(date) => setPaymentDate(date)}\n+              dateFormat=\"dd MMMM yyyy\"\n+              calendarClassName=\"light-blue-stripes\"\n+              placeholderText=\"Pilih tanggal\"\n+              className=\"block w-full pl-8 text-sm text-gray-900  border-gray-300 border-none rounded-md py-2 px-4 focus:ring-0 bg-gray-50\"\n+            />\n+            </div>\n+            {errors.paymentDate && <div className=\"text-red-500 text-sm\">{errors.paymentDate}</div>}\n+            \n+          </div>\n+\n+          <div className='flex gap-2'>\n+            <Button \n+            type=\"submit\" \n+            color={transactionType === 'ipl' ? 'success' : transactionType === 'income' ? 'blue' : 'failure'}\n+            disabled={isProcessing}\n+            >\n+              {isProcessing && <AiOutlineLoading className=\"h-5 w-5 animate-spin mr-2\" />}\n+              {transactionType === 'ipl' && <FaExchangeAlt className=\"mr-2 h-5 w-5\" />}\n+              {transactionType === 'income' && <FaRegArrowAltCircleDown className=\"mr-2 h-5 w-5\" />}\n+              {transactionType === 'expense' && <FaRegArrowAltCircleUp className=\"mr-2 h-5 w-5\" />}\n+              Simpan\n+            </Button>\n+            <Button\n+              type=\"button\"\n+              color=\"gray\"\n+              onClick={() => {\n+                resetForm();\n+                onClose();\n+              }}\n+            >\n+              Batal\n+            </Button>\n+          </div>\n+        </form>\n+      </Drawer.Items>\n+    </Drawer>\n+  );\n+};\n+\n+export default TransactionDrawer;\n"
                },
                {
                    "date": 1722401950128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,9 @@\n \n     const dateString = relatedMonths.map(option => option.value).join(', ');\n     const dateArray = convertStringToArray(dateString);\n \n-    console.log(paymentType)\n+    console.log(paymentType.value);\n \n     //console.log(relatedMonths.map(option => option.value))\n     const newTransaction = {\n       transaction_type: transactionType,\n@@ -361,366 +361,4 @@\n   );\n };\n \n export default TransactionDrawer;\n-// components/TransactionDrawer.js\n-import { getSession, useSession } from 'next-auth/react';\n-import { useState, useEffect, useRef } from 'react';\n-import { Drawer, Button, Input, FileInput, Textarea, Label, TextInput, Dropdown,Alert } from 'flowbite-react';\n-import {FaCalendarAlt, FaMoneyBill, FaRegArrowAltCircleDown, FaRegArrowAltCircleUp } from 'react-icons/fa';\n-import { FaExchangeAlt } from \"react-icons/fa\";\n-import { AiOutlineLoading } from \"react-icons/ai\";\n-import axios from 'axios';\n-import Autocomplete from '../Autocomplete';\n-import DatePicker from 'react-datepicker';\n-import 'react-datepicker/dist/react-datepicker.css'\n-import Select from 'react-select';\n-import moment from 'moment';\n-import 'moment/locale/id';\n-import id from \"date-fns/locale/id\";\n-moment.locale('id');\n-\n-const TransactionDrawer = ({ isOpen, onClose, onSubmit, transactionType }) => {\n-  const [houseId, setHouseId] = useState('');\n-  const [houseName, setHouseName] = useState('');\n-  const [amount, setAmount] = useState('');\n-  const [description, setDescription] = useState('');\n-  const [proofOfTransfer, setProofOfTransfer] = useState('');\n-  const [relatedMonths, setRelatedMonths] = useState([]);\n-  const [status, setStatus] = useState('berhasil');\n-  const [houses, setHouses] = useState([]);\n-  const [selectedHouse, setSelectedHouse] = useState(null);\n-  const [paymentDate, setPaymentDate] = useState(new Date());\n-  const { data: session } = useSession();\n-  const [errors, setErrors] = useState({});\n-  const [uploadUrl, setUploadUrl] = useState('');\n-  const fileInputRef = useRef(null);\n-  const [isProcessing, setIsProcessing] = useState(false);\n-  const [paymentType, setPaymentType] = useState('');\n-\n-  useEffect(() => {\n-    if (session) {\n-      const fetchHouses = async () => {\n-        try {\n-          const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/houses/all`, {\n-            headers: {\n-              Authorization: `Bearer ${session.accessToken}`,\n-            },\n-          });\n-          setHouses(res.data.map(house => ({\n-            value: house.house_id,\n-            label: house.house_id\n-          })));\n-        } catch (error) {\n-          console.error('Error fetching houses data:', error);\n-        }\n-      };\n-\n-      fetchHouses();\n-    }\n-  }, [session]);\n-\n-  useEffect(() => {\n-    if (transactionType === 'ipl') {\n-      if(relatedMonths.length > 0 && houseName ) {\n-        const monthLabels = relatedMonths.map(option => moment(option.value, \"YYYY-MM\").format(\"MMMM YYYY\")).join(', ');\n-        const descriptionText = `IPL ${houseName} periode ${monthLabels}`;\n-        setDescription(descriptionText);\n-      }\n-     \n-    }\n-  }, [houseId, relatedMonths, transactionType]);\n-\n-  const handleFileChange = (e) => {\n-    const file = e.target.files[0];\n-    if (file) {\n-        setProofOfTransfer(file); // Set file for upload\n-    }\n-  };\n-\n-  const handleFileUpload = async (file) => {\n-    const formData = new FormData();\n-    formData.append('file', file);\n-\n-    try {\n-        const response = await axios.post(`${process.env.NEXT_PUBLIC_API_URL}/upload`, formData, {\n-            headers: {\n-                'Content-Type': 'multipart/form-data',\n-            },\n-        });\n-        setUploadUrl(response.data.url);\n-        return response.data.url;\n-    } catch (error) {\n-        //console.error('Error uploading file:', error);\n-        //alert('Failed to upload file.');\n-        return null;\n-    }\n- };\n-\n-  const handleSubmit = async (e) => {\n-    e.preventDefault();\n-    const newErrors = {};\n-\n-    if (!transactionType) newErrors.transactionType = 'Transaction type is required';\n-    if (!amount || amount <= 0) newErrors.amount = 'Amount must be a positive number';\n-    if (!description) newErrors.description = 'Description is required';\n-    if (!paymentDate) newErrors.paymentDate = 'Payment date is required';\n-    if (!relatedMonths) newErrors.relatedMonths = 'Months is required';\n-    if (transactionType === 'ipl' && !houseId) newErrors.houseId = 'House ID is required';\n-    if (paymentType === 'transfer' && !proofOfTransfer) newErrors.proofOfTransfer = 'Proof of transfer is required';\n-\n-    if (Object.keys(newErrors).length > 0) {\n-      setErrors(newErrors);\n-      return;\n-    }\n-\n-    setIsProcessing(true); // Start processing\n-\n-    let proofOfTransferUrl = uploadUrl;\n-    // If proofOfTransfer is a file that needs to be uploaded\n-    if (proofOfTransfer && proofOfTransfer instanceof File) {\n-      proofOfTransferUrl = await handleFileUpload(proofOfTransfer);\n-      if (!proofOfTransferUrl) return; // Abort if upload fails\n-    }\n-\n-    const convertStringToArray = (dateString) => {\n-      // Memisahkan string berdasarkan koma dan spasi\n-      const dateArray = dateString.split(', ').map(date => date.trim());\n-      return dateArray;\n-    };\n-\n-    const dateString = relatedMonths.map(option => option.value).join(', ');\n-    const dateArray = convertStringToArray(dateString);\n-\n-    //console.log(relatedMonths.map(option => option.value))\n-    const newTransaction = {\n-      transaction_type: transactionType,\n-      amount,\n-      description,\n-      proof_of_transfer: proofOfTransferUrl,\n-      houseId,\n-      payment_type: paymentType,\n-      related_months: dateArray,\n-      //relatedMonths:relatedMonths.map(option => moment(option.value, \"YYYY-MM\")).join(', '),\n-      paymentDate,\n-      status\n-    };\n-\n-   // console.log(newTransaction)\n-\n-    onSubmit(newTransaction);\n-    setHouseId('');\n-    setAmount('');\n-    setDescription('');\n-    setProofOfTransfer('');\n-    setRelatedMonths([]);\n-    setPaymentDate(new Date());\n-    setStatus('berhasil');\n-    fileInputRef.current.value = '';\n-    setPaymentType('');\n-    setIsProcessing(false); // Stop processing\n-    onClose();\n-  };\n-\n-  const handleHouseChange = (newValue) => {\n-    setHouseId(newValue);\n-  };\n-\n-  const handleHouseSelect = (selectedHouse) => {\n-    setHouseId(selectedHouse.value);\n-    setHouseName(selectedHouse.label)\n-    //setDescription(`IPL rumah ${selectedHouse.value} periode ${relatedMonths.join(', ')}`);\n-  };\n-\n-  const handleMonthChange = (selectedOptions) => {\n-    setRelatedMonths(selectedOptions || []);\n-  };\n-\n-  const generateMonthsOptions = () => {\n-    const options = [];\n-    const startYear = moment().year();\n-    const endYear = startYear + 2; // 2 tahun ke depan\n-\n-    for (let year = startYear; year <= endYear; year++) {\n-      for (let month = 0; month < 12; month++) {\n-        const value = moment().month(month).year(year).format(\"YYYY-MM\");\n-        const label = moment().month(month).year(year).format(\"MMMM YYYY\");\n-        options.push({ value, label });\n-      }\n-    }\n-    return options;\n-  };\n-\n-  const optionsType = [\n-    { value: 'cash', label: 'Cash' },\n-    { value: 'transfer', label: 'Transfer' },\n-  ]\n-\n-  const handleTypeChange = (value) => {\n-    setPaymentType(value);\n-  };\n-\n-  const resetForm = () => {\n-    setHouseId('');\n-    setAmount('');\n-    setDescription('');\n-    setProofOfTransfer('');\n-    setRelatedMonths([]);\n-    setPaymentDate(new Date());\n-    setStatus('berhasil');\n-    setPaymentType('');\n-    fileInputRef.current.value = '';\n-    setErrors({});\n-  };\n-\n- \n-\n-  return (\n-    <Drawer\n-      open={isOpen}\n-      onClose={() => {\n-        resetForm();\n-        onClose();\n-      }}\n-      position=\"right\"\n-      className=\"py-4 px-7 top-0 z-50 w-full md:w-2/4\"\n-    >\n-      <Drawer.Header title={`Transaksi ${transactionType === 'ipl' ? 'IPL' : transactionType === 'income' ? 'Masuk' : 'Keluar'}`} titleIcon={FaExchangeAlt} />\n-      <Drawer.Items>\n-        <form onSubmit={handleSubmit} className=\"space-y-4\">\n-          {transactionType === 'ipl' && (\n-            <>\n-              <div className=\"mb-6 mt-3\">\n-                <Label htmlFor=\"houseId\" className=\"mb-2 block\">No Rumah</Label>\n-                <Autocomplete\n-                  value={houseId}\n-                  onChange={handleHouseChange}\n-                  options={houses}\n-                  onSelect={handleHouseSelect}\n-                />\n-                {errors.houseId && <div className=\"text-red-500 text-sm\">{errors.houseId}</div>}\n-              </div>\n-\n-              <div className=\"mb-6 mt-3\">\n-                <Label htmlFor=\"relatedMonths\" className=\"mb-2 block\">Periode</Label>\n-                <Select\n-                 id=\"relatedMonths\"\n-                 isMulti\n-                 options={generateMonthsOptions()}\n-                 value={relatedMonths}\n-                 onChange={handleMonthChange}\n-                 placeholder=\"Pilih bulan\"\n-                 className='bg-gray-50 text-sm'\n-                />\n-                {errors.relatedMonths && <div className=\"text-red-500 text-sm\">{errors.relatedMonths}</div>}\n-              </div>\n-            </>\n-          )}\n-\n-          <div className=\"mb-6 mt-3\">\n-            <Label htmlFor=\"description\" className=\"mb-2 block\">Deskripsi</Label>\n-            <Textarea\n-              id=\"description\"\n-              name=\"description\"\n-              value={description}\n-              onChange={(e) => setDescription(e.target.value)}\n-              placeholder=\"Masukkan deskripsi\"\n-              readOnly={transactionType === 'ipl'} // Make description read-only for IPL transactions\n-            />\n-            {errors.description && <div className=\"text-red-500 text-sm\">{errors.description}</div>}\n-          </div>\n-\n-          <div className=\"mb-6 mt-3\">\n-            <Label htmlFor=\"amount\" className=\"mb-2 block\">Jumlah</Label>\n-            <TextInput\n-              id=\"amount\"\n-              name=\"amount\"\n-              type=\"number\"\n-              value={amount}\n-              onChange={(e) => setAmount(e.target.value)}\n-              placeholder=\"Masukkan jumlah\"\n-            />\n-            {errors.amount && <div className=\"text-red-500 text-sm\">{errors.amount}</div>}\n-          </div>\n-\n-          <div className=\"mb-6 mt-3\">\n-            <Label htmlFor=\"payment_type\" className=\"mb-2 block\">Tipe Pembayaran</Label>\n-              <Select\n-                id=\"payment_type\"\n-                options={optionsType}\n-                value={paymentType}\n-                onChange={handleTypeChange}\n-                placeholder=\"Cash atau Transfer\"\n-                className='bg-gray-50 text-sm'\n-              />\n-            {/* {errors.amount && <div className=\"text-red-500 text-sm\">{errors.amount}</div>} */}\n-          </div>\n-\n-          <div className=\"mb-6 mt-3\">\n-              <Label htmlFor=\"proofOfTransfer\" className=\"mb-2 block\">Lampiran</Label>\n-              <FileInput \n-                id=\"file\" \n-                onChange={handleFileChange} \n-                accept=\".jpg,.png,.pdf\"\n-                ref={fileInputRef}\n-              />\n-              <TextInput\n-                id=\"proofOfTransfer\"\n-                name=\"proofOfTransfer\"\n-                value={proofOfTransfer}\n-                onChange={(e) => setProofOfTransfer(e.target.value)}\n-                placeholder=\"Masukkan URL lampiran\"\n-                className='hidden'\n-              />\n-              {errors.proofOfTransfer && <div className=\"text-red-500 text-sm\">{errors.proofOfTransfer}</div>}\n-            </div>\n-\n-          <div className=\"mb-6 mt-3\">\n-            <Label htmlFor=\"paymentDate\" className=\"mb-2 block\">Tanggal Pembayaran</Label>\n-            <div className='flex items-center w-72 relative border border-gray-300 rounded-md shadow-sm bg-gray-50'>\n-            <FaCalendarAlt className=\"absolute h-5 w-5 left-2 z-50 top-1/2 transform -translate-y-1/2 text-gray-500\" />\n-            <DatePicker\n-              locale={id}\n-              id=\"paymentDate\"\n-              name=\"paymentDate\"\n-              selected={paymentDate}\n-              onChange={(date) => setPaymentDate(date)}\n-              dateFormat=\"dd MMMM yyyy\"\n-              calendarClassName=\"light-blue-stripes\"\n-              placeholderText=\"Pilih tanggal\"\n-              className=\"block w-full pl-8 text-sm text-gray-900  border-gray-300 border-none rounded-md py-2 px-4 focus:ring-0 bg-gray-50\"\n-            />\n-            </div>\n-            {errors.paymentDate && <div className=\"text-red-500 text-sm\">{errors.paymentDate}</div>}\n-            \n-          </div>\n-\n-          <div className='flex gap-2'>\n-            <Button \n-            type=\"submit\" \n-            color={transactionType === 'ipl' ? 'success' : transactionType === 'income' ? 'blue' : 'failure'}\n-            disabled={isProcessing}\n-            >\n-              {isProcessing && <AiOutlineLoading className=\"h-5 w-5 animate-spin mr-2\" />}\n-              {transactionType === 'ipl' && <FaExchangeAlt className=\"mr-2 h-5 w-5\" />}\n-              {transactionType === 'income' && <FaRegArrowAltCircleDown className=\"mr-2 h-5 w-5\" />}\n-              {transactionType === 'expense' && <FaRegArrowAltCircleUp className=\"mr-2 h-5 w-5\" />}\n-              Simpan\n-            </Button>\n-            <Button\n-              type=\"button\"\n-              color=\"gray\"\n-              onClick={() => {\n-                resetForm();\n-                onClose();\n-              }}\n-            >\n-              Batal\n-            </Button>\n-          </div>\n-        </form>\n-      </Drawer.Items>\n-    </Drawer>\n-  );\n-};\n-\n-export default TransactionDrawer;\n"
                },
                {
                    "date": 1722401956265,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,9 @@\n \n     const dateString = relatedMonths.map(option => option.value).join(', ');\n     const dateArray = convertStringToArray(dateString);\n \n-    console.log(paymentType.value);\n+    console.log(paymentType[value]);\n \n     //console.log(relatedMonths.map(option => option.value))\n     const newTransaction = {\n       transaction_type: transactionType,\n"
                },
                {
                    "date": 1722401993976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,9 @@\n \n     const dateString = relatedMonths.map(option => option.value).join(', ');\n     const dateArray = convertStringToArray(dateString);\n \n-    console.log(paymentType[value]);\n+    console.log(paymentType);\n \n     //console.log(relatedMonths.map(option => option.value))\n     const newTransaction = {\n       transaction_type: transactionType,\n"
                },
                {
                    "date": 1722402017791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,8 +193,9 @@\n     { value: 'transfer', label: 'Transfer' },\n   ]\n \n   const handleTypeChange = (value) => {\n+    console.log(value)\n     setPaymentType(value);\n   };\n \n   const resetForm = () => {\n"
                },
                {
                    "date": 1722402034422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,9 +193,9 @@\n     { value: 'transfer', label: 'Transfer' },\n   ]\n \n   const handleTypeChange = (value) => {\n-    console.log(value)\n+    console.log(value.value)\n     setPaymentType(value);\n   };\n \n   const resetForm = () => {\n"
                },
                {
                    "date": 1722402071191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,365 @@\n+// components/TransactionDrawer.js\n+import { getSession, useSession } from 'next-auth/react';\n+import { useState, useEffect, useRef } from 'react';\n+import { Drawer, Button, Input, FileInput, Textarea, Label, TextInput, Dropdown,Alert } from 'flowbite-react';\n+import {FaCalendarAlt, FaMoneyBill, FaRegArrowAltCircleDown, FaRegArrowAltCircleUp } from 'react-icons/fa';\n+import { FaExchangeAlt } from \"react-icons/fa\";\n+import { AiOutlineLoading } from \"react-icons/ai\";\n+import axios from 'axios';\n+import Autocomplete from '../Autocomplete';\n+import DatePicker from 'react-datepicker';\n+import 'react-datepicker/dist/react-datepicker.css'\n+import Select from 'react-select';\n+import moment from 'moment';\n+import 'moment/locale/id';\n+import id from \"date-fns/locale/id\";\n+moment.locale('id');\n+\n+const TransactionDrawer = ({ isOpen, onClose, onSubmit, transactionType }) => {\n+  const [houseId, setHouseId] = useState('');\n+  const [houseName, setHouseName] = useState('');\n+  const [amount, setAmount] = useState('');\n+  const [description, setDescription] = useState('');\n+  const [proofOfTransfer, setProofOfTransfer] = useState('');\n+  const [relatedMonths, setRelatedMonths] = useState([]);\n+  const [status, setStatus] = useState('berhasil');\n+  const [houses, setHouses] = useState([]);\n+  const [selectedHouse, setSelectedHouse] = useState(null);\n+  const [paymentDate, setPaymentDate] = useState(new Date());\n+  const { data: session } = useSession();\n+  const [errors, setErrors] = useState({});\n+  const [uploadUrl, setUploadUrl] = useState('');\n+  const fileInputRef = useRef(null);\n+  const [isProcessing, setIsProcessing] = useState(false);\n+  const [paymentType, setPaymentType] = useState('');\n+\n+  useEffect(() => {\n+    if (session) {\n+      const fetchHouses = async () => {\n+        try {\n+          const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/houses/all`, {\n+            headers: {\n+              Authorization: `Bearer ${session.accessToken}`,\n+            },\n+          });\n+          setHouses(res.data.map(house => ({\n+            value: house.house_id,\n+            label: house.house_id\n+          })));\n+        } catch (error) {\n+          console.error('Error fetching houses data:', error);\n+        }\n+      };\n+\n+      fetchHouses();\n+    }\n+  }, [session]);\n+\n+  useEffect(() => {\n+    if (transactionType === 'ipl') {\n+      if(relatedMonths.length > 0 && houseName ) {\n+        const monthLabels = relatedMonths.map(option => moment(option.value, \"YYYY-MM\").format(\"MMMM YYYY\")).join(', ');\n+        const descriptionText = `IPL ${houseName} periode ${monthLabels}`;\n+        setDescription(descriptionText);\n+      }\n+     \n+    }\n+  }, [houseId, relatedMonths, transactionType]);\n+\n+  const handleFileChange = (e) => {\n+    const file = e.target.files[0];\n+    if (file) {\n+        setProofOfTransfer(file); // Set file for upload\n+    }\n+  };\n+\n+  const handleFileUpload = async (file) => {\n+    const formData = new FormData();\n+    formData.append('file', file);\n+\n+    try {\n+        const response = await axios.post(`${process.env.NEXT_PUBLIC_API_URL}/upload`, formData, {\n+            headers: {\n+                'Content-Type': 'multipart/form-data',\n+            },\n+        });\n+        setUploadUrl(response.data.url);\n+        return response.data.url;\n+    } catch (error) {\n+        //console.error('Error uploading file:', error);\n+        //alert('Failed to upload file.');\n+        return null;\n+    }\n+ };\n+\n+  const handleSubmit = async (e) => {\n+    e.preventDefault();\n+    const newErrors = {};\n+\n+    if (!transactionType) newErrors.transactionType = 'Transaction type is required';\n+    if (!amount || amount <= 0) newErrors.amount = 'Amount must be a positive number';\n+    if (!description) newErrors.description = 'Description is required';\n+    if (!paymentDate) newErrors.paymentDate = 'Payment date is required';\n+    if (!relatedMonths) newErrors.relatedMonths = 'Months is required';\n+    if (transactionType === 'ipl' && !houseId) newErrors.houseId = 'House ID is required';\n+    if (paymentType === 'transfer' && !proofOfTransfer) newErrors.proofOfTransfer = 'Proof of transfer is required';\n+\n+    if (Object.keys(newErrors).length > 0) {\n+      setErrors(newErrors);\n+      return;\n+    }\n+\n+    setIsProcessing(true); // Start processing\n+\n+    let proofOfTransferUrl = uploadUrl;\n+    // If proofOfTransfer is a file that needs to be uploaded\n+    if (proofOfTransfer && proofOfTransfer instanceof File) {\n+      proofOfTransferUrl = await handleFileUpload(proofOfTransfer);\n+      if (!proofOfTransferUrl) return; // Abort if upload fails\n+    }\n+\n+    const convertStringToArray = (dateString) => {\n+      // Memisahkan string berdasarkan koma dan spasi\n+      const dateArray = dateString.split(', ').map(date => date.trim());\n+      return dateArray;\n+    };\n+\n+    const dateString = relatedMonths.map(option => option.value).join(', ');\n+    const dateArray = convertStringToArray(dateString);\n+\n+    console.log(paymentType);\n+\n+    //console.log(relatedMonths.map(option => option.value))\n+    const newTransaction = {\n+      transaction_type: transactionType,\n+      amount,\n+      description,\n+      proof_of_transfer: proofOfTransferUrl,\n+      houseId,\n+      payment_type: paymentType,\n+      related_months: dateArray,\n+      //relatedMonths:relatedMonths.map(option => moment(option.value, \"YYYY-MM\")).join(', '),\n+      paymentDate,\n+      status\n+    };\n+\n+   // console.log(newTransaction)\n+\n+    onSubmit(newTransaction);\n+    setHouseId('');\n+    setAmount('');\n+    setDescription('');\n+    setProofOfTransfer('');\n+    setRelatedMonths([]);\n+    setPaymentDate(new Date());\n+    setStatus('berhasil');\n+    fileInputRef.current.value = '';\n+    setPaymentType('');\n+    setIsProcessing(false); // Stop processing\n+    onClose();\n+  };\n+\n+  const handleHouseChange = (newValue) => {\n+    setHouseId(newValue);\n+  };\n+\n+  const handleHouseSelect = (selectedHouse) => {\n+    setHouseId(selectedHouse.value);\n+    setHouseName(selectedHouse.label)\n+    //setDescription(`IPL rumah ${selectedHouse.value} periode ${relatedMonths.join(', ')}`);\n+  };\n+\n+  const handleMonthChange = (selectedOptions) => {\n+    setRelatedMonths(selectedOptions || []);\n+  };\n+\n+  const generateMonthsOptions = () => {\n+    const options = [];\n+    const startYear = moment().year();\n+    const endYear = startYear + 2; // 2 tahun ke depan\n+\n+    for (let year = startYear; year <= endYear; year++) {\n+      for (let month = 0; month < 12; month++) {\n+        const value = moment().month(month).year(year).format(\"YYYY-MM\");\n+        const label = moment().month(month).year(year).format(\"MMMM YYYY\");\n+        options.push({ value, label });\n+      }\n+    }\n+    return options;\n+  };\n+\n+  const optionsType = [\n+    { value: 'cash', label: 'Cash' },\n+    { value: 'transfer', label: 'Transfer' },\n+  ]\n+\n+  const handleTypeChange = (e) => {\n+    console.log(e.target.value)\n+    setPaymentType(e);\n+  };\n+\n+  const resetForm = () => {\n+    setHouseId('');\n+    setAmount('');\n+    setDescription('');\n+    setProofOfTransfer('');\n+    setRelatedMonths([]);\n+    setPaymentDate(new Date());\n+    setStatus('berhasil');\n+    setPaymentType('');\n+    fileInputRef.current.value = '';\n+    setErrors({});\n+  };\n+\n+ \n+\n+  return (\n+    <Drawer\n+      open={isOpen}\n+      onClose={() => {\n+        resetForm();\n+        onClose();\n+      }}\n+      position=\"right\"\n+      className=\"py-4 px-7 top-0 z-50 w-full md:w-2/4\"\n+    >\n+      <Drawer.Header title={`Transaksi ${transactionType === 'ipl' ? 'IPL' : transactionType === 'income' ? 'Masuk' : 'Keluar'}`} titleIcon={FaExchangeAlt} />\n+      <Drawer.Items>\n+        <form onSubmit={handleSubmit} className=\"space-y-4\">\n+          {transactionType === 'ipl' && (\n+            <>\n+              <div className=\"mb-6 mt-3\">\n+                <Label htmlFor=\"houseId\" className=\"mb-2 block\">No Rumah</Label>\n+                <Autocomplete\n+                  value={houseId}\n+                  onChange={handleHouseChange}\n+                  options={houses}\n+                  onSelect={handleHouseSelect}\n+                />\n+                {errors.houseId && <div className=\"text-red-500 text-sm\">{errors.houseId}</div>}\n+              </div>\n+\n+              <div className=\"mb-6 mt-3\">\n+                <Label htmlFor=\"relatedMonths\" className=\"mb-2 block\">Periode</Label>\n+                <Select\n+                 id=\"relatedMonths\"\n+                 isMulti\n+                 options={generateMonthsOptions()}\n+                 value={relatedMonths}\n+                 onChange={handleMonthChange}\n+                 placeholder=\"Pilih bulan\"\n+                 className='bg-gray-50 text-sm'\n+                />\n+                {errors.relatedMonths && <div className=\"text-red-500 text-sm\">{errors.relatedMonths}</div>}\n+              </div>\n+            </>\n+          )}\n+\n+          <div className=\"mb-6 mt-3\">\n+            <Label htmlFor=\"description\" className=\"mb-2 block\">Deskripsi</Label>\n+            <Textarea\n+              id=\"description\"\n+              name=\"description\"\n+              value={description}\n+              onChange={(e) => setDescription(e.target.value)}\n+              placeholder=\"Masukkan deskripsi\"\n+              readOnly={transactionType === 'ipl'} // Make description read-only for IPL transactions\n+            />\n+            {errors.description && <div className=\"text-red-500 text-sm\">{errors.description}</div>}\n+          </div>\n+\n+          <div className=\"mb-6 mt-3\">\n+            <Label htmlFor=\"amount\" className=\"mb-2 block\">Jumlah</Label>\n+            <TextInput\n+              id=\"amount\"\n+              name=\"amount\"\n+              type=\"number\"\n+              value={amount}\n+              onChange={(e) => setAmount(e.target.value)}\n+              placeholder=\"Masukkan jumlah\"\n+            />\n+            {errors.amount && <div className=\"text-red-500 text-sm\">{errors.amount}</div>}\n+          </div>\n+\n+          <div className=\"mb-6 mt-3\">\n+            <Label htmlFor=\"payment_type\" className=\"mb-2 block\">Tipe Pembayaran</Label>\n+              <Select\n+                id=\"payment_type\"\n+                options={optionsType}\n+                value={paymentType}\n+                onChange={handleTypeChange}\n+                placeholder=\"Cash atau Transfer\"\n+                className='bg-gray-50 text-sm'\n+              />\n+            {/* {errors.amount && <div className=\"text-red-500 text-sm\">{errors.amount}</div>} */}\n+          </div>\n+\n+          <div className=\"mb-6 mt-3\">\n+              <Label htmlFor=\"proofOfTransfer\" className=\"mb-2 block\">Lampiran</Label>\n+              <FileInput \n+                id=\"file\" \n+                onChange={handleFileChange} \n+                accept=\".jpg,.png,.pdf\"\n+                ref={fileInputRef}\n+              />\n+              <TextInput\n+                id=\"proofOfTransfer\"\n+                name=\"proofOfTransfer\"\n+                value={proofOfTransfer}\n+                onChange={(e) => setProofOfTransfer(e.target.value)}\n+                placeholder=\"Masukkan URL lampiran\"\n+                className='hidden'\n+              />\n+              {errors.proofOfTransfer && <div className=\"text-red-500 text-sm\">{errors.proofOfTransfer}</div>}\n+            </div>\n+\n+          <div className=\"mb-6 mt-3\">\n+            <Label htmlFor=\"paymentDate\" className=\"mb-2 block\">Tanggal Pembayaran</Label>\n+            <div className='flex items-center w-72 relative border border-gray-300 rounded-md shadow-sm bg-gray-50'>\n+            <FaCalendarAlt className=\"absolute h-5 w-5 left-2 z-50 top-1/2 transform -translate-y-1/2 text-gray-500\" />\n+            <DatePicker\n+              locale={id}\n+              id=\"paymentDate\"\n+              name=\"paymentDate\"\n+              selected={paymentDate}\n+              onChange={(date) => setPaymentDate(date)}\n+              dateFormat=\"dd MMMM yyyy\"\n+              calendarClassName=\"light-blue-stripes\"\n+              placeholderText=\"Pilih tanggal\"\n+              className=\"block w-full pl-8 text-sm text-gray-900  border-gray-300 border-none rounded-md py-2 px-4 focus:ring-0 bg-gray-50\"\n+            />\n+            </div>\n+            {errors.paymentDate && <div className=\"text-red-500 text-sm\">{errors.paymentDate}</div>}\n+            \n+          </div>\n+\n+          <div className='flex gap-2'>\n+            <Button \n+            type=\"submit\" \n+            color={transactionType === 'ipl' ? 'success' : transactionType === 'income' ? 'blue' : 'failure'}\n+            disabled={isProcessing}\n+            >\n+              {isProcessing && <AiOutlineLoading className=\"h-5 w-5 animate-spin mr-2\" />}\n+              {transactionType === 'ipl' && <FaExchangeAlt className=\"mr-2 h-5 w-5\" />}\n+              {transactionType === 'income' && <FaRegArrowAltCircleDown className=\"mr-2 h-5 w-5\" />}\n+              {transactionType === 'expense' && <FaRegArrowAltCircleUp className=\"mr-2 h-5 w-5\" />}\n+              Simpan\n+            </Button>\n+            <Button\n+              type=\"button\"\n+              color=\"gray\"\n+              onClick={() => {\n+                resetForm();\n+                onClose();\n+              }}\n+            >\n+              Batal\n+            </Button>\n+          </div>\n+        </form>\n+      </Drawer.Items>\n+    </Drawer>\n+  );\n+};\n+\n+export default TransactionDrawer;\n"
                },
                {
                    "date": 1722402084160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,9 +193,9 @@\n     { value: 'transfer', label: 'Transfer' },\n   ]\n \n   const handleTypeChange = (e) => {\n-    console.log(e.target.value)\n+    console.log(e.target)\n     setPaymentType(e);\n   };\n \n   const resetForm = () => {\n@@ -362,369 +362,4 @@\n   );\n };\n \n export default TransactionDrawer;\n-// components/TransactionDrawer.js\n-import { getSession, useSession } from 'next-auth/react';\n-import { useState, useEffect, useRef } from 'react';\n-import { Drawer, Button, Input, FileInput, Textarea, Label, TextInput, Dropdown,Alert } from 'flowbite-react';\n-import {FaCalendarAlt, FaMoneyBill, FaRegArrowAltCircleDown, FaRegArrowAltCircleUp } from 'react-icons/fa';\n-import { FaExchangeAlt } from \"react-icons/fa\";\n-import { AiOutlineLoading } from \"react-icons/ai\";\n-import axios from 'axios';\n-import Autocomplete from '../Autocomplete';\n-import DatePicker from 'react-datepicker';\n-import 'react-datepicker/dist/react-datepicker.css'\n-import Select from 'react-select';\n-import moment from 'moment';\n-import 'moment/locale/id';\n-import id from \"date-fns/locale/id\";\n-moment.locale('id');\n-\n-const TransactionDrawer = ({ isOpen, onClose, onSubmit, transactionType }) => {\n-  const [houseId, setHouseId] = useState('');\n-  const [houseName, setHouseName] = useState('');\n-  const [amount, setAmount] = useState('');\n-  const [description, setDescription] = useState('');\n-  const [proofOfTransfer, setProofOfTransfer] = useState('');\n-  const [relatedMonths, setRelatedMonths] = useState([]);\n-  const [status, setStatus] = useState('berhasil');\n-  const [houses, setHouses] = useState([]);\n-  const [selectedHouse, setSelectedHouse] = useState(null);\n-  const [paymentDate, setPaymentDate] = useState(new Date());\n-  const { data: session } = useSession();\n-  const [errors, setErrors] = useState({});\n-  const [uploadUrl, setUploadUrl] = useState('');\n-  const fileInputRef = useRef(null);\n-  const [isProcessing, setIsProcessing] = useState(false);\n-  const [paymentType, setPaymentType] = useState('');\n-\n-  useEffect(() => {\n-    if (session) {\n-      const fetchHouses = async () => {\n-        try {\n-          const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/houses/all`, {\n-            headers: {\n-              Authorization: `Bearer ${session.accessToken}`,\n-            },\n-          });\n-          setHouses(res.data.map(house => ({\n-            value: house.house_id,\n-            label: house.house_id\n-          })));\n-        } catch (error) {\n-          console.error('Error fetching houses data:', error);\n-        }\n-      };\n-\n-      fetchHouses();\n-    }\n-  }, [session]);\n-\n-  useEffect(() => {\n-    if (transactionType === 'ipl') {\n-      if(relatedMonths.length > 0 && houseName ) {\n-        const monthLabels = relatedMonths.map(option => moment(option.value, \"YYYY-MM\").format(\"MMMM YYYY\")).join(', ');\n-        const descriptionText = `IPL ${houseName} periode ${monthLabels}`;\n-        setDescription(descriptionText);\n-      }\n-     \n-    }\n-  }, [houseId, relatedMonths, transactionType]);\n-\n-  const handleFileChange = (e) => {\n-    const file = e.target.files[0];\n-    if (file) {\n-        setProofOfTransfer(file); // Set file for upload\n-    }\n-  };\n-\n-  const handleFileUpload = async (file) => {\n-    const formData = new FormData();\n-    formData.append('file', file);\n-\n-    try {\n-        const response = await axios.post(`${process.env.NEXT_PUBLIC_API_URL}/upload`, formData, {\n-            headers: {\n-                'Content-Type': 'multipart/form-data',\n-            },\n-        });\n-        setUploadUrl(response.data.url);\n-        return response.data.url;\n-    } catch (error) {\n-        //console.error('Error uploading file:', error);\n-        //alert('Failed to upload file.');\n-        return null;\n-    }\n- };\n-\n-  const handleSubmit = async (e) => {\n-    e.preventDefault();\n-    const newErrors = {};\n-\n-    if (!transactionType) newErrors.transactionType = 'Transaction type is required';\n-    if (!amount || amount <= 0) newErrors.amount = 'Amount must be a positive number';\n-    if (!description) newErrors.description = 'Description is required';\n-    if (!paymentDate) newErrors.paymentDate = 'Payment date is required';\n-    if (!relatedMonths) newErrors.relatedMonths = 'Months is required';\n-    if (transactionType === 'ipl' && !houseId) newErrors.houseId = 'House ID is required';\n-    if (paymentType === 'transfer' && !proofOfTransfer) newErrors.proofOfTransfer = 'Proof of transfer is required';\n-\n-    if (Object.keys(newErrors).length > 0) {\n-      setErrors(newErrors);\n-      return;\n-    }\n-\n-    setIsProcessing(true); // Start processing\n-\n-    let proofOfTransferUrl = uploadUrl;\n-    // If proofOfTransfer is a file that needs to be uploaded\n-    if (proofOfTransfer && proofOfTransfer instanceof File) {\n-      proofOfTransferUrl = await handleFileUpload(proofOfTransfer);\n-      if (!proofOfTransferUrl) return; // Abort if upload fails\n-    }\n-\n-    const convertStringToArray = (dateString) => {\n-      // Memisahkan string berdasarkan koma dan spasi\n-      const dateArray = dateString.split(', ').map(date => date.trim());\n-      return dateArray;\n-    };\n-\n-    const dateString = relatedMonths.map(option => option.value).join(', ');\n-    const dateArray = convertStringToArray(dateString);\n-\n-    console.log(paymentType);\n-\n-    //console.log(relatedMonths.map(option => option.value))\n-    const newTransaction = {\n-      transaction_type: transactionType,\n-      amount,\n-      description,\n-      proof_of_transfer: proofOfTransferUrl,\n-      houseId,\n-      payment_type: paymentType,\n-      related_months: dateArray,\n-      //relatedMonths:relatedMonths.map(option => moment(option.value, \"YYYY-MM\")).join(', '),\n-      paymentDate,\n-      status\n-    };\n-\n-   // console.log(newTransaction)\n-\n-    onSubmit(newTransaction);\n-    setHouseId('');\n-    setAmount('');\n-    setDescription('');\n-    setProofOfTransfer('');\n-    setRelatedMonths([]);\n-    setPaymentDate(new Date());\n-    setStatus('berhasil');\n-    fileInputRef.current.value = '';\n-    setPaymentType('');\n-    setIsProcessing(false); // Stop processing\n-    onClose();\n-  };\n-\n-  const handleHouseChange = (newValue) => {\n-    setHouseId(newValue);\n-  };\n-\n-  const handleHouseSelect = (selectedHouse) => {\n-    setHouseId(selectedHouse.value);\n-    setHouseName(selectedHouse.label)\n-    //setDescription(`IPL rumah ${selectedHouse.value} periode ${relatedMonths.join(', ')}`);\n-  };\n-\n-  const handleMonthChange = (selectedOptions) => {\n-    setRelatedMonths(selectedOptions || []);\n-  };\n-\n-  const generateMonthsOptions = () => {\n-    const options = [];\n-    const startYear = moment().year();\n-    const endYear = startYear + 2; // 2 tahun ke depan\n-\n-    for (let year = startYear; year <= endYear; year++) {\n-      for (let month = 0; month < 12; month++) {\n-        const value = moment().month(month).year(year).format(\"YYYY-MM\");\n-        const label = moment().month(month).year(year).format(\"MMMM YYYY\");\n-        options.push({ value, label });\n-      }\n-    }\n-    return options;\n-  };\n-\n-  const optionsType = [\n-    { value: 'cash', label: 'Cash' },\n-    { value: 'transfer', label: 'Transfer' },\n-  ]\n-\n-  const handleTypeChange = (value) => {\n-    console.log(value.value)\n-    setPaymentType(value);\n-  };\n-\n-  const resetForm = () => {\n-    setHouseId('');\n-    setAmount('');\n-    setDescription('');\n-    setProofOfTransfer('');\n-    setRelatedMonths([]);\n-    setPaymentDate(new Date());\n-    setStatus('berhasil');\n-    setPaymentType('');\n-    fileInputRef.current.value = '';\n-    setErrors({});\n-  };\n-\n- \n-\n-  return (\n-    <Drawer\n-      open={isOpen}\n-      onClose={() => {\n-        resetForm();\n-        onClose();\n-      }}\n-      position=\"right\"\n-      className=\"py-4 px-7 top-0 z-50 w-full md:w-2/4\"\n-    >\n-      <Drawer.Header title={`Transaksi ${transactionType === 'ipl' ? 'IPL' : transactionType === 'income' ? 'Masuk' : 'Keluar'}`} titleIcon={FaExchangeAlt} />\n-      <Drawer.Items>\n-        <form onSubmit={handleSubmit} className=\"space-y-4\">\n-          {transactionType === 'ipl' && (\n-            <>\n-              <div className=\"mb-6 mt-3\">\n-                <Label htmlFor=\"houseId\" className=\"mb-2 block\">No Rumah</Label>\n-                <Autocomplete\n-                  value={houseId}\n-                  onChange={handleHouseChange}\n-                  options={houses}\n-                  onSelect={handleHouseSelect}\n-                />\n-                {errors.houseId && <div className=\"text-red-500 text-sm\">{errors.houseId}</div>}\n-              </div>\n-\n-              <div className=\"mb-6 mt-3\">\n-                <Label htmlFor=\"relatedMonths\" className=\"mb-2 block\">Periode</Label>\n-                <Select\n-                 id=\"relatedMonths\"\n-                 isMulti\n-                 options={generateMonthsOptions()}\n-                 value={relatedMonths}\n-                 onChange={handleMonthChange}\n-                 placeholder=\"Pilih bulan\"\n-                 className='bg-gray-50 text-sm'\n-                />\n-                {errors.relatedMonths && <div className=\"text-red-500 text-sm\">{errors.relatedMonths}</div>}\n-              </div>\n-            </>\n-          )}\n-\n-          <div className=\"mb-6 mt-3\">\n-            <Label htmlFor=\"description\" className=\"mb-2 block\">Deskripsi</Label>\n-            <Textarea\n-              id=\"description\"\n-              name=\"description\"\n-              value={description}\n-              onChange={(e) => setDescription(e.target.value)}\n-              placeholder=\"Masukkan deskripsi\"\n-              readOnly={transactionType === 'ipl'} // Make description read-only for IPL transactions\n-            />\n-            {errors.description && <div className=\"text-red-500 text-sm\">{errors.description}</div>}\n-          </div>\n-\n-          <div className=\"mb-6 mt-3\">\n-            <Label htmlFor=\"amount\" className=\"mb-2 block\">Jumlah</Label>\n-            <TextInput\n-              id=\"amount\"\n-              name=\"amount\"\n-              type=\"number\"\n-              value={amount}\n-              onChange={(e) => setAmount(e.target.value)}\n-              placeholder=\"Masukkan jumlah\"\n-            />\n-            {errors.amount && <div className=\"text-red-500 text-sm\">{errors.amount}</div>}\n-          </div>\n-\n-          <div className=\"mb-6 mt-3\">\n-            <Label htmlFor=\"payment_type\" className=\"mb-2 block\">Tipe Pembayaran</Label>\n-              <Select\n-                id=\"payment_type\"\n-                options={optionsType}\n-                value={paymentType}\n-                onChange={handleTypeChange}\n-                placeholder=\"Cash atau Transfer\"\n-                className='bg-gray-50 text-sm'\n-              />\n-            {/* {errors.amount && <div className=\"text-red-500 text-sm\">{errors.amount}</div>} */}\n-          </div>\n-\n-          <div className=\"mb-6 mt-3\">\n-              <Label htmlFor=\"proofOfTransfer\" className=\"mb-2 block\">Lampiran</Label>\n-              <FileInput \n-                id=\"file\" \n-                onChange={handleFileChange} \n-                accept=\".jpg,.png,.pdf\"\n-                ref={fileInputRef}\n-              />\n-              <TextInput\n-                id=\"proofOfTransfer\"\n-                name=\"proofOfTransfer\"\n-                value={proofOfTransfer}\n-                onChange={(e) => setProofOfTransfer(e.target.value)}\n-                placeholder=\"Masukkan URL lampiran\"\n-                className='hidden'\n-              />\n-              {errors.proofOfTransfer && <div className=\"text-red-500 text-sm\">{errors.proofOfTransfer}</div>}\n-            </div>\n-\n-          <div className=\"mb-6 mt-3\">\n-            <Label htmlFor=\"paymentDate\" className=\"mb-2 block\">Tanggal Pembayaran</Label>\n-            <div className='flex items-center w-72 relative border border-gray-300 rounded-md shadow-sm bg-gray-50'>\n-            <FaCalendarAlt className=\"absolute h-5 w-5 left-2 z-50 top-1/2 transform -translate-y-1/2 text-gray-500\" />\n-            <DatePicker\n-              locale={id}\n-              id=\"paymentDate\"\n-              name=\"paymentDate\"\n-              selected={paymentDate}\n-              onChange={(date) => setPaymentDate(date)}\n-              dateFormat=\"dd MMMM yyyy\"\n-              calendarClassName=\"light-blue-stripes\"\n-              placeholderText=\"Pilih tanggal\"\n-              className=\"block w-full pl-8 text-sm text-gray-900  border-gray-300 border-none rounded-md py-2 px-4 focus:ring-0 bg-gray-50\"\n-            />\n-            </div>\n-            {errors.paymentDate && <div className=\"text-red-500 text-sm\">{errors.paymentDate}</div>}\n-            \n-          </div>\n-\n-          <div className='flex gap-2'>\n-            <Button \n-            type=\"submit\" \n-            color={transactionType === 'ipl' ? 'success' : transactionType === 'income' ? 'blue' : 'failure'}\n-            disabled={isProcessing}\n-            >\n-              {isProcessing && <AiOutlineLoading className=\"h-5 w-5 animate-spin mr-2\" />}\n-              {transactionType === 'ipl' && <FaExchangeAlt className=\"mr-2 h-5 w-5\" />}\n-              {transactionType === 'income' && <FaRegArrowAltCircleDown className=\"mr-2 h-5 w-5\" />}\n-              {transactionType === 'expense' && <FaRegArrowAltCircleUp className=\"mr-2 h-5 w-5\" />}\n-              Simpan\n-            </Button>\n-            <Button\n-              type=\"button\"\n-              color=\"gray\"\n-              onClick={() => {\n-                resetForm();\n-                onClose();\n-              }}\n-            >\n-              Batal\n-            </Button>\n-          </div>\n-        </form>\n-      </Drawer.Items>\n-    </Drawer>\n-  );\n-};\n-\n-export default TransactionDrawer;\n"
                },
                {
                    "date": 1722402093146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,9 +193,9 @@\n     { value: 'transfer', label: 'Transfer' },\n   ]\n \n   const handleTypeChange = (e) => {\n-    console.log(e.target)\n+    console.log(e.value)\n     setPaymentType(e);\n   };\n \n   const resetForm = () => {\n"
                },
                {
                    "date": 1722402109775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,10 +193,10 @@\n     { value: 'transfer', label: 'Transfer' },\n   ]\n \n   const handleTypeChange = (e) => {\n-    console.log(e.value)\n-    setPaymentType(e);\n+    //console.log(e.value)\n+    setPaymentType(e.value);\n   };\n \n   const resetForm = () => {\n     setHouseId('');\n"
                },
                {
                    "date": 1722402378739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,9 +193,9 @@\n     { value: 'transfer', label: 'Transfer' },\n   ]\n \n   const handleTypeChange = (e) => {\n-    //console.log(e.value)\n+    console.log(e.value)\n     setPaymentType(e.value);\n   };\n \n   const resetForm = () => {\n"
                },
                {
                    "date": 1722402405241,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,9 +194,9 @@\n   ]\n \n   const handleTypeChange = (e) => {\n     console.log(e.value)\n-    setPaymentType(e.value);\n+    setPaymentType(e);\n   };\n \n   const resetForm = () => {\n     setHouseId('');\n"
                },
                {
                    "date": 1722402415555,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,364 @@\n+// components/TransactionDrawer.js\n+import { getSession, useSession } from 'next-auth/react';\n+import { useState, useEffect, useRef } from 'react';\n+import { Drawer, Button, Input, FileInput, Textarea, Label, TextInput, Dropdown,Alert } from 'flowbite-react';\n+import {FaCalendarAlt, FaMoneyBill, FaRegArrowAltCircleDown, FaRegArrowAltCircleUp } from 'react-icons/fa';\n+import { FaExchangeAlt } from \"react-icons/fa\";\n+import { AiOutlineLoading } from \"react-icons/ai\";\n+import axios from 'axios';\n+import Autocomplete from '../Autocomplete';\n+import DatePicker from 'react-datepicker';\n+import 'react-datepicker/dist/react-datepicker.css'\n+import Select from 'react-select';\n+import moment from 'moment';\n+import 'moment/locale/id';\n+import id from \"date-fns/locale/id\";\n+moment.locale('id');\n+\n+const TransactionDrawer = ({ isOpen, onClose, onSubmit, transactionType }) => {\n+  const [houseId, setHouseId] = useState('');\n+  const [houseName, setHouseName] = useState('');\n+  const [amount, setAmount] = useState('');\n+  const [description, setDescription] = useState('');\n+  const [proofOfTransfer, setProofOfTransfer] = useState('');\n+  const [relatedMonths, setRelatedMonths] = useState([]);\n+  const [status, setStatus] = useState('berhasil');\n+  const [houses, setHouses] = useState([]);\n+  const [selectedHouse, setSelectedHouse] = useState(null);\n+  const [paymentDate, setPaymentDate] = useState(new Date());\n+  const { data: session } = useSession();\n+  const [errors, setErrors] = useState({});\n+  const [uploadUrl, setUploadUrl] = useState('');\n+  const fileInputRef = useRef(null);\n+  const [isProcessing, setIsProcessing] = useState(false);\n+  const [paymentType, setPaymentType] = useState('');\n+\n+  useEffect(() => {\n+    if (session) {\n+      const fetchHouses = async () => {\n+        try {\n+          const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/houses/all`, {\n+            headers: {\n+              Authorization: `Bearer ${session.accessToken}`,\n+            },\n+          });\n+          setHouses(res.data.map(house => ({\n+            value: house.house_id,\n+            label: house.house_id\n+          })));\n+        } catch (error) {\n+          console.error('Error fetching houses data:', error);\n+        }\n+      };\n+\n+      fetchHouses();\n+    }\n+  }, [session]);\n+\n+  useEffect(() => {\n+    if (transactionType === 'ipl') {\n+      if(relatedMonths.length > 0 && houseName ) {\n+        const monthLabels = relatedMonths.map(option => moment(option.value, \"YYYY-MM\").format(\"MMMM YYYY\")).join(', ');\n+        const descriptionText = `IPL ${houseName} periode ${monthLabels}`;\n+        setDescription(descriptionText);\n+      }\n+     \n+    }\n+  }, [houseId, relatedMonths, transactionType]);\n+\n+  const handleFileChange = (e) => {\n+    const file = e.target.files[0];\n+    if (file) {\n+        setProofOfTransfer(file); // Set file for upload\n+    }\n+  };\n+\n+  const handleFileUpload = async (file) => {\n+    const formData = new FormData();\n+    formData.append('file', file);\n+\n+    try {\n+        const response = await axios.post(`${process.env.NEXT_PUBLIC_API_URL}/upload`, formData, {\n+            headers: {\n+                'Content-Type': 'multipart/form-data',\n+            },\n+        });\n+        setUploadUrl(response.data.url);\n+        return response.data.url;\n+    } catch (error) {\n+        //console.error('Error uploading file:', error);\n+        //alert('Failed to upload file.');\n+        return null;\n+    }\n+ };\n+\n+  const handleSubmit = async (e) => {\n+    e.preventDefault();\n+    const newErrors = {};\n+\n+    if (!transactionType) newErrors.transactionType = 'Transaction type is required';\n+    if (!amount || amount <= 0) newErrors.amount = 'Amount must be a positive number';\n+    if (!description) newErrors.description = 'Description is required';\n+    if (!paymentDate) newErrors.paymentDate = 'Payment date is required';\n+    if (!relatedMonths) newErrors.relatedMonths = 'Months is required';\n+    if (transactionType === 'ipl' && !houseId) newErrors.houseId = 'House ID is required';\n+    if (paymentType === 'transfer' && !proofOfTransfer) newErrors.proofOfTransfer = 'Proof of transfer is required';\n+\n+    if (Object.keys(newErrors).length > 0) {\n+      setErrors(newErrors);\n+      return;\n+    }\n+\n+    setIsProcessing(true); // Start processing\n+\n+    let proofOfTransferUrl = uploadUrl;\n+    // If proofOfTransfer is a file that needs to be uploaded\n+    if (proofOfTransfer && proofOfTransfer instanceof File) {\n+      proofOfTransferUrl = await handleFileUpload(proofOfTransfer);\n+      if (!proofOfTransferUrl) return; // Abort if upload fails\n+    }\n+\n+    const convertStringToArray = (dateString) => {\n+      // Memisahkan string berdasarkan koma dan spasi\n+      const dateArray = dateString.split(', ').map(date => date.trim());\n+      return dateArray;\n+    };\n+\n+    const dateString = relatedMonths.map(option => option.value).join(', ');\n+    const dateArray = convertStringToArray(dateString);\n+\n+    console.log(paymentType);\n+\n+    //console.log(relatedMonths.map(option => option.value))\n+    const newTransaction = {\n+      transaction_type: transactionType,\n+      amount,\n+      description,\n+      proof_of_transfer: proofOfTransferUrl,\n+      houseId,\n+      payment_type: paymentType,\n+      related_months: dateArray,\n+      //relatedMonths:relatedMonths.map(option => moment(option.value, \"YYYY-MM\")).join(', '),\n+      paymentDate,\n+      status\n+    };\n+\n+   // console.log(newTransaction)\n+\n+    onSubmit(newTransaction);\n+    setHouseId('');\n+    setAmount('');\n+    setDescription('');\n+    setProofOfTransfer('');\n+    setRelatedMonths([]);\n+    setPaymentDate(new Date());\n+    setStatus('berhasil');\n+    fileInputRef.current.value = '';\n+    setPaymentType('');\n+    setIsProcessing(false); // Stop processing\n+    onClose();\n+  };\n+\n+  const handleHouseChange = (newValue) => {\n+    setHouseId(newValue);\n+  };\n+\n+  const handleHouseSelect = (selectedHouse) => {\n+    setHouseId(selectedHouse.value);\n+    setHouseName(selectedHouse.label)\n+    //setDescription(`IPL rumah ${selectedHouse.value} periode ${relatedMonths.join(', ')}`);\n+  };\n+\n+  const handleMonthChange = (selectedOptions) => {\n+    setRelatedMonths(selectedOptions || []);\n+  };\n+\n+  const generateMonthsOptions = () => {\n+    const options = [];\n+    const startYear = moment().year();\n+    const endYear = startYear + 2; // 2 tahun ke depan\n+\n+    for (let year = startYear; year <= endYear; year++) {\n+      for (let month = 0; month < 12; month++) {\n+        const value = moment().month(month).year(year).format(\"YYYY-MM\");\n+        const label = moment().month(month).year(year).format(\"MMMM YYYY\");\n+        options.push({ value, label });\n+      }\n+    }\n+    return options;\n+  };\n+\n+  const optionsType = [\n+    { value: 'cash', label: 'Cash' },\n+    { value: 'transfer', label: 'Transfer' },\n+  ]\n+\n+  const handleTypeChange = (e) => {\n+    setPaymentType(e);\n+  };\n+\n+  const resetForm = () => {\n+    setHouseId('');\n+    setAmount('');\n+    setDescription('');\n+    setProofOfTransfer('');\n+    setRelatedMonths([]);\n+    setPaymentDate(new Date());\n+    setStatus('berhasil');\n+    setPaymentType('');\n+    fileInputRef.current.value = '';\n+    setErrors({});\n+  };\n+\n+ \n+\n+  return (\n+    <Drawer\n+      open={isOpen}\n+      onClose={() => {\n+        resetForm();\n+        onClose();\n+      }}\n+      position=\"right\"\n+      className=\"py-4 px-7 top-0 z-50 w-full md:w-2/4\"\n+    >\n+      <Drawer.Header title={`Transaksi ${transactionType === 'ipl' ? 'IPL' : transactionType === 'income' ? 'Masuk' : 'Keluar'}`} titleIcon={FaExchangeAlt} />\n+      <Drawer.Items>\n+        <form onSubmit={handleSubmit} className=\"space-y-4\">\n+          {transactionType === 'ipl' && (\n+            <>\n+              <div className=\"mb-6 mt-3\">\n+                <Label htmlFor=\"houseId\" className=\"mb-2 block\">No Rumah</Label>\n+                <Autocomplete\n+                  value={houseId}\n+                  onChange={handleHouseChange}\n+                  options={houses}\n+                  onSelect={handleHouseSelect}\n+                />\n+                {errors.houseId && <div className=\"text-red-500 text-sm\">{errors.houseId}</div>}\n+              </div>\n+\n+              <div className=\"mb-6 mt-3\">\n+                <Label htmlFor=\"relatedMonths\" className=\"mb-2 block\">Periode</Label>\n+                <Select\n+                 id=\"relatedMonths\"\n+                 isMulti\n+                 options={generateMonthsOptions()}\n+                 value={relatedMonths}\n+                 onChange={handleMonthChange}\n+                 placeholder=\"Pilih bulan\"\n+                 className='bg-gray-50 text-sm'\n+                />\n+                {errors.relatedMonths && <div className=\"text-red-500 text-sm\">{errors.relatedMonths}</div>}\n+              </div>\n+            </>\n+          )}\n+\n+          <div className=\"mb-6 mt-3\">\n+            <Label htmlFor=\"description\" className=\"mb-2 block\">Deskripsi</Label>\n+            <Textarea\n+              id=\"description\"\n+              name=\"description\"\n+              value={description}\n+              onChange={(e) => setDescription(e.target.value)}\n+              placeholder=\"Masukkan deskripsi\"\n+              readOnly={transactionType === 'ipl'} // Make description read-only for IPL transactions\n+            />\n+            {errors.description && <div className=\"text-red-500 text-sm\">{errors.description}</div>}\n+          </div>\n+\n+          <div className=\"mb-6 mt-3\">\n+            <Label htmlFor=\"amount\" className=\"mb-2 block\">Jumlah</Label>\n+            <TextInput\n+              id=\"amount\"\n+              name=\"amount\"\n+              type=\"number\"\n+              value={amount}\n+              onChange={(e) => setAmount(e.target.value)}\n+              placeholder=\"Masukkan jumlah\"\n+            />\n+            {errors.amount && <div className=\"text-red-500 text-sm\">{errors.amount}</div>}\n+          </div>\n+\n+          <div className=\"mb-6 mt-3\">\n+            <Label htmlFor=\"payment_type\" className=\"mb-2 block\">Tipe Pembayaran</Label>\n+              <Select\n+                id=\"payment_type\"\n+                options={optionsType}\n+                value={paymentType}\n+                onChange={handleTypeChange}\n+                placeholder=\"Cash atau Transfer\"\n+                className='bg-gray-50 text-sm'\n+              />\n+            {/* {errors.amount && <div className=\"text-red-500 text-sm\">{errors.amount}</div>} */}\n+          </div>\n+\n+          <div className=\"mb-6 mt-3\">\n+              <Label htmlFor=\"proofOfTransfer\" className=\"mb-2 block\">Lampiran</Label>\n+              <FileInput \n+                id=\"file\" \n+                onChange={handleFileChange} \n+                accept=\".jpg,.png,.pdf\"\n+                ref={fileInputRef}\n+              />\n+              <TextInput\n+                id=\"proofOfTransfer\"\n+                name=\"proofOfTransfer\"\n+                value={proofOfTransfer}\n+                onChange={(e) => setProofOfTransfer(e.target.value)}\n+                placeholder=\"Masukkan URL lampiran\"\n+                className='hidden'\n+              />\n+              {errors.proofOfTransfer && <div className=\"text-red-500 text-sm\">{errors.proofOfTransfer}</div>}\n+            </div>\n+\n+          <div className=\"mb-6 mt-3\">\n+            <Label htmlFor=\"paymentDate\" className=\"mb-2 block\">Tanggal Pembayaran</Label>\n+            <div className='flex items-center w-72 relative border border-gray-300 rounded-md shadow-sm bg-gray-50'>\n+            <FaCalendarAlt className=\"absolute h-5 w-5 left-2 z-50 top-1/2 transform -translate-y-1/2 text-gray-500\" />\n+            <DatePicker\n+              locale={id}\n+              id=\"paymentDate\"\n+              name=\"paymentDate\"\n+              selected={paymentDate}\n+              onChange={(date) => setPaymentDate(date)}\n+              dateFormat=\"dd MMMM yyyy\"\n+              calendarClassName=\"light-blue-stripes\"\n+              placeholderText=\"Pilih tanggal\"\n+              className=\"block w-full pl-8 text-sm text-gray-900  border-gray-300 border-none rounded-md py-2 px-4 focus:ring-0 bg-gray-50\"\n+            />\n+            </div>\n+            {errors.paymentDate && <div className=\"text-red-500 text-sm\">{errors.paymentDate}</div>}\n+            \n+          </div>\n+\n+          <div className='flex gap-2'>\n+            <Button \n+            type=\"submit\" \n+            color={transactionType === 'ipl' ? 'success' : transactionType === 'income' ? 'blue' : 'failure'}\n+            disabled={isProcessing}\n+            >\n+              {isProcessing && <AiOutlineLoading className=\"h-5 w-5 animate-spin mr-2\" />}\n+              {transactionType === 'ipl' && <FaExchangeAlt className=\"mr-2 h-5 w-5\" />}\n+              {transactionType === 'income' && <FaRegArrowAltCircleDown className=\"mr-2 h-5 w-5\" />}\n+              {transactionType === 'expense' && <FaRegArrowAltCircleUp className=\"mr-2 h-5 w-5\" />}\n+              Simpan\n+            </Button>\n+            <Button\n+              type=\"button\"\n+              color=\"gray\"\n+              onClick={() => {\n+                resetForm();\n+                onClose();\n+              }}\n+            >\n+              Batal\n+            </Button>\n+          </div>\n+        </form>\n+      </Drawer.Items>\n+    </Drawer>\n+  );\n+};\n+\n+export default TransactionDrawer;\n"
                },
                {
                    "date": 1722402544328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,9 @@\n \n     const dateString = relatedMonths.map(option => option.value).join(', ');\n     const dateArray = convertStringToArray(dateString);\n \n-    console.log(paymentType);\n+    console.log(paymentType.value);\n \n     //console.log(relatedMonths.map(option => option.value))\n     const newTransaction = {\n       transaction_type: transactionType,\n@@ -361,369 +361,4 @@\n   );\n };\n \n export default TransactionDrawer;\n-// components/TransactionDrawer.js\n-import { getSession, useSession } from 'next-auth/react';\n-import { useState, useEffect, useRef } from 'react';\n-import { Drawer, Button, Input, FileInput, Textarea, Label, TextInput, Dropdown,Alert } from 'flowbite-react';\n-import {FaCalendarAlt, FaMoneyBill, FaRegArrowAltCircleDown, FaRegArrowAltCircleUp } from 'react-icons/fa';\n-import { FaExchangeAlt } from \"react-icons/fa\";\n-import { AiOutlineLoading } from \"react-icons/ai\";\n-import axios from 'axios';\n-import Autocomplete from '../Autocomplete';\n-import DatePicker from 'react-datepicker';\n-import 'react-datepicker/dist/react-datepicker.css'\n-import Select from 'react-select';\n-import moment from 'moment';\n-import 'moment/locale/id';\n-import id from \"date-fns/locale/id\";\n-moment.locale('id');\n-\n-const TransactionDrawer = ({ isOpen, onClose, onSubmit, transactionType }) => {\n-  const [houseId, setHouseId] = useState('');\n-  const [houseName, setHouseName] = useState('');\n-  const [amount, setAmount] = useState('');\n-  const [description, setDescription] = useState('');\n-  const [proofOfTransfer, setProofOfTransfer] = useState('');\n-  const [relatedMonths, setRelatedMonths] = useState([]);\n-  const [status, setStatus] = useState('berhasil');\n-  const [houses, setHouses] = useState([]);\n-  const [selectedHouse, setSelectedHouse] = useState(null);\n-  const [paymentDate, setPaymentDate] = useState(new Date());\n-  const { data: session } = useSession();\n-  const [errors, setErrors] = useState({});\n-  const [uploadUrl, setUploadUrl] = useState('');\n-  const fileInputRef = useRef(null);\n-  const [isProcessing, setIsProcessing] = useState(false);\n-  const [paymentType, setPaymentType] = useState('');\n-\n-  useEffect(() => {\n-    if (session) {\n-      const fetchHouses = async () => {\n-        try {\n-          const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/houses/all`, {\n-            headers: {\n-              Authorization: `Bearer ${session.accessToken}`,\n-            },\n-          });\n-          setHouses(res.data.map(house => ({\n-            value: house.house_id,\n-            label: house.house_id\n-          })));\n-        } catch (error) {\n-          console.error('Error fetching houses data:', error);\n-        }\n-      };\n-\n-      fetchHouses();\n-    }\n-  }, [session]);\n-\n-  useEffect(() => {\n-    if (transactionType === 'ipl') {\n-      if(relatedMonths.length > 0 && houseName ) {\n-        const monthLabels = relatedMonths.map(option => moment(option.value, \"YYYY-MM\").format(\"MMMM YYYY\")).join(', ');\n-        const descriptionText = `IPL ${houseName} periode ${monthLabels}`;\n-        setDescription(descriptionText);\n-      }\n-     \n-    }\n-  }, [houseId, relatedMonths, transactionType]);\n-\n-  const handleFileChange = (e) => {\n-    const file = e.target.files[0];\n-    if (file) {\n-        setProofOfTransfer(file); // Set file for upload\n-    }\n-  };\n-\n-  const handleFileUpload = async (file) => {\n-    const formData = new FormData();\n-    formData.append('file', file);\n-\n-    try {\n-        const response = await axios.post(`${process.env.NEXT_PUBLIC_API_URL}/upload`, formData, {\n-            headers: {\n-                'Content-Type': 'multipart/form-data',\n-            },\n-        });\n-        setUploadUrl(response.data.url);\n-        return response.data.url;\n-    } catch (error) {\n-        //console.error('Error uploading file:', error);\n-        //alert('Failed to upload file.');\n-        return null;\n-    }\n- };\n-\n-  const handleSubmit = async (e) => {\n-    e.preventDefault();\n-    const newErrors = {};\n-\n-    if (!transactionType) newErrors.transactionType = 'Transaction type is required';\n-    if (!amount || amount <= 0) newErrors.amount = 'Amount must be a positive number';\n-    if (!description) newErrors.description = 'Description is required';\n-    if (!paymentDate) newErrors.paymentDate = 'Payment date is required';\n-    if (!relatedMonths) newErrors.relatedMonths = 'Months is required';\n-    if (transactionType === 'ipl' && !houseId) newErrors.houseId = 'House ID is required';\n-    if (paymentType === 'transfer' && !proofOfTransfer) newErrors.proofOfTransfer = 'Proof of transfer is required';\n-\n-    if (Object.keys(newErrors).length > 0) {\n-      setErrors(newErrors);\n-      return;\n-    }\n-\n-    setIsProcessing(true); // Start processing\n-\n-    let proofOfTransferUrl = uploadUrl;\n-    // If proofOfTransfer is a file that needs to be uploaded\n-    if (proofOfTransfer && proofOfTransfer instanceof File) {\n-      proofOfTransferUrl = await handleFileUpload(proofOfTransfer);\n-      if (!proofOfTransferUrl) return; // Abort if upload fails\n-    }\n-\n-    const convertStringToArray = (dateString) => {\n-      // Memisahkan string berdasarkan koma dan spasi\n-      const dateArray = dateString.split(', ').map(date => date.trim());\n-      return dateArray;\n-    };\n-\n-    const dateString = relatedMonths.map(option => option.value).join(', ');\n-    const dateArray = convertStringToArray(dateString);\n-\n-    console.log(paymentType);\n-\n-    //console.log(relatedMonths.map(option => option.value))\n-    const newTransaction = {\n-      transaction_type: transactionType,\n-      amount,\n-      description,\n-      proof_of_transfer: proofOfTransferUrl,\n-      houseId,\n-      payment_type: paymentType,\n-      related_months: dateArray,\n-      //relatedMonths:relatedMonths.map(option => moment(option.value, \"YYYY-MM\")).join(', '),\n-      paymentDate,\n-      status\n-    };\n-\n-   // console.log(newTransaction)\n-\n-    onSubmit(newTransaction);\n-    setHouseId('');\n-    setAmount('');\n-    setDescription('');\n-    setProofOfTransfer('');\n-    setRelatedMonths([]);\n-    setPaymentDate(new Date());\n-    setStatus('berhasil');\n-    fileInputRef.current.value = '';\n-    setPaymentType('');\n-    setIsProcessing(false); // Stop processing\n-    onClose();\n-  };\n-\n-  const handleHouseChange = (newValue) => {\n-    setHouseId(newValue);\n-  };\n-\n-  const handleHouseSelect = (selectedHouse) => {\n-    setHouseId(selectedHouse.value);\n-    setHouseName(selectedHouse.label)\n-    //setDescription(`IPL rumah ${selectedHouse.value} periode ${relatedMonths.join(', ')}`);\n-  };\n-\n-  const handleMonthChange = (selectedOptions) => {\n-    setRelatedMonths(selectedOptions || []);\n-  };\n-\n-  const generateMonthsOptions = () => {\n-    const options = [];\n-    const startYear = moment().year();\n-    const endYear = startYear + 2; // 2 tahun ke depan\n-\n-    for (let year = startYear; year <= endYear; year++) {\n-      for (let month = 0; month < 12; month++) {\n-        const value = moment().month(month).year(year).format(\"YYYY-MM\");\n-        const label = moment().month(month).year(year).format(\"MMMM YYYY\");\n-        options.push({ value, label });\n-      }\n-    }\n-    return options;\n-  };\n-\n-  const optionsType = [\n-    { value: 'cash', label: 'Cash' },\n-    { value: 'transfer', label: 'Transfer' },\n-  ]\n-\n-  const handleTypeChange = (e) => {\n-    console.log(e.value)\n-    setPaymentType(e);\n-  };\n-\n-  const resetForm = () => {\n-    setHouseId('');\n-    setAmount('');\n-    setDescription('');\n-    setProofOfTransfer('');\n-    setRelatedMonths([]);\n-    setPaymentDate(new Date());\n-    setStatus('berhasil');\n-    setPaymentType('');\n-    fileInputRef.current.value = '';\n-    setErrors({});\n-  };\n-\n- \n-\n-  return (\n-    <Drawer\n-      open={isOpen}\n-      onClose={() => {\n-        resetForm();\n-        onClose();\n-      }}\n-      position=\"right\"\n-      className=\"py-4 px-7 top-0 z-50 w-full md:w-2/4\"\n-    >\n-      <Drawer.Header title={`Transaksi ${transactionType === 'ipl' ? 'IPL' : transactionType === 'income' ? 'Masuk' : 'Keluar'}`} titleIcon={FaExchangeAlt} />\n-      <Drawer.Items>\n-        <form onSubmit={handleSubmit} className=\"space-y-4\">\n-          {transactionType === 'ipl' && (\n-            <>\n-              <div className=\"mb-6 mt-3\">\n-                <Label htmlFor=\"houseId\" className=\"mb-2 block\">No Rumah</Label>\n-                <Autocomplete\n-                  value={houseId}\n-                  onChange={handleHouseChange}\n-                  options={houses}\n-                  onSelect={handleHouseSelect}\n-                />\n-                {errors.houseId && <div className=\"text-red-500 text-sm\">{errors.houseId}</div>}\n-              </div>\n-\n-              <div className=\"mb-6 mt-3\">\n-                <Label htmlFor=\"relatedMonths\" className=\"mb-2 block\">Periode</Label>\n-                <Select\n-                 id=\"relatedMonths\"\n-                 isMulti\n-                 options={generateMonthsOptions()}\n-                 value={relatedMonths}\n-                 onChange={handleMonthChange}\n-                 placeholder=\"Pilih bulan\"\n-                 className='bg-gray-50 text-sm'\n-                />\n-                {errors.relatedMonths && <div className=\"text-red-500 text-sm\">{errors.relatedMonths}</div>}\n-              </div>\n-            </>\n-          )}\n-\n-          <div className=\"mb-6 mt-3\">\n-            <Label htmlFor=\"description\" className=\"mb-2 block\">Deskripsi</Label>\n-            <Textarea\n-              id=\"description\"\n-              name=\"description\"\n-              value={description}\n-              onChange={(e) => setDescription(e.target.value)}\n-              placeholder=\"Masukkan deskripsi\"\n-              readOnly={transactionType === 'ipl'} // Make description read-only for IPL transactions\n-            />\n-            {errors.description && <div className=\"text-red-500 text-sm\">{errors.description}</div>}\n-          </div>\n-\n-          <div className=\"mb-6 mt-3\">\n-            <Label htmlFor=\"amount\" className=\"mb-2 block\">Jumlah</Label>\n-            <TextInput\n-              id=\"amount\"\n-              name=\"amount\"\n-              type=\"number\"\n-              value={amount}\n-              onChange={(e) => setAmount(e.target.value)}\n-              placeholder=\"Masukkan jumlah\"\n-            />\n-            {errors.amount && <div className=\"text-red-500 text-sm\">{errors.amount}</div>}\n-          </div>\n-\n-          <div className=\"mb-6 mt-3\">\n-            <Label htmlFor=\"payment_type\" className=\"mb-2 block\">Tipe Pembayaran</Label>\n-              <Select\n-                id=\"payment_type\"\n-                options={optionsType}\n-                value={paymentType}\n-                onChange={handleTypeChange}\n-                placeholder=\"Cash atau Transfer\"\n-                className='bg-gray-50 text-sm'\n-              />\n-            {/* {errors.amount && <div className=\"text-red-500 text-sm\">{errors.amount}</div>} */}\n-          </div>\n-\n-          <div className=\"mb-6 mt-3\">\n-              <Label htmlFor=\"proofOfTransfer\" className=\"mb-2 block\">Lampiran</Label>\n-              <FileInput \n-                id=\"file\" \n-                onChange={handleFileChange} \n-                accept=\".jpg,.png,.pdf\"\n-                ref={fileInputRef}\n-              />\n-              <TextInput\n-                id=\"proofOfTransfer\"\n-                name=\"proofOfTransfer\"\n-                value={proofOfTransfer}\n-                onChange={(e) => setProofOfTransfer(e.target.value)}\n-                placeholder=\"Masukkan URL lampiran\"\n-                className='hidden'\n-              />\n-              {errors.proofOfTransfer && <div className=\"text-red-500 text-sm\">{errors.proofOfTransfer}</div>}\n-            </div>\n-\n-          <div className=\"mb-6 mt-3\">\n-            <Label htmlFor=\"paymentDate\" className=\"mb-2 block\">Tanggal Pembayaran</Label>\n-            <div className='flex items-center w-72 relative border border-gray-300 rounded-md shadow-sm bg-gray-50'>\n-            <FaCalendarAlt className=\"absolute h-5 w-5 left-2 z-50 top-1/2 transform -translate-y-1/2 text-gray-500\" />\n-            <DatePicker\n-              locale={id}\n-              id=\"paymentDate\"\n-              name=\"paymentDate\"\n-              selected={paymentDate}\n-              onChange={(date) => setPaymentDate(date)}\n-              dateFormat=\"dd MMMM yyyy\"\n-              calendarClassName=\"light-blue-stripes\"\n-              placeholderText=\"Pilih tanggal\"\n-              className=\"block w-full pl-8 text-sm text-gray-900  border-gray-300 border-none rounded-md py-2 px-4 focus:ring-0 bg-gray-50\"\n-            />\n-            </div>\n-            {errors.paymentDate && <div className=\"text-red-500 text-sm\">{errors.paymentDate}</div>}\n-            \n-          </div>\n-\n-          <div className='flex gap-2'>\n-            <Button \n-            type=\"submit\" \n-            color={transactionType === 'ipl' ? 'success' : transactionType === 'income' ? 'blue' : 'failure'}\n-            disabled={isProcessing}\n-            >\n-              {isProcessing && <AiOutlineLoading className=\"h-5 w-5 animate-spin mr-2\" />}\n-              {transactionType === 'ipl' && <FaExchangeAlt className=\"mr-2 h-5 w-5\" />}\n-              {transactionType === 'income' && <FaRegArrowAltCircleDown className=\"mr-2 h-5 w-5\" />}\n-              {transactionType === 'expense' && <FaRegArrowAltCircleUp className=\"mr-2 h-5 w-5\" />}\n-              Simpan\n-            </Button>\n-            <Button\n-              type=\"button\"\n-              color=\"gray\"\n-              onClick={() => {\n-                resetForm();\n-                onClose();\n-              }}\n-            >\n-              Batal\n-            </Button>\n-          </div>\n-        </form>\n-      </Drawer.Items>\n-    </Drawer>\n-  );\n-};\n-\n-export default TransactionDrawer;\n"
                },
                {
                    "date": 1722402621142,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,9 +135,9 @@\n       amount,\n       description,\n       proof_of_transfer: proofOfTransferUrl,\n       houseId,\n-      payment_type: paymentType,\n+      payment_type: paymentType.value,\n       related_months: dateArray,\n       //relatedMonths:relatedMonths.map(option => moment(option.value, \"YYYY-MM\")).join(', '),\n       paymentDate,\n       status\n"
                },
                {
                    "date": 1722402626250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,10 +126,10 @@\n \n     const dateString = relatedMonths.map(option => option.value).join(', ');\n     const dateArray = convertStringToArray(dateString);\n \n-    console.log(paymentType.value);\n \n+\n     //console.log(relatedMonths.map(option => option.value))\n     const newTransaction = {\n       transaction_type: transactionType,\n       amount,\n"
                },
                {
                    "date": 1722416081674,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,364 @@\n+// components/TransactionDrawer.js\n+import { getSession, useSession } from 'next-auth/react';\n+import { useState, useEffect, useRef } from 'react';\n+import { Drawer, Button, Input, FileInput, Textarea, Label, TextInput, Dropdown,Alert } from 'flowbite-react';\n+import {FaCalendarAlt, FaMoneyBill, FaRegArrowAltCircleDown, FaRegArrowAltCircleUp } from 'react-icons/fa';\n+import { FaExchangeAlt } from \"react-icons/fa\";\n+import { AiOutlineLoading } from \"react-icons/ai\";\n+import axios from 'axios';\n+import Autocomplete from '../Autocomplete';\n+import DatePicker from 'react-datepicker';\n+import 'react-datepicker/dist/react-datepicker.css'\n+import Select from 'react-select';\n+import moment from 'moment';\n+import 'moment/locale/id';\n+import id from \"date-fns/locale/id\";\n+moment.locale('id');\n+\n+const TransactionDrawer = ({ isOpen, onClose, onSubmit, transactionType,transactionToEdit }) => {\n+  const [houseId, setHouseId] = useState('');\n+  const [houseName, setHouseName] = useState('');\n+  const [amount, setAmount] = useState('');\n+  const [description, setDescription] = useState('');\n+  const [proofOfTransfer, setProofOfTransfer] = useState('');\n+  const [relatedMonths, setRelatedMonths] = useState([]);\n+  const [status, setStatus] = useState('berhasil');\n+  const [houses, setHouses] = useState([]);\n+  const [selectedHouse, setSelectedHouse] = useState(null);\n+  const [paymentDate, setPaymentDate] = useState(new Date());\n+  const { data: session } = useSession();\n+  const [errors, setErrors] = useState({});\n+  const [uploadUrl, setUploadUrl] = useState('');\n+  const fileInputRef = useRef(null);\n+  const [isProcessing, setIsProcessing] = useState(false);\n+  const [paymentType, setPaymentType] = useState('');\n+\n+  useEffect(() => {\n+    if (session) {\n+      const fetchHouses = async () => {\n+        try {\n+          const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/houses/all`, {\n+            headers: {\n+              Authorization: `Bearer ${session.accessToken}`,\n+            },\n+          });\n+          setHouses(res.data.map(house => ({\n+            value: house.house_id,\n+            label: house.house_id\n+          })));\n+        } catch (error) {\n+          console.error('Error fetching houses data:', error);\n+        }\n+      };\n+\n+      fetchHouses();\n+    }\n+  }, [session]);\n+\n+  useEffect(() => {\n+    if (transactionType === 'ipl') {\n+      if(relatedMonths.length > 0 && houseName ) {\n+        const monthLabels = relatedMonths.map(option => moment(option.value, \"YYYY-MM\").format(\"MMMM YYYY\")).join(', ');\n+        const descriptionText = `IPL ${houseName} periode ${monthLabels}`;\n+        setDescription(descriptionText);\n+      }\n+     \n+    }\n+  }, [houseId, relatedMonths, transactionType]);\n+\n+  const handleFileChange = (e) => {\n+    const file = e.target.files[0];\n+    if (file) {\n+        setProofOfTransfer(file); // Set file for upload\n+    }\n+  };\n+\n+  const handleFileUpload = async (file) => {\n+    const formData = new FormData();\n+    formData.append('file', file);\n+\n+    try {\n+        const response = await axios.post(`${process.env.NEXT_PUBLIC_API_URL}/upload`, formData, {\n+            headers: {\n+                'Content-Type': 'multipart/form-data',\n+            },\n+        });\n+        setUploadUrl(response.data.url);\n+        return response.data.url;\n+    } catch (error) {\n+        //console.error('Error uploading file:', error);\n+        //alert('Failed to upload file.');\n+        return null;\n+    }\n+ };\n+\n+  const handleSubmit = async (e) => {\n+    e.preventDefault();\n+    const newErrors = {};\n+\n+    if (!transactionType) newErrors.transactionType = 'Transaction type is required';\n+    if (!amount || amount <= 0) newErrors.amount = 'Amount must be a positive number';\n+    if (!description) newErrors.description = 'Description is required';\n+    if (!paymentDate) newErrors.paymentDate = 'Payment date is required';\n+    if (!relatedMonths) newErrors.relatedMonths = 'Months is required';\n+    if (transactionType === 'ipl' && !houseId) newErrors.houseId = 'House ID is required';\n+    if (paymentType === 'transfer' && !proofOfTransfer) newErrors.proofOfTransfer = 'Proof of transfer is required';\n+\n+    if (Object.keys(newErrors).length > 0) {\n+      setErrors(newErrors);\n+      return;\n+    }\n+\n+    setIsProcessing(true); // Start processing\n+\n+    let proofOfTransferUrl = uploadUrl;\n+    // If proofOfTransfer is a file that needs to be uploaded\n+    if (proofOfTransfer && proofOfTransfer instanceof File) {\n+      proofOfTransferUrl = await handleFileUpload(proofOfTransfer);\n+      if (!proofOfTransferUrl) return; // Abort if upload fails\n+    }\n+\n+    const convertStringToArray = (dateString) => {\n+      // Memisahkan string berdasarkan koma dan spasi\n+      const dateArray = dateString.split(', ').map(date => date.trim());\n+      return dateArray;\n+    };\n+\n+    const dateString = relatedMonths.map(option => option.value).join(', ');\n+    const dateArray = convertStringToArray(dateString);\n+\n+\n+\n+    //console.log(relatedMonths.map(option => option.value))\n+    const newTransaction = {\n+      transaction_type: transactionType,\n+      amount,\n+      description,\n+      proof_of_transfer: proofOfTransferUrl,\n+      houseId,\n+      payment_type: paymentType.value,\n+      related_months: dateArray,\n+      //relatedMonths:relatedMonths.map(option => moment(option.value, \"YYYY-MM\")).join(', '),\n+      paymentDate,\n+      status\n+    };\n+\n+   // console.log(newTransaction)\n+\n+    onSubmit(newTransaction);\n+    setHouseId('');\n+    setAmount('');\n+    setDescription('');\n+    setProofOfTransfer('');\n+    setRelatedMonths([]);\n+    setPaymentDate(new Date());\n+    setStatus('berhasil');\n+    fileInputRef.current.value = '';\n+    setPaymentType('');\n+    setIsProcessing(false); // Stop processing\n+    onClose();\n+  };\n+\n+  const handleHouseChange = (newValue) => {\n+    setHouseId(newValue);\n+  };\n+\n+  const handleHouseSelect = (selectedHouse) => {\n+    setHouseId(selectedHouse.value);\n+    setHouseName(selectedHouse.label)\n+    //setDescription(`IPL rumah ${selectedHouse.value} periode ${relatedMonths.join(', ')}`);\n+  };\n+\n+  const handleMonthChange = (selectedOptions) => {\n+    setRelatedMonths(selectedOptions || []);\n+  };\n+\n+  const generateMonthsOptions = () => {\n+    const options = [];\n+    const startYear = moment().year();\n+    const endYear = startYear + 2; // 2 tahun ke depan\n+\n+    for (let year = startYear; year <= endYear; year++) {\n+      for (let month = 0; month < 12; month++) {\n+        const value = moment().month(month).year(year).format(\"YYYY-MM\");\n+        const label = moment().month(month).year(year).format(\"MMMM YYYY\");\n+        options.push({ value, label });\n+      }\n+    }\n+    return options;\n+  };\n+\n+  const optionsType = [\n+    { value: 'cash', label: 'Cash' },\n+    { value: 'transfer', label: 'Transfer' },\n+  ]\n+\n+  const handleTypeChange = (e) => {\n+    setPaymentType(e);\n+  };\n+\n+  const resetForm = () => {\n+    setHouseId('');\n+    setAmount('');\n+    setDescription('');\n+    setProofOfTransfer('');\n+    setRelatedMonths([]);\n+    setPaymentDate(new Date());\n+    setStatus('berhasil');\n+    setPaymentType('');\n+    fileInputRef.current.value = '';\n+    setErrors({});\n+  };\n+\n+ \n+\n+  return (\n+    <Drawer\n+      open={isOpen}\n+      onClose={() => {\n+        resetForm();\n+        onClose();\n+      }}\n+      position=\"right\"\n+      className=\"py-4 px-7 top-0 z-50 w-full md:w-2/4\"\n+    >\n+      <Drawer.Header title={`Transaksi ${transactionType === 'ipl' ? 'IPL' : transactionType === 'income' ? 'Masuk' : 'Keluar'}`} titleIcon={FaExchangeAlt} />\n+      <Drawer.Items>\n+        <form onSubmit={handleSubmit} className=\"space-y-4\">\n+          {transactionType === 'ipl' && (\n+            <>\n+              <div className=\"mb-6 mt-3\">\n+                <Label htmlFor=\"houseId\" className=\"mb-2 block\">No Rumah</Label>\n+                <Autocomplete\n+                  value={houseId}\n+                  onChange={handleHouseChange}\n+                  options={houses}\n+                  onSelect={handleHouseSelect}\n+                />\n+                {errors.houseId && <div className=\"text-red-500 text-sm\">{errors.houseId}</div>}\n+              </div>\n+\n+              <div className=\"mb-6 mt-3\">\n+                <Label htmlFor=\"relatedMonths\" className=\"mb-2 block\">Periode</Label>\n+                <Select\n+                 id=\"relatedMonths\"\n+                 isMulti\n+                 options={generateMonthsOptions()}\n+                 value={relatedMonths}\n+                 onChange={handleMonthChange}\n+                 placeholder=\"Pilih bulan\"\n+                 className='bg-gray-50 text-sm'\n+                />\n+                {errors.relatedMonths && <div className=\"text-red-500 text-sm\">{errors.relatedMonths}</div>}\n+              </div>\n+            </>\n+          )}\n+\n+          <div className=\"mb-6 mt-3\">\n+            <Label htmlFor=\"description\" className=\"mb-2 block\">Deskripsi</Label>\n+            <Textarea\n+              id=\"description\"\n+              name=\"description\"\n+              value={description}\n+              onChange={(e) => setDescription(e.target.value)}\n+              placeholder=\"Masukkan deskripsi\"\n+              readOnly={transactionType === 'ipl'} // Make description read-only for IPL transactions\n+            />\n+            {errors.description && <div className=\"text-red-500 text-sm\">{errors.description}</div>}\n+          </div>\n+\n+          <div className=\"mb-6 mt-3\">\n+            <Label htmlFor=\"amount\" className=\"mb-2 block\">Jumlah</Label>\n+            <TextInput\n+              id=\"amount\"\n+              name=\"amount\"\n+              type=\"number\"\n+              value={amount}\n+              onChange={(e) => setAmount(e.target.value)}\n+              placeholder=\"Masukkan jumlah\"\n+            />\n+            {errors.amount && <div className=\"text-red-500 text-sm\">{errors.amount}</div>}\n+          </div>\n+\n+          <div className=\"mb-6 mt-3\">\n+            <Label htmlFor=\"payment_type\" className=\"mb-2 block\">Tipe Pembayaran</Label>\n+              <Select\n+                id=\"payment_type\"\n+                options={optionsType}\n+                value={paymentType}\n+                onChange={handleTypeChange}\n+                placeholder=\"Cash atau Transfer\"\n+                className='bg-gray-50 text-sm'\n+              />\n+            {/* {errors.amount && <div className=\"text-red-500 text-sm\">{errors.amount}</div>} */}\n+          </div>\n+\n+          <div className=\"mb-6 mt-3\">\n+              <Label htmlFor=\"proofOfTransfer\" className=\"mb-2 block\">Lampiran</Label>\n+              <FileInput \n+                id=\"file\" \n+                onChange={handleFileChange} \n+                accept=\".jpg,.png,.pdf\"\n+                ref={fileInputRef}\n+              />\n+              <TextInput\n+                id=\"proofOfTransfer\"\n+                name=\"proofOfTransfer\"\n+                value={proofOfTransfer}\n+                onChange={(e) => setProofOfTransfer(e.target.value)}\n+                placeholder=\"Masukkan URL lampiran\"\n+                className='hidden'\n+              />\n+              {errors.proofOfTransfer && <div className=\"text-red-500 text-sm\">{errors.proofOfTransfer}</div>}\n+            </div>\n+\n+          <div className=\"mb-6 mt-3\">\n+            <Label htmlFor=\"paymentDate\" className=\"mb-2 block\">Tanggal Pembayaran</Label>\n+            <div className='flex items-center w-72 relative border border-gray-300 rounded-md shadow-sm bg-gray-50'>\n+            <FaCalendarAlt className=\"absolute h-5 w-5 left-2 z-50 top-1/2 transform -translate-y-1/2 text-gray-500\" />\n+            <DatePicker\n+              locale={id}\n+              id=\"paymentDate\"\n+              name=\"paymentDate\"\n+              selected={paymentDate}\n+              onChange={(date) => setPaymentDate(date)}\n+              dateFormat=\"dd MMMM yyyy\"\n+              calendarClassName=\"light-blue-stripes\"\n+              placeholderText=\"Pilih tanggal\"\n+              className=\"block w-full pl-8 text-sm text-gray-900  border-gray-300 border-none rounded-md py-2 px-4 focus:ring-0 bg-gray-50\"\n+            />\n+            </div>\n+            {errors.paymentDate && <div className=\"text-red-500 text-sm\">{errors.paymentDate}</div>}\n+            \n+          </div>\n+\n+          <div className='flex gap-2'>\n+            <Button \n+            type=\"submit\" \n+            color={transactionType === 'ipl' ? 'success' : transactionType === 'income' ? 'blue' : 'failure'}\n+            disabled={isProcessing}\n+            >\n+              {isProcessing && <AiOutlineLoading className=\"h-5 w-5 animate-spin mr-2\" />}\n+              {transactionType === 'ipl' && <FaExchangeAlt className=\"mr-2 h-5 w-5\" />}\n+              {transactionType === 'income' && <FaRegArrowAltCircleDown className=\"mr-2 h-5 w-5\" />}\n+              {transactionType === 'expense' && <FaRegArrowAltCircleUp className=\"mr-2 h-5 w-5\" />}\n+              Simpan\n+            </Button>\n+            <Button\n+              type=\"button\"\n+              color=\"gray\"\n+              onClick={() => {\n+                resetForm();\n+                onClose();\n+              }}\n+            >\n+              Batal\n+            </Button>\n+          </div>\n+        </form>\n+      </Drawer.Items>\n+    </Drawer>\n+  );\n+};\n+\n+export default TransactionDrawer;\n"
                },
                {
                    "date": 1722416092847,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,9 @@\n import id from \"date-fns/locale/id\";\n moment.locale('id');\n \n const TransactionDrawer = ({ isOpen, onClose, onSubmit, transactionType,transactionToEdit }) => {\n+  console.log(transactionToEdit)\n   const [houseId, setHouseId] = useState('');\n   const [houseName, setHouseName] = useState('');\n   const [amount, setAmount] = useState('');\n   const [description, setDescription] = useState('');\n@@ -361,368 +362,4 @@\n   );\n };\n \n export default TransactionDrawer;\n-// components/TransactionDrawer.js\n-import { getSession, useSession } from 'next-auth/react';\n-import { useState, useEffect, useRef } from 'react';\n-import { Drawer, Button, Input, FileInput, Textarea, Label, TextInput, Dropdown,Alert } from 'flowbite-react';\n-import {FaCalendarAlt, FaMoneyBill, FaRegArrowAltCircleDown, FaRegArrowAltCircleUp } from 'react-icons/fa';\n-import { FaExchangeAlt } from \"react-icons/fa\";\n-import { AiOutlineLoading } from \"react-icons/ai\";\n-import axios from 'axios';\n-import Autocomplete from '../Autocomplete';\n-import DatePicker from 'react-datepicker';\n-import 'react-datepicker/dist/react-datepicker.css'\n-import Select from 'react-select';\n-import moment from 'moment';\n-import 'moment/locale/id';\n-import id from \"date-fns/locale/id\";\n-moment.locale('id');\n-\n-const TransactionDrawer = ({ isOpen, onClose, onSubmit, transactionType }) => {\n-  const [houseId, setHouseId] = useState('');\n-  const [houseName, setHouseName] = useState('');\n-  const [amount, setAmount] = useState('');\n-  const [description, setDescription] = useState('');\n-  const [proofOfTransfer, setProofOfTransfer] = useState('');\n-  const [relatedMonths, setRelatedMonths] = useState([]);\n-  const [status, setStatus] = useState('berhasil');\n-  const [houses, setHouses] = useState([]);\n-  const [selectedHouse, setSelectedHouse] = useState(null);\n-  const [paymentDate, setPaymentDate] = useState(new Date());\n-  const { data: session } = useSession();\n-  const [errors, setErrors] = useState({});\n-  const [uploadUrl, setUploadUrl] = useState('');\n-  const fileInputRef = useRef(null);\n-  const [isProcessing, setIsProcessing] = useState(false);\n-  const [paymentType, setPaymentType] = useState('');\n-\n-  useEffect(() => {\n-    if (session) {\n-      const fetchHouses = async () => {\n-        try {\n-          const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/houses/all`, {\n-            headers: {\n-              Authorization: `Bearer ${session.accessToken}`,\n-            },\n-          });\n-          setHouses(res.data.map(house => ({\n-            value: house.house_id,\n-            label: house.house_id\n-          })));\n-        } catch (error) {\n-          console.error('Error fetching houses data:', error);\n-        }\n-      };\n-\n-      fetchHouses();\n-    }\n-  }, [session]);\n-\n-  useEffect(() => {\n-    if (transactionType === 'ipl') {\n-      if(relatedMonths.length > 0 && houseName ) {\n-        const monthLabels = relatedMonths.map(option => moment(option.value, \"YYYY-MM\").format(\"MMMM YYYY\")).join(', ');\n-        const descriptionText = `IPL ${houseName} periode ${monthLabels}`;\n-        setDescription(descriptionText);\n-      }\n-     \n-    }\n-  }, [houseId, relatedMonths, transactionType]);\n-\n-  const handleFileChange = (e) => {\n-    const file = e.target.files[0];\n-    if (file) {\n-        setProofOfTransfer(file); // Set file for upload\n-    }\n-  };\n-\n-  const handleFileUpload = async (file) => {\n-    const formData = new FormData();\n-    formData.append('file', file);\n-\n-    try {\n-        const response = await axios.post(`${process.env.NEXT_PUBLIC_API_URL}/upload`, formData, {\n-            headers: {\n-                'Content-Type': 'multipart/form-data',\n-            },\n-        });\n-        setUploadUrl(response.data.url);\n-        return response.data.url;\n-    } catch (error) {\n-        //console.error('Error uploading file:', error);\n-        //alert('Failed to upload file.');\n-        return null;\n-    }\n- };\n-\n-  const handleSubmit = async (e) => {\n-    e.preventDefault();\n-    const newErrors = {};\n-\n-    if (!transactionType) newErrors.transactionType = 'Transaction type is required';\n-    if (!amount || amount <= 0) newErrors.amount = 'Amount must be a positive number';\n-    if (!description) newErrors.description = 'Description is required';\n-    if (!paymentDate) newErrors.paymentDate = 'Payment date is required';\n-    if (!relatedMonths) newErrors.relatedMonths = 'Months is required';\n-    if (transactionType === 'ipl' && !houseId) newErrors.houseId = 'House ID is required';\n-    if (paymentType === 'transfer' && !proofOfTransfer) newErrors.proofOfTransfer = 'Proof of transfer is required';\n-\n-    if (Object.keys(newErrors).length > 0) {\n-      setErrors(newErrors);\n-      return;\n-    }\n-\n-    setIsProcessing(true); // Start processing\n-\n-    let proofOfTransferUrl = uploadUrl;\n-    // If proofOfTransfer is a file that needs to be uploaded\n-    if (proofOfTransfer && proofOfTransfer instanceof File) {\n-      proofOfTransferUrl = await handleFileUpload(proofOfTransfer);\n-      if (!proofOfTransferUrl) return; // Abort if upload fails\n-    }\n-\n-    const convertStringToArray = (dateString) => {\n-      // Memisahkan string berdasarkan koma dan spasi\n-      const dateArray = dateString.split(', ').map(date => date.trim());\n-      return dateArray;\n-    };\n-\n-    const dateString = relatedMonths.map(option => option.value).join(', ');\n-    const dateArray = convertStringToArray(dateString);\n-\n-\n-\n-    //console.log(relatedMonths.map(option => option.value))\n-    const newTransaction = {\n-      transaction_type: transactionType,\n-      amount,\n-      description,\n-      proof_of_transfer: proofOfTransferUrl,\n-      houseId,\n-      payment_type: paymentType.value,\n-      related_months: dateArray,\n-      //relatedMonths:relatedMonths.map(option => moment(option.value, \"YYYY-MM\")).join(', '),\n-      paymentDate,\n-      status\n-    };\n-\n-   // console.log(newTransaction)\n-\n-    onSubmit(newTransaction);\n-    setHouseId('');\n-    setAmount('');\n-    setDescription('');\n-    setProofOfTransfer('');\n-    setRelatedMonths([]);\n-    setPaymentDate(new Date());\n-    setStatus('berhasil');\n-    fileInputRef.current.value = '';\n-    setPaymentType('');\n-    setIsProcessing(false); // Stop processing\n-    onClose();\n-  };\n-\n-  const handleHouseChange = (newValue) => {\n-    setHouseId(newValue);\n-  };\n-\n-  const handleHouseSelect = (selectedHouse) => {\n-    setHouseId(selectedHouse.value);\n-    setHouseName(selectedHouse.label)\n-    //setDescription(`IPL rumah ${selectedHouse.value} periode ${relatedMonths.join(', ')}`);\n-  };\n-\n-  const handleMonthChange = (selectedOptions) => {\n-    setRelatedMonths(selectedOptions || []);\n-  };\n-\n-  const generateMonthsOptions = () => {\n-    const options = [];\n-    const startYear = moment().year();\n-    const endYear = startYear + 2; // 2 tahun ke depan\n-\n-    for (let year = startYear; year <= endYear; year++) {\n-      for (let month = 0; month < 12; month++) {\n-        const value = moment().month(month).year(year).format(\"YYYY-MM\");\n-        const label = moment().month(month).year(year).format(\"MMMM YYYY\");\n-        options.push({ value, label });\n-      }\n-    }\n-    return options;\n-  };\n-\n-  const optionsType = [\n-    { value: 'cash', label: 'Cash' },\n-    { value: 'transfer', label: 'Transfer' },\n-  ]\n-\n-  const handleTypeChange = (e) => {\n-    setPaymentType(e);\n-  };\n-\n-  const resetForm = () => {\n-    setHouseId('');\n-    setAmount('');\n-    setDescription('');\n-    setProofOfTransfer('');\n-    setRelatedMonths([]);\n-    setPaymentDate(new Date());\n-    setStatus('berhasil');\n-    setPaymentType('');\n-    fileInputRef.current.value = '';\n-    setErrors({});\n-  };\n-\n- \n-\n-  return (\n-    <Drawer\n-      open={isOpen}\n-      onClose={() => {\n-        resetForm();\n-        onClose();\n-      }}\n-      position=\"right\"\n-      className=\"py-4 px-7 top-0 z-50 w-full md:w-2/4\"\n-    >\n-      <Drawer.Header title={`Transaksi ${transactionType === 'ipl' ? 'IPL' : transactionType === 'income' ? 'Masuk' : 'Keluar'}`} titleIcon={FaExchangeAlt} />\n-      <Drawer.Items>\n-        <form onSubmit={handleSubmit} className=\"space-y-4\">\n-          {transactionType === 'ipl' && (\n-            <>\n-              <div className=\"mb-6 mt-3\">\n-                <Label htmlFor=\"houseId\" className=\"mb-2 block\">No Rumah</Label>\n-                <Autocomplete\n-                  value={houseId}\n-                  onChange={handleHouseChange}\n-                  options={houses}\n-                  onSelect={handleHouseSelect}\n-                />\n-                {errors.houseId && <div className=\"text-red-500 text-sm\">{errors.houseId}</div>}\n-              </div>\n-\n-              <div className=\"mb-6 mt-3\">\n-                <Label htmlFor=\"relatedMonths\" className=\"mb-2 block\">Periode</Label>\n-                <Select\n-                 id=\"relatedMonths\"\n-                 isMulti\n-                 options={generateMonthsOptions()}\n-                 value={relatedMonths}\n-                 onChange={handleMonthChange}\n-                 placeholder=\"Pilih bulan\"\n-                 className='bg-gray-50 text-sm'\n-                />\n-                {errors.relatedMonths && <div className=\"text-red-500 text-sm\">{errors.relatedMonths}</div>}\n-              </div>\n-            </>\n-          )}\n-\n-          <div className=\"mb-6 mt-3\">\n-            <Label htmlFor=\"description\" className=\"mb-2 block\">Deskripsi</Label>\n-            <Textarea\n-              id=\"description\"\n-              name=\"description\"\n-              value={description}\n-              onChange={(e) => setDescription(e.target.value)}\n-              placeholder=\"Masukkan deskripsi\"\n-              readOnly={transactionType === 'ipl'} // Make description read-only for IPL transactions\n-            />\n-            {errors.description && <div className=\"text-red-500 text-sm\">{errors.description}</div>}\n-          </div>\n-\n-          <div className=\"mb-6 mt-3\">\n-            <Label htmlFor=\"amount\" className=\"mb-2 block\">Jumlah</Label>\n-            <TextInput\n-              id=\"amount\"\n-              name=\"amount\"\n-              type=\"number\"\n-              value={amount}\n-              onChange={(e) => setAmount(e.target.value)}\n-              placeholder=\"Masukkan jumlah\"\n-            />\n-            {errors.amount && <div className=\"text-red-500 text-sm\">{errors.amount}</div>}\n-          </div>\n-\n-          <div className=\"mb-6 mt-3\">\n-            <Label htmlFor=\"payment_type\" className=\"mb-2 block\">Tipe Pembayaran</Label>\n-              <Select\n-                id=\"payment_type\"\n-                options={optionsType}\n-                value={paymentType}\n-                onChange={handleTypeChange}\n-                placeholder=\"Cash atau Transfer\"\n-                className='bg-gray-50 text-sm'\n-              />\n-            {/* {errors.amount && <div className=\"text-red-500 text-sm\">{errors.amount}</div>} */}\n-          </div>\n-\n-          <div className=\"mb-6 mt-3\">\n-              <Label htmlFor=\"proofOfTransfer\" className=\"mb-2 block\">Lampiran</Label>\n-              <FileInput \n-                id=\"file\" \n-                onChange={handleFileChange} \n-                accept=\".jpg,.png,.pdf\"\n-                ref={fileInputRef}\n-              />\n-              <TextInput\n-                id=\"proofOfTransfer\"\n-                name=\"proofOfTransfer\"\n-                value={proofOfTransfer}\n-                onChange={(e) => setProofOfTransfer(e.target.value)}\n-                placeholder=\"Masukkan URL lampiran\"\n-                className='hidden'\n-              />\n-              {errors.proofOfTransfer && <div className=\"text-red-500 text-sm\">{errors.proofOfTransfer}</div>}\n-            </div>\n-\n-          <div className=\"mb-6 mt-3\">\n-            <Label htmlFor=\"paymentDate\" className=\"mb-2 block\">Tanggal Pembayaran</Label>\n-            <div className='flex items-center w-72 relative border border-gray-300 rounded-md shadow-sm bg-gray-50'>\n-            <FaCalendarAlt className=\"absolute h-5 w-5 left-2 z-50 top-1/2 transform -translate-y-1/2 text-gray-500\" />\n-            <DatePicker\n-              locale={id}\n-              id=\"paymentDate\"\n-              name=\"paymentDate\"\n-              selected={paymentDate}\n-              onChange={(date) => setPaymentDate(date)}\n-              dateFormat=\"dd MMMM yyyy\"\n-              calendarClassName=\"light-blue-stripes\"\n-              placeholderText=\"Pilih tanggal\"\n-              className=\"block w-full pl-8 text-sm text-gray-900  border-gray-300 border-none rounded-md py-2 px-4 focus:ring-0 bg-gray-50\"\n-            />\n-            </div>\n-            {errors.paymentDate && <div className=\"text-red-500 text-sm\">{errors.paymentDate}</div>}\n-            \n-          </div>\n-\n-          <div className='flex gap-2'>\n-            <Button \n-            type=\"submit\" \n-            color={transactionType === 'ipl' ? 'success' : transactionType === 'income' ? 'blue' : 'failure'}\n-            disabled={isProcessing}\n-            >\n-              {isProcessing && <AiOutlineLoading className=\"h-5 w-5 animate-spin mr-2\" />}\n-              {transactionType === 'ipl' && <FaExchangeAlt className=\"mr-2 h-5 w-5\" />}\n-              {transactionType === 'income' && <FaRegArrowAltCircleDown className=\"mr-2 h-5 w-5\" />}\n-              {transactionType === 'expense' && <FaRegArrowAltCircleUp className=\"mr-2 h-5 w-5\" />}\n-              Simpan\n-            </Button>\n-            <Button\n-              type=\"button\"\n-              color=\"gray\"\n-              onClick={() => {\n-                resetForm();\n-                onClose();\n-              }}\n-            >\n-              Batal\n-            </Button>\n-          </div>\n-        </form>\n-      </Drawer.Items>\n-    </Drawer>\n-  );\n-};\n-\n-export default TransactionDrawer;\n"
                },
                {
                    "date": 1722416138571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n   console.log(transactionToEdit)\n   const [houseId, setHouseId] = useState('');\n   const [houseName, setHouseName] = useState('');\n   const [amount, setAmount] = useState('');\n-  const [description, setDescription] = useState('');\n+  const [description, setDescription] = useState(transactionToEdit.description? transactionToEdit.description : '');\n   const [proofOfTransfer, setProofOfTransfer] = useState('');\n   const [relatedMonths, setRelatedMonths] = useState([]);\n   const [status, setStatus] = useState('berhasil');\n   const [houses, setHouses] = useState([]);\n"
                },
                {
                    "date": 1722416212464,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,13 +15,13 @@\n import id from \"date-fns/locale/id\";\n moment.locale('id');\n \n const TransactionDrawer = ({ isOpen, onClose, onSubmit, transactionType,transactionToEdit }) => {\n-  console.log(transactionToEdit)\n+  console.log(transactionToEdit.description)\n   const [houseId, setHouseId] = useState('');\n   const [houseName, setHouseName] = useState('');\n   const [amount, setAmount] = useState('');\n-  const [description, setDescription] = useState(transactionToEdit.description? transactionToEdit.description : '');\n+  const [description, setDescription] = useState('');\n   const [proofOfTransfer, setProofOfTransfer] = useState('');\n   const [relatedMonths, setRelatedMonths] = useState([]);\n   const [status, setStatus] = useState('berhasil');\n   const [houses, setHouses] = useState([]);\n"
                },
                {
                    "date": 1722416222636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n import id from \"date-fns/locale/id\";\n moment.locale('id');\n \n const TransactionDrawer = ({ isOpen, onClose, onSubmit, transactionType,transactionToEdit }) => {\n-  console.log(transactionToEdit.description)\n+  console.log(transactionToEdit)\n   const [houseId, setHouseId] = useState('');\n   const [houseName, setHouseName] = useState('');\n   const [amount, setAmount] = useState('');\n   const [description, setDescription] = useState('');\n"
                },
                {
                    "date": 1722416242144,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,365 @@\n+// components/TransactionDrawer.js\n+import { getSession, useSession } from 'next-auth/react';\n+import { useState, useEffect, useRef } from 'react';\n+import { Drawer, Button, Input, FileInput, Textarea, Label, TextInput, Dropdown,Alert } from 'flowbite-react';\n+import {FaCalendarAlt, FaMoneyBill, FaRegArrowAltCircleDown, FaRegArrowAltCircleUp } from 'react-icons/fa';\n+import { FaExchangeAlt } from \"react-icons/fa\";\n+import { AiOutlineLoading } from \"react-icons/ai\";\n+import axios from 'axios';\n+import Autocomplete from '../Autocomplete';\n+import DatePicker from 'react-datepicker';\n+import 'react-datepicker/dist/react-datepicker.css'\n+import Select from 'react-select';\n+import moment from 'moment';\n+import 'moment/locale/id';\n+import id from \"date-fns/locale/id\";\n+moment.locale('id');\n+\n+const TransactionDrawer = ({ isOpen, onClose, onSubmit, transactionType,transactionToEdit }) => {\n+  console.log(transactionToEdit.description)\n+  const [houseId, setHouseId] = useState('');\n+  const [houseName, setHouseName] = useState('');\n+  const [amount, setAmount] = useState('');\n+  const [description, setDescription] = useState('');\n+  const [proofOfTransfer, setProofOfTransfer] = useState('');\n+  const [relatedMonths, setRelatedMonths] = useState([]);\n+  const [status, setStatus] = useState('berhasil');\n+  const [houses, setHouses] = useState([]);\n+  const [selectedHouse, setSelectedHouse] = useState(null);\n+  const [paymentDate, setPaymentDate] = useState(new Date());\n+  const { data: session } = useSession();\n+  const [errors, setErrors] = useState({});\n+  const [uploadUrl, setUploadUrl] = useState('');\n+  const fileInputRef = useRef(null);\n+  const [isProcessing, setIsProcessing] = useState(false);\n+  const [paymentType, setPaymentType] = useState('');\n+\n+  useEffect(() => {\n+    if (session) {\n+      const fetchHouses = async () => {\n+        try {\n+          const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/houses/all`, {\n+            headers: {\n+              Authorization: `Bearer ${session.accessToken}`,\n+            },\n+          });\n+          setHouses(res.data.map(house => ({\n+            value: house.house_id,\n+            label: house.house_id\n+          })));\n+        } catch (error) {\n+          console.error('Error fetching houses data:', error);\n+        }\n+      };\n+\n+      fetchHouses();\n+    }\n+  }, [session]);\n+\n+  useEffect(() => {\n+    if (transactionType === 'ipl') {\n+      if(relatedMonths.length > 0 && houseName ) {\n+        const monthLabels = relatedMonths.map(option => moment(option.value, \"YYYY-MM\").format(\"MMMM YYYY\")).join(', ');\n+        const descriptionText = `IPL ${houseName} periode ${monthLabels}`;\n+        setDescription(descriptionText);\n+      }\n+     \n+    }\n+  }, [houseId, relatedMonths, transactionType]);\n+\n+  const handleFileChange = (e) => {\n+    const file = e.target.files[0];\n+    if (file) {\n+        setProofOfTransfer(file); // Set file for upload\n+    }\n+  };\n+\n+  const handleFileUpload = async (file) => {\n+    const formData = new FormData();\n+    formData.append('file', file);\n+\n+    try {\n+        const response = await axios.post(`${process.env.NEXT_PUBLIC_API_URL}/upload`, formData, {\n+            headers: {\n+                'Content-Type': 'multipart/form-data',\n+            },\n+        });\n+        setUploadUrl(response.data.url);\n+        return response.data.url;\n+    } catch (error) {\n+        //console.error('Error uploading file:', error);\n+        //alert('Failed to upload file.');\n+        return null;\n+    }\n+ };\n+\n+  const handleSubmit = async (e) => {\n+    e.preventDefault();\n+    const newErrors = {};\n+\n+    if (!transactionType) newErrors.transactionType = 'Transaction type is required';\n+    if (!amount || amount <= 0) newErrors.amount = 'Amount must be a positive number';\n+    if (!description) newErrors.description = 'Description is required';\n+    if (!paymentDate) newErrors.paymentDate = 'Payment date is required';\n+    if (!relatedMonths) newErrors.relatedMonths = 'Months is required';\n+    if (transactionType === 'ipl' && !houseId) newErrors.houseId = 'House ID is required';\n+    if (paymentType === 'transfer' && !proofOfTransfer) newErrors.proofOfTransfer = 'Proof of transfer is required';\n+\n+    if (Object.keys(newErrors).length > 0) {\n+      setErrors(newErrors);\n+      return;\n+    }\n+\n+    setIsProcessing(true); // Start processing\n+\n+    let proofOfTransferUrl = uploadUrl;\n+    // If proofOfTransfer is a file that needs to be uploaded\n+    if (proofOfTransfer && proofOfTransfer instanceof File) {\n+      proofOfTransferUrl = await handleFileUpload(proofOfTransfer);\n+      if (!proofOfTransferUrl) return; // Abort if upload fails\n+    }\n+\n+    const convertStringToArray = (dateString) => {\n+      // Memisahkan string berdasarkan koma dan spasi\n+      const dateArray = dateString.split(', ').map(date => date.trim());\n+      return dateArray;\n+    };\n+\n+    const dateString = relatedMonths.map(option => option.value).join(', ');\n+    const dateArray = convertStringToArray(dateString);\n+\n+\n+\n+    //console.log(relatedMonths.map(option => option.value))\n+    const newTransaction = {\n+      transaction_type: transactionType,\n+      amount,\n+      description,\n+      proof_of_transfer: proofOfTransferUrl,\n+      houseId,\n+      payment_type: paymentType.value,\n+      related_months: dateArray,\n+      //relatedMonths:relatedMonths.map(option => moment(option.value, \"YYYY-MM\")).join(', '),\n+      paymentDate,\n+      status\n+    };\n+\n+   // console.log(newTransaction)\n+\n+    onSubmit(newTransaction);\n+    setHouseId('');\n+    setAmount('');\n+    setDescription('');\n+    setProofOfTransfer('');\n+    setRelatedMonths([]);\n+    setPaymentDate(new Date());\n+    setStatus('berhasil');\n+    fileInputRef.current.value = '';\n+    setPaymentType('');\n+    setIsProcessing(false); // Stop processing\n+    onClose();\n+  };\n+\n+  const handleHouseChange = (newValue) => {\n+    setHouseId(newValue);\n+  };\n+\n+  const handleHouseSelect = (selectedHouse) => {\n+    setHouseId(selectedHouse.value);\n+    setHouseName(selectedHouse.label)\n+    //setDescription(`IPL rumah ${selectedHouse.value} periode ${relatedMonths.join(', ')}`);\n+  };\n+\n+  const handleMonthChange = (selectedOptions) => {\n+    setRelatedMonths(selectedOptions || []);\n+  };\n+\n+  const generateMonthsOptions = () => {\n+    const options = [];\n+    const startYear = moment().year();\n+    const endYear = startYear + 2; // 2 tahun ke depan\n+\n+    for (let year = startYear; year <= endYear; year++) {\n+      for (let month = 0; month < 12; month++) {\n+        const value = moment().month(month).year(year).format(\"YYYY-MM\");\n+        const label = moment().month(month).year(year).format(\"MMMM YYYY\");\n+        options.push({ value, label });\n+      }\n+    }\n+    return options;\n+  };\n+\n+  const optionsType = [\n+    { value: 'cash', label: 'Cash' },\n+    { value: 'transfer', label: 'Transfer' },\n+  ]\n+\n+  const handleTypeChange = (e) => {\n+    setPaymentType(e);\n+  };\n+\n+  const resetForm = () => {\n+    setHouseId('');\n+    setAmount('');\n+    setDescription('');\n+    setProofOfTransfer('');\n+    setRelatedMonths([]);\n+    setPaymentDate(new Date());\n+    setStatus('berhasil');\n+    setPaymentType('');\n+    fileInputRef.current.value = '';\n+    setErrors({});\n+  };\n+\n+ \n+\n+  return (\n+    <Drawer\n+      open={isOpen}\n+      onClose={() => {\n+        resetForm();\n+        onClose();\n+      }}\n+      position=\"right\"\n+      className=\"py-4 px-7 top-0 z-50 w-full md:w-2/4\"\n+    >\n+      <Drawer.Header title={`Transaksi ${transactionType === 'ipl' ? 'IPL' : transactionType === 'income' ? 'Masuk' : 'Keluar'}`} titleIcon={FaExchangeAlt} />\n+      <Drawer.Items>\n+        <form onSubmit={handleSubmit} className=\"space-y-4\">\n+          {transactionType === 'ipl' && (\n+            <>\n+              <div className=\"mb-6 mt-3\">\n+                <Label htmlFor=\"houseId\" className=\"mb-2 block\">No Rumah</Label>\n+                <Autocomplete\n+                  value={houseId}\n+                  onChange={handleHouseChange}\n+                  options={houses}\n+                  onSelect={handleHouseSelect}\n+                />\n+                {errors.houseId && <div className=\"text-red-500 text-sm\">{errors.houseId}</div>}\n+              </div>\n+\n+              <div className=\"mb-6 mt-3\">\n+                <Label htmlFor=\"relatedMonths\" className=\"mb-2 block\">Periode</Label>\n+                <Select\n+                 id=\"relatedMonths\"\n+                 isMulti\n+                 options={generateMonthsOptions()}\n+                 value={relatedMonths}\n+                 onChange={handleMonthChange}\n+                 placeholder=\"Pilih bulan\"\n+                 className='bg-gray-50 text-sm'\n+                />\n+                {errors.relatedMonths && <div className=\"text-red-500 text-sm\">{errors.relatedMonths}</div>}\n+              </div>\n+            </>\n+          )}\n+\n+          <div className=\"mb-6 mt-3\">\n+            <Label htmlFor=\"description\" className=\"mb-2 block\">Deskripsi</Label>\n+            <Textarea\n+              id=\"description\"\n+              name=\"description\"\n+              value={description}\n+              onChange={(e) => setDescription(e.target.value)}\n+              placeholder=\"Masukkan deskripsi\"\n+              readOnly={transactionType === 'ipl'} // Make description read-only for IPL transactions\n+            />\n+            {errors.description && <div className=\"text-red-500 text-sm\">{errors.description}</div>}\n+          </div>\n+\n+          <div className=\"mb-6 mt-3\">\n+            <Label htmlFor=\"amount\" className=\"mb-2 block\">Jumlah</Label>\n+            <TextInput\n+              id=\"amount\"\n+              name=\"amount\"\n+              type=\"number\"\n+              value={amount}\n+              onChange={(e) => setAmount(e.target.value)}\n+              placeholder=\"Masukkan jumlah\"\n+            />\n+            {errors.amount && <div className=\"text-red-500 text-sm\">{errors.amount}</div>}\n+          </div>\n+\n+          <div className=\"mb-6 mt-3\">\n+            <Label htmlFor=\"payment_type\" className=\"mb-2 block\">Tipe Pembayaran</Label>\n+              <Select\n+                id=\"payment_type\"\n+                options={optionsType}\n+                value={paymentType}\n+                onChange={handleTypeChange}\n+                placeholder=\"Cash atau Transfer\"\n+                className='bg-gray-50 text-sm'\n+              />\n+            {/* {errors.amount && <div className=\"text-red-500 text-sm\">{errors.amount}</div>} */}\n+          </div>\n+\n+          <div className=\"mb-6 mt-3\">\n+              <Label htmlFor=\"proofOfTransfer\" className=\"mb-2 block\">Lampiran</Label>\n+              <FileInput \n+                id=\"file\" \n+                onChange={handleFileChange} \n+                accept=\".jpg,.png,.pdf\"\n+                ref={fileInputRef}\n+              />\n+              <TextInput\n+                id=\"proofOfTransfer\"\n+                name=\"proofOfTransfer\"\n+                value={proofOfTransfer}\n+                onChange={(e) => setProofOfTransfer(e.target.value)}\n+                placeholder=\"Masukkan URL lampiran\"\n+                className='hidden'\n+              />\n+              {errors.proofOfTransfer && <div className=\"text-red-500 text-sm\">{errors.proofOfTransfer}</div>}\n+            </div>\n+\n+          <div className=\"mb-6 mt-3\">\n+            <Label htmlFor=\"paymentDate\" className=\"mb-2 block\">Tanggal Pembayaran</Label>\n+            <div className='flex items-center w-72 relative border border-gray-300 rounded-md shadow-sm bg-gray-50'>\n+            <FaCalendarAlt className=\"absolute h-5 w-5 left-2 z-50 top-1/2 transform -translate-y-1/2 text-gray-500\" />\n+            <DatePicker\n+              locale={id}\n+              id=\"paymentDate\"\n+              name=\"paymentDate\"\n+              selected={paymentDate}\n+              onChange={(date) => setPaymentDate(date)}\n+              dateFormat=\"dd MMMM yyyy\"\n+              calendarClassName=\"light-blue-stripes\"\n+              placeholderText=\"Pilih tanggal\"\n+              className=\"block w-full pl-8 text-sm text-gray-900  border-gray-300 border-none rounded-md py-2 px-4 focus:ring-0 bg-gray-50\"\n+            />\n+            </div>\n+            {errors.paymentDate && <div className=\"text-red-500 text-sm\">{errors.paymentDate}</div>}\n+            \n+          </div>\n+\n+          <div className='flex gap-2'>\n+            <Button \n+            type=\"submit\" \n+            color={transactionType === 'ipl' ? 'success' : transactionType === 'income' ? 'blue' : 'failure'}\n+            disabled={isProcessing}\n+            >\n+              {isProcessing && <AiOutlineLoading className=\"h-5 w-5 animate-spin mr-2\" />}\n+              {transactionType === 'ipl' && <FaExchangeAlt className=\"mr-2 h-5 w-5\" />}\n+              {transactionType === 'income' && <FaRegArrowAltCircleDown className=\"mr-2 h-5 w-5\" />}\n+              {transactionType === 'expense' && <FaRegArrowAltCircleUp className=\"mr-2 h-5 w-5\" />}\n+              Simpan\n+            </Button>\n+            <Button\n+              type=\"button\"\n+              color=\"gray\"\n+              onClick={() => {\n+                resetForm();\n+                onClose();\n+              }}\n+            >\n+              Batal\n+            </Button>\n+          </div>\n+        </form>\n+      </Drawer.Items>\n+    </Drawer>\n+  );\n+};\n+\n+export default TransactionDrawer;\n"
                },
                {
                    "date": 1722416279762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,374 +15,13 @@\n import id from \"date-fns/locale/id\";\n moment.locale('id');\n \n const TransactionDrawer = ({ isOpen, onClose, onSubmit, transactionType,transactionToEdit }) => {\n-  console.log(transactionToEdit.description)\n-  const [houseId, setHouseId] = useState('');\n-  const [houseName, setHouseName] = useState('');\n-  const [amount, setAmount] = useState('');\n-  const [description, setDescription] = useState('');\n-  const [proofOfTransfer, setProofOfTransfer] = useState('');\n-  const [relatedMonths, setRelatedMonths] = useState([]);\n-  const [status, setStatus] = useState('berhasil');\n-  const [houses, setHouses] = useState([]);\n-  const [selectedHouse, setSelectedHouse] = useState(null);\n-  const [paymentDate, setPaymentDate] = useState(new Date());\n-  const { data: session } = useSession();\n-  const [errors, setErrors] = useState({});\n-  const [uploadUrl, setUploadUrl] = useState('');\n-  const fileInputRef = useRef(null);\n-  const [isProcessing, setIsProcessing] = useState(false);\n-  const [paymentType, setPaymentType] = useState('');\n-\n-  useEffect(() => {\n-    if (session) {\n-      const fetchHouses = async () => {\n-        try {\n-          const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/houses/all`, {\n-            headers: {\n-              Authorization: `Bearer ${session.accessToken}`,\n-            },\n-          });\n-          setHouses(res.data.map(house => ({\n-            value: house.house_id,\n-            label: house.house_id\n-          })));\n-        } catch (error) {\n-          console.error('Error fetching houses data:', error);\n-        }\n-      };\n-\n-      fetchHouses();\n-    }\n-  }, [session]);\n-\n-  useEffect(() => {\n-    if (transactionType === 'ipl') {\n-      if(relatedMonths.length > 0 && houseName ) {\n-        const monthLabels = relatedMonths.map(option => moment(option.value, \"YYYY-MM\").format(\"MMMM YYYY\")).join(', ');\n-        const descriptionText = `IPL ${houseName} periode ${monthLabels}`;\n-        setDescription(descriptionText);\n-      }\n-     \n-    }\n-  }, [houseId, relatedMonths, transactionType]);\n-\n-  const handleFileChange = (e) => {\n-    const file = e.target.files[0];\n-    if (file) {\n-        setProofOfTransfer(file); // Set file for upload\n-    }\n-  };\n-\n-  const handleFileUpload = async (file) => {\n-    const formData = new FormData();\n-    formData.append('file', file);\n-\n-    try {\n-        const response = await axios.post(`${process.env.NEXT_PUBLIC_API_URL}/upload`, formData, {\n-            headers: {\n-                'Content-Type': 'multipart/form-data',\n-            },\n-        });\n-        setUploadUrl(response.data.url);\n-        return response.data.url;\n-    } catch (error) {\n-        //console.error('Error uploading file:', error);\n-        //alert('Failed to upload file.');\n-        return null;\n-    }\n- };\n-\n-  const handleSubmit = async (e) => {\n-    e.preventDefault();\n-    const newErrors = {};\n-\n-    if (!transactionType) newErrors.transactionType = 'Transaction type is required';\n-    if (!amount || amount <= 0) newErrors.amount = 'Amount must be a positive number';\n-    if (!description) newErrors.description = 'Description is required';\n-    if (!paymentDate) newErrors.paymentDate = 'Payment date is required';\n-    if (!relatedMonths) newErrors.relatedMonths = 'Months is required';\n-    if (transactionType === 'ipl' && !houseId) newErrors.houseId = 'House ID is required';\n-    if (paymentType === 'transfer' && !proofOfTransfer) newErrors.proofOfTransfer = 'Proof of transfer is required';\n-\n-    if (Object.keys(newErrors).length > 0) {\n-      setErrors(newErrors);\n-      return;\n-    }\n-\n-    setIsProcessing(true); // Start processing\n-\n-    let proofOfTransferUrl = uploadUrl;\n-    // If proofOfTransfer is a file that needs to be uploaded\n-    if (proofOfTransfer && proofOfTransfer instanceof File) {\n-      proofOfTransferUrl = await handleFileUpload(proofOfTransfer);\n-      if (!proofOfTransferUrl) return; // Abort if upload fails\n-    }\n-\n-    const convertStringToArray = (dateString) => {\n-      // Memisahkan string berdasarkan koma dan spasi\n-      const dateArray = dateString.split(', ').map(date => date.trim());\n-      return dateArray;\n-    };\n-\n-    const dateString = relatedMonths.map(option => option.value).join(', ');\n-    const dateArray = convertStringToArray(dateString);\n-\n-\n-\n-    //console.log(relatedMonths.map(option => option.value))\n-    const newTransaction = {\n-      transaction_type: transactionType,\n-      amount,\n-      description,\n-      proof_of_transfer: proofOfTransferUrl,\n-      houseId,\n-      payment_type: paymentType.value,\n-      related_months: dateArray,\n-      //relatedMonths:relatedMonths.map(option => moment(option.value, \"YYYY-MM\")).join(', '),\n-      paymentDate,\n-      status\n-    };\n-\n-   // console.log(newTransaction)\n-\n-    onSubmit(newTransaction);\n-    setHouseId('');\n-    setAmount('');\n-    setDescription('');\n-    setProofOfTransfer('');\n-    setRelatedMonths([]);\n-    setPaymentDate(new Date());\n-    setStatus('berhasil');\n-    fileInputRef.current.value = '';\n-    setPaymentType('');\n-    setIsProcessing(false); // Stop processing\n-    onClose();\n-  };\n-\n-  const handleHouseChange = (newValue) => {\n-    setHouseId(newValue);\n-  };\n-\n-  const handleHouseSelect = (selectedHouse) => {\n-    setHouseId(selectedHouse.value);\n-    setHouseName(selectedHouse.label)\n-    //setDescription(`IPL rumah ${selectedHouse.value} periode ${relatedMonths.join(', ')}`);\n-  };\n-\n-  const handleMonthChange = (selectedOptions) => {\n-    setRelatedMonths(selectedOptions || []);\n-  };\n-\n-  const generateMonthsOptions = () => {\n-    const options = [];\n-    const startYear = moment().year();\n-    const endYear = startYear + 2; // 2 tahun ke depan\n-\n-    for (let year = startYear; year <= endYear; year++) {\n-      for (let month = 0; month < 12; month++) {\n-        const value = moment().month(month).year(year).format(\"YYYY-MM\");\n-        const label = moment().month(month).year(year).format(\"MMMM YYYY\");\n-        options.push({ value, label });\n-      }\n-    }\n-    return options;\n-  };\n-\n-  const optionsType = [\n-    { value: 'cash', label: 'Cash' },\n-    { value: 'transfer', label: 'Transfer' },\n-  ]\n-\n-  const handleTypeChange = (e) => {\n-    setPaymentType(e);\n-  };\n-\n-  const resetForm = () => {\n-    setHouseId('');\n-    setAmount('');\n-    setDescription('');\n-    setProofOfTransfer('');\n-    setRelatedMonths([]);\n-    setPaymentDate(new Date());\n-    setStatus('berhasil');\n-    setPaymentType('');\n-    fileInputRef.current.value = '';\n-    setErrors({});\n-  };\n-\n+  if(transactionToEdit) {\n+    console.log(transactionToEdit.description)\n+  }\n  \n-\n-  return (\n-    <Drawer\n-      open={isOpen}\n-      onClose={() => {\n-        resetForm();\n-        onClose();\n-      }}\n-      position=\"right\"\n-      className=\"py-4 px-7 top-0 z-50 w-full md:w-2/4\"\n-    >\n-      <Drawer.Header title={`Transaksi ${transactionType === 'ipl' ? 'IPL' : transactionType === 'income' ? 'Masuk' : 'Keluar'}`} titleIcon={FaExchangeAlt} />\n-      <Drawer.Items>\n-        <form onSubmit={handleSubmit} className=\"space-y-4\">\n-          {transactionType === 'ipl' && (\n-            <>\n-              <div className=\"mb-6 mt-3\">\n-                <Label htmlFor=\"houseId\" className=\"mb-2 block\">No Rumah</Label>\n-                <Autocomplete\n-                  value={houseId}\n-                  onChange={handleHouseChange}\n-                  options={houses}\n-                  onSelect={handleHouseSelect}\n-                />\n-                {errors.houseId && <div className=\"text-red-500 text-sm\">{errors.houseId}</div>}\n-              </div>\n-\n-              <div className=\"mb-6 mt-3\">\n-                <Label htmlFor=\"relatedMonths\" className=\"mb-2 block\">Periode</Label>\n-                <Select\n-                 id=\"relatedMonths\"\n-                 isMulti\n-                 options={generateMonthsOptions()}\n-                 value={relatedMonths}\n-                 onChange={handleMonthChange}\n-                 placeholder=\"Pilih bulan\"\n-                 className='bg-gray-50 text-sm'\n-                />\n-                {errors.relatedMonths && <div className=\"text-red-500 text-sm\">{errors.relatedMonths}</div>}\n-              </div>\n-            </>\n-          )}\n-\n-          <div className=\"mb-6 mt-3\">\n-            <Label htmlFor=\"description\" className=\"mb-2 block\">Deskripsi</Label>\n-            <Textarea\n-              id=\"description\"\n-              name=\"description\"\n-              value={description}\n-              onChange={(e) => setDescription(e.target.value)}\n-              placeholder=\"Masukkan deskripsi\"\n-              readOnly={transactionType === 'ipl'} // Make description read-only for IPL transactions\n-            />\n-            {errors.description && <div className=\"text-red-500 text-sm\">{errors.description}</div>}\n-          </div>\n-\n-          <div className=\"mb-6 mt-3\">\n-            <Label htmlFor=\"amount\" className=\"mb-2 block\">Jumlah</Label>\n-            <TextInput\n-              id=\"amount\"\n-              name=\"amount\"\n-              type=\"number\"\n-              value={amount}\n-              onChange={(e) => setAmount(e.target.value)}\n-              placeholder=\"Masukkan jumlah\"\n-            />\n-            {errors.amount && <div className=\"text-red-500 text-sm\">{errors.amount}</div>}\n-          </div>\n-\n-          <div className=\"mb-6 mt-3\">\n-            <Label htmlFor=\"payment_type\" className=\"mb-2 block\">Tipe Pembayaran</Label>\n-              <Select\n-                id=\"payment_type\"\n-                options={optionsType}\n-                value={paymentType}\n-                onChange={handleTypeChange}\n-                placeholder=\"Cash atau Transfer\"\n-                className='bg-gray-50 text-sm'\n-              />\n-            {/* {errors.amount && <div className=\"text-red-500 text-sm\">{errors.amount}</div>} */}\n-          </div>\n-\n-          <div className=\"mb-6 mt-3\">\n-              <Label htmlFor=\"proofOfTransfer\" className=\"mb-2 block\">Lampiran</Label>\n-              <FileInput \n-                id=\"file\" \n-                onChange={handleFileChange} \n-                accept=\".jpg,.png,.pdf\"\n-                ref={fileInputRef}\n-              />\n-              <TextInput\n-                id=\"proofOfTransfer\"\n-                name=\"proofOfTransfer\"\n-                value={proofOfTransfer}\n-                onChange={(e) => setProofOfTransfer(e.target.value)}\n-                placeholder=\"Masukkan URL lampiran\"\n-                className='hidden'\n-              />\n-              {errors.proofOfTransfer && <div className=\"text-red-500 text-sm\">{errors.proofOfTransfer}</div>}\n-            </div>\n-\n-          <div className=\"mb-6 mt-3\">\n-            <Label htmlFor=\"paymentDate\" className=\"mb-2 block\">Tanggal Pembayaran</Label>\n-            <div className='flex items-center w-72 relative border border-gray-300 rounded-md shadow-sm bg-gray-50'>\n-            <FaCalendarAlt className=\"absolute h-5 w-5 left-2 z-50 top-1/2 transform -translate-y-1/2 text-gray-500\" />\n-            <DatePicker\n-              locale={id}\n-              id=\"paymentDate\"\n-              name=\"paymentDate\"\n-              selected={paymentDate}\n-              onChange={(date) => setPaymentDate(date)}\n-              dateFormat=\"dd MMMM yyyy\"\n-              calendarClassName=\"light-blue-stripes\"\n-              placeholderText=\"Pilih tanggal\"\n-              className=\"block w-full pl-8 text-sm text-gray-900  border-gray-300 border-none rounded-md py-2 px-4 focus:ring-0 bg-gray-50\"\n-            />\n-            </div>\n-            {errors.paymentDate && <div className=\"text-red-500 text-sm\">{errors.paymentDate}</div>}\n-            \n-          </div>\n-\n-          <div className='flex gap-2'>\n-            <Button \n-            type=\"submit\" \n-            color={transactionType === 'ipl' ? 'success' : transactionType === 'income' ? 'blue' : 'failure'}\n-            disabled={isProcessing}\n-            >\n-              {isProcessing && <AiOutlineLoading className=\"h-5 w-5 animate-spin mr-2\" />}\n-              {transactionType === 'ipl' && <FaExchangeAlt className=\"mr-2 h-5 w-5\" />}\n-              {transactionType === 'income' && <FaRegArrowAltCircleDown className=\"mr-2 h-5 w-5\" />}\n-              {transactionType === 'expense' && <FaRegArrowAltCircleUp className=\"mr-2 h-5 w-5\" />}\n-              Simpan\n-            </Button>\n-            <Button\n-              type=\"button\"\n-              color=\"gray\"\n-              onClick={() => {\n-                resetForm();\n-                onClose();\n-              }}\n-            >\n-              Batal\n-            </Button>\n-          </div>\n-        </form>\n-      </Drawer.Items>\n-    </Drawer>\n-  );\n-};\n-\n-export default TransactionDrawer;\n-// components/TransactionDrawer.js\n-import { getSession, useSession } from 'next-auth/react';\n-import { useState, useEffect, useRef } from 'react';\n-import { Drawer, Button, Input, FileInput, Textarea, Label, TextInput, Dropdown,Alert } from 'flowbite-react';\n-import {FaCalendarAlt, FaMoneyBill, FaRegArrowAltCircleDown, FaRegArrowAltCircleUp } from 'react-icons/fa';\n-import { FaExchangeAlt } from \"react-icons/fa\";\n-import { AiOutlineLoading } from \"react-icons/ai\";\n-import axios from 'axios';\n-import Autocomplete from '../Autocomplete';\n-import DatePicker from 'react-datepicker';\n-import 'react-datepicker/dist/react-datepicker.css'\n-import Select from 'react-select';\n-import moment from 'moment';\n-import 'moment/locale/id';\n-import id from \"date-fns/locale/id\";\n-moment.locale('id');\n-\n-const TransactionDrawer = ({ isOpen, onClose, onSubmit, transactionType,transactionToEdit }) => {\n-  console.log(transactionToEdit)\n+  \n   const [houseId, setHouseId] = useState('');\n   const [houseName, setHouseName] = useState('');\n   const [amount, setAmount] = useState('');\n   const [description, setDescription] = useState('');\n"
                },
                {
                    "date": 1722416294332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,12 +15,8 @@\n import id from \"date-fns/locale/id\";\n moment.locale('id');\n \n const TransactionDrawer = ({ isOpen, onClose, onSubmit, transactionType,transactionToEdit }) => {\n-  if(transactionToEdit) {\n-    console.log(transactionToEdit.description)\n-  }\n- \n   \n   const [houseId, setHouseId] = useState('');\n   const [houseName, setHouseName] = useState('');\n   const [amount, setAmount] = useState('');\n"
                },
                {
                    "date": 1722416366638,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,24 @@\n   const fileInputRef = useRef(null);\n   const [isProcessing, setIsProcessing] = useState(false);\n   const [paymentType, setPaymentType] = useState('');\n \n+  // Set nilai awal formulir jika ada transactionToEdit\n   useEffect(() => {\n+    if (transactionToEdit) {\n+      setHouseId(transactionToEdit.houseId || '');\n+      setHouseName(transactionToEdit.houseName || '');\n+      setAmount(transactionToEdit.amount || '');\n+      setDescription(transactionToEdit.description || '');\n+      setProofOfTransfer(transactionToEdit.proof_of_transfer || '');\n+      setRelatedMonths(transactionToEdit.related_months || []);\n+      setPaymentDate(transactionToEdit.paymentDate || new Date());\n+      setStatus(transactionToEdit.status || 'berhasil');\n+      setPaymentType(transactionToEdit.payment_type || '');\n+    }\n+  }, [transactionToEdit]);\n+\n+  useEffect(() => {\n     if (session) {\n       const fetchHouses = async () => {\n         try {\n           const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/houses/all`, {\n"
                },
                {
                    "date": 1722416424407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,386 @@\n+// components/TransactionDrawer.js\n+import { getSession, useSession } from 'next-auth/react';\n+import { useState, useEffect, useRef } from 'react';\n+import { Drawer, Button, Input, FileInput, Textarea, Label, TextInput, Dropdown,Alert } from 'flowbite-react';\n+import {FaCalendarAlt, FaMoneyBill, FaRegArrowAltCircleDown, FaRegArrowAltCircleUp } from 'react-icons/fa';\n+import { FaExchangeAlt } from \"react-icons/fa\";\n+import { AiOutlineLoading } from \"react-icons/ai\";\n+import axios from 'axios';\n+import Autocomplete from '../Autocomplete';\n+import DatePicker from 'react-datepicker';\n+import 'react-datepicker/dist/react-datepicker.css'\n+import Select from 'react-select';\n+import moment from 'moment';\n+import 'moment/locale/id';\n+import id from \"date-fns/locale/id\";\n+moment.locale('id');\n+\n+const TransactionDrawer = ({ isOpen, onClose, onSubmit, transactionType,transactionToEdit }) => {\n+  \n+  const [houseId, setHouseId] = useState('');\n+  const [houseName, setHouseName] = useState('');\n+  const [amount, setAmount] = useState('');\n+  const [description, setDescription] = useState('');\n+  const [proofOfTransfer, setProofOfTransfer] = useState('');\n+  const [relatedMonths, setRelatedMonths] = useState([]);\n+  const [status, setStatus] = useState('berhasil');\n+  const [houses, setHouses] = useState([]);\n+  const [selectedHouse, setSelectedHouse] = useState(null);\n+  const [paymentDate, setPaymentDate] = useState(new Date());\n+  const { data: session } = useSession();\n+  const [errors, setErrors] = useState({});\n+  const [uploadUrl, setUploadUrl] = useState('');\n+  const fileInputRef = useRef(null);\n+  const [isProcessing, setIsProcessing] = useState(false);\n+  const [paymentType, setPaymentType] = useState('');\n+\n+  // Set nilai awal formulir jika ada transactionToEdit\n+  useEffect(() => {\n+    if (transactionToEdit) {\n+      setHouseId(transactionToEdit.houseId || '');\n+      setHouseName(transactionToEdit.houseName || '');\n+      setAmount(transactionToEdit.amount || '');\n+      setDescription(transactionToEdit.description || '');\n+      setProofOfTransfer(transactionToEdit.proof_of_transfer || '');\n+      setRelatedMonths(transactionToEdit.related_months || []);\n+      setPaymentDate(transactionToEdit.paymentDate || new Date());\n+      setStatus(transactionToEdit.status || 'berhasil');\n+      setPaymentType(transactionToEdit.payment_type || '');\n+    }\n+  }, [transactionToEdit]);\n+\n+  useEffect(() => {\n+    if (session) {\n+      const fetchHouses = async () => {\n+        try {\n+          const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/houses/all`, {\n+            headers: {\n+              Authorization: `Bearer ${session.accessToken}`,\n+            },\n+          });\n+          setHouses(res.data.map(house => ({\n+            value: house.house_id,\n+            label: house.house_id\n+          })));\n+        } catch (error) {\n+          console.error('Error fetching houses data:', error);\n+        }\n+      };\n+\n+      fetchHouses();\n+    }\n+  }, [session]);\n+\n+  useEffect(() => {\n+    if (transactionType === 'ipl') {\n+      if(relatedMonths.length > 0 && houseName ) {\n+        const monthLabels = relatedMonths.map(option => moment(option.value, \"YYYY-MM\").format(\"MMMM YYYY\")).join(', ');\n+        const descriptionText = `IPL ${houseName} periode ${monthLabels}`;\n+        setDescription(descriptionText);\n+      }\n+     \n+    }\n+  }, [houseId, relatedMonths, transactionType]);\n+\n+  const handleFileChange = (e) => {\n+    const file = e.target.files[0];\n+    if (file) {\n+        setProofOfTransfer(file); // Set file for upload\n+    }\n+  };\n+\n+  const handleFileUpload = async (file) => {\n+    const formData = new FormData();\n+    formData.append('file', file);\n+\n+    try {\n+        const response = await axios.post(`${process.env.NEXT_PUBLIC_API_URL}/upload`, formData, {\n+            headers: {\n+                'Content-Type': 'multipart/form-data',\n+            },\n+        });\n+        setUploadUrl(response.data.url);\n+        return response.data.url;\n+    } catch (error) {\n+        //console.error('Error uploading file:', error);\n+        //alert('Failed to upload file.');\n+        return null;\n+    }\n+  };\n+\n+  useEffect(() => {\n+    if (transactionToEdit) {\n+      setUploadUrl(transactionToEdit.proof_of_transfer);\n+    }\n+  }, [transactionToEdit]);\n+\n+  const handleSubmit = async (e) => {\n+    e.preventDefault();\n+    const newErrors = {};\n+\n+    if (!transactionType) newErrors.transactionType = 'Transaction type is required';\n+    if (!amount || amount <= 0) newErrors.amount = 'Amount must be a positive number';\n+    if (!description) newErrors.description = 'Description is required';\n+    if (!paymentDate) newErrors.paymentDate = 'Payment date is required';\n+    if (!relatedMonths) newErrors.relatedMonths = 'Months is required';\n+    if (transactionType === 'ipl' && !houseId) newErrors.houseId = 'House ID is required';\n+    if (paymentType === 'transfer' && !proofOfTransfer) newErrors.proofOfTransfer = 'Proof of transfer is required';\n+\n+    if (Object.keys(newErrors).length > 0) {\n+      setErrors(newErrors);\n+      return;\n+    }\n+\n+    setIsProcessing(true); // Start processing\n+\n+    let proofOfTransferUrl = uploadUrl;\n+    // If proofOfTransfer is a file that needs to be uploaded\n+    if (proofOfTransfer && proofOfTransfer instanceof File) {\n+      proofOfTransferUrl = await handleFileUpload(proofOfTransfer);\n+      if (!proofOfTransferUrl) return; // Abort if upload fails\n+    }\n+\n+    const convertStringToArray = (dateString) => {\n+      // Memisahkan string berdasarkan koma dan spasi\n+      const dateArray = dateString.split(', ').map(date => date.trim());\n+      return dateArray;\n+    };\n+\n+    const dateString = relatedMonths.map(option => option.value).join(', ');\n+    const dateArray = convertStringToArray(dateString);\n+\n+\n+\n+    //console.log(relatedMonths.map(option => option.value))\n+    const newTransaction = {\n+      transaction_type: transactionType,\n+      amount,\n+      description,\n+      proof_of_transfer: proofOfTransferUrl,\n+      houseId,\n+      payment_type: paymentType.value,\n+      related_months: dateArray,\n+      //relatedMonths:relatedMonths.map(option => moment(option.value, \"YYYY-MM\")).join(', '),\n+      paymentDate,\n+      status\n+    };\n+\n+   // console.log(newTransaction)\n+\n+    onSubmit(newTransaction);\n+    setHouseId('');\n+    setAmount('');\n+    setDescription('');\n+    setProofOfTransfer('');\n+    setRelatedMonths([]);\n+    setPaymentDate(new Date());\n+    setStatus('berhasil');\n+    fileInputRef.current.value = '';\n+    setPaymentType('');\n+    setIsProcessing(false); // Stop processing\n+    onClose();\n+  };\n+\n+  const handleHouseChange = (newValue) => {\n+    setHouseId(newValue);\n+  };\n+\n+  const handleHouseSelect = (selectedHouse) => {\n+    setHouseId(selectedHouse.value);\n+    setHouseName(selectedHouse.label)\n+    //setDescription(`IPL rumah ${selectedHouse.value} periode ${relatedMonths.join(', ')}`);\n+  };\n+\n+  const handleMonthChange = (selectedOptions) => {\n+    setRelatedMonths(selectedOptions || []);\n+  };\n+\n+  const generateMonthsOptions = () => {\n+    const options = [];\n+    const startYear = moment().year();\n+    const endYear = startYear + 2; // 2 tahun ke depan\n+\n+    for (let year = startYear; year <= endYear; year++) {\n+      for (let month = 0; month < 12; month++) {\n+        const value = moment().month(month).year(year).format(\"YYYY-MM\");\n+        const label = moment().month(month).year(year).format(\"MMMM YYYY\");\n+        options.push({ value, label });\n+      }\n+    }\n+    return options;\n+  };\n+\n+  const optionsType = [\n+    { value: 'cash', label: 'Cash' },\n+    { value: 'transfer', label: 'Transfer' },\n+  ]\n+\n+  const handleTypeChange = (e) => {\n+    setPaymentType(e);\n+  };\n+\n+  const resetForm = () => {\n+    setHouseId('');\n+    setAmount('');\n+    setDescription('');\n+    setProofOfTransfer('');\n+    setRelatedMonths([]);\n+    setPaymentDate(new Date());\n+    setStatus('berhasil');\n+    setPaymentType('');\n+    fileInputRef.current.value = '';\n+    setErrors({});\n+  };\n+\n+ \n+\n+  return (\n+    <Drawer\n+      open={isOpen}\n+      onClose={() => {\n+        resetForm();\n+        onClose();\n+      }}\n+      position=\"right\"\n+      className=\"py-4 px-7 top-0 z-50 w-full md:w-2/4\"\n+    >\n+      <Drawer.Header title={`Transaksi ${transactionType === 'ipl' ? 'IPL' : transactionType === 'income' ? 'Masuk' : 'Keluar'}`} titleIcon={FaExchangeAlt} />\n+      <Drawer.Items>\n+        <form onSubmit={handleSubmit} className=\"space-y-4\">\n+          {transactionType === 'ipl' && (\n+            <>\n+              <div className=\"mb-6 mt-3\">\n+                <Label htmlFor=\"houseId\" className=\"mb-2 block\">No Rumah</Label>\n+                <Autocomplete\n+                  value={houseId}\n+                  onChange={handleHouseChange}\n+                  options={houses}\n+                  onSelect={handleHouseSelect}\n+                />\n+                {errors.houseId && <div className=\"text-red-500 text-sm\">{errors.houseId}</div>}\n+              </div>\n+\n+              <div className=\"mb-6 mt-3\">\n+                <Label htmlFor=\"relatedMonths\" className=\"mb-2 block\">Periode</Label>\n+                <Select\n+                 id=\"relatedMonths\"\n+                 isMulti\n+                 options={generateMonthsOptions()}\n+                 value={relatedMonths}\n+                 onChange={handleMonthChange}\n+                 placeholder=\"Pilih bulan\"\n+                 className='bg-gray-50 text-sm'\n+                />\n+                {errors.relatedMonths && <div className=\"text-red-500 text-sm\">{errors.relatedMonths}</div>}\n+              </div>\n+            </>\n+          )}\n+\n+          <div className=\"mb-6 mt-3\">\n+            <Label htmlFor=\"description\" className=\"mb-2 block\">Deskripsi</Label>\n+            <Textarea\n+              id=\"description\"\n+              name=\"description\"\n+              value={description}\n+              onChange={(e) => setDescription(e.target.value)}\n+              placeholder=\"Masukkan deskripsi\"\n+              readOnly={transactionType === 'ipl'} // Make description read-only for IPL transactions\n+            />\n+            {errors.description && <div className=\"text-red-500 text-sm\">{errors.description}</div>}\n+          </div>\n+\n+          <div className=\"mb-6 mt-3\">\n+            <Label htmlFor=\"amount\" className=\"mb-2 block\">Jumlah</Label>\n+            <TextInput\n+              id=\"amount\"\n+              name=\"amount\"\n+              type=\"number\"\n+              value={amount}\n+              onChange={(e) => setAmount(e.target.value)}\n+              placeholder=\"Masukkan jumlah\"\n+            />\n+            {errors.amount && <div className=\"text-red-500 text-sm\">{errors.amount}</div>}\n+          </div>\n+\n+          <div className=\"mb-6 mt-3\">\n+            <Label htmlFor=\"payment_type\" className=\"mb-2 block\">Tipe Pembayaran</Label>\n+              <Select\n+                id=\"payment_type\"\n+                options={optionsType}\n+                value={paymentType}\n+                onChange={handleTypeChange}\n+                placeholder=\"Cash atau Transfer\"\n+                className='bg-gray-50 text-sm'\n+              />\n+            {/* {errors.amount && <div className=\"text-red-500 text-sm\">{errors.amount}</div>} */}\n+          </div>\n+\n+          <div className=\"mb-6 mt-3\">\n+              <Label htmlFor=\"proofOfTransfer\" className=\"mb-2 block\">Lampiran</Label>\n+              <FileInput \n+                id=\"file\" \n+                onChange={handleFileChange} \n+                accept=\".jpg,.png,.pdf\"\n+                ref={fileInputRef}\n+              />\n+              <TextInput\n+                id=\"proofOfTransfer\"\n+                name=\"proofOfTransfer\"\n+                value={proofOfTransfer}\n+                onChange={(e) => setProofOfTransfer(e.target.value)}\n+                placeholder=\"Masukkan URL lampiran\"\n+                className='hidden'\n+              />\n+              {errors.proofOfTransfer && <div className=\"text-red-500 text-sm\">{errors.proofOfTransfer}</div>}\n+            </div>\n+\n+          <div className=\"mb-6 mt-3\">\n+            <Label htmlFor=\"paymentDate\" className=\"mb-2 block\">Tanggal Pembayaran</Label>\n+            <div className='flex items-center w-72 relative border border-gray-300 rounded-md shadow-sm bg-gray-50'>\n+            <FaCalendarAlt className=\"absolute h-5 w-5 left-2 z-50 top-1/2 transform -translate-y-1/2 text-gray-500\" />\n+            <DatePicker\n+              locale={id}\n+              id=\"paymentDate\"\n+              name=\"paymentDate\"\n+              selected={paymentDate}\n+              onChange={(date) => setPaymentDate(date)}\n+              dateFormat=\"dd MMMM yyyy\"\n+              calendarClassName=\"light-blue-stripes\"\n+              placeholderText=\"Pilih tanggal\"\n+              className=\"block w-full pl-8 text-sm text-gray-900  border-gray-300 border-none rounded-md py-2 px-4 focus:ring-0 bg-gray-50\"\n+            />\n+            </div>\n+            {errors.paymentDate && <div className=\"text-red-500 text-sm\">{errors.paymentDate}</div>}\n+            \n+          </div>\n+\n+          <div className='flex gap-2'>\n+            <Button \n+            type=\"submit\" \n+            color={transactionType === 'ipl' ? 'success' : transactionType === 'income' ? 'blue' : 'failure'}\n+            disabled={isProcessing}\n+            >\n+              {isProcessing && <AiOutlineLoading className=\"h-5 w-5 animate-spin mr-2\" />}\n+              {transactionType === 'ipl' && <FaExchangeAlt className=\"mr-2 h-5 w-5\" />}\n+              {transactionType === 'income' && <FaRegArrowAltCircleDown className=\"mr-2 h-5 w-5\" />}\n+              {transactionType === 'expense' && <FaRegArrowAltCircleUp className=\"mr-2 h-5 w-5\" />}\n+              Simpan\n+            </Button>\n+            <Button\n+              type=\"button\"\n+              color=\"gray\"\n+              onClick={() => {\n+                resetForm();\n+                onClose();\n+              }}\n+            >\n+              Batal\n+            </Button>\n+          </div>\n+        </form>\n+      </Drawer.Items>\n+    </Drawer>\n+  );\n+};\n+\n+export default TransactionDrawer;\n"
                },
                {
                    "date": 1722416441764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -180,388 +180,15 @@\n     setIsProcessing(false); // Stop processing\n     onClose();\n   };\n \n-  const handleHouseChange = (newValue) => {\n-    setHouseId(newValue);\n-  };\n-\n-  const handleHouseSelect = (selectedHouse) => {\n-    setHouseId(selectedHouse.value);\n-    setHouseName(selectedHouse.label)\n-    //setDescription(`IPL rumah ${selectedHouse.value} periode ${relatedMonths.join(', ')}`);\n-  };\n-\n-  const handleMonthChange = (selectedOptions) => {\n-    setRelatedMonths(selectedOptions || []);\n-  };\n-\n-  const generateMonthsOptions = () => {\n-    const options = [];\n-    const startYear = moment().year();\n-    const endYear = startYear + 2; // 2 tahun ke depan\n-\n-    for (let year = startYear; year <= endYear; year++) {\n-      for (let month = 0; month < 12; month++) {\n-        const value = moment().month(month).year(year).format(\"YYYY-MM\");\n-        const label = moment().month(month).year(year).format(\"MMMM YYYY\");\n-        options.push({ value, label });\n-      }\n-    }\n-    return options;\n-  };\n-\n-  const optionsType = [\n-    { value: 'cash', label: 'Cash' },\n-    { value: 'transfer', label: 'Transfer' },\n-  ]\n-\n-  const handleTypeChange = (e) => {\n-    setPaymentType(e);\n-  };\n-\n-  const resetForm = () => {\n-    setHouseId('');\n-    setAmount('');\n-    setDescription('');\n-    setProofOfTransfer('');\n-    setRelatedMonths([]);\n-    setPaymentDate(new Date());\n-    setStatus('berhasil');\n-    setPaymentType('');\n-    fileInputRef.current.value = '';\n-    setErrors({});\n-  };\n-\n- \n-\n-  return (\n-    <Drawer\n-      open={isOpen}\n-      onClose={() => {\n-        resetForm();\n-        onClose();\n-      }}\n-      position=\"right\"\n-      className=\"py-4 px-7 top-0 z-50 w-full md:w-2/4\"\n-    >\n-      <Drawer.Header title={`Transaksi ${transactionType === 'ipl' ? 'IPL' : transactionType === 'income' ? 'Masuk' : 'Keluar'}`} titleIcon={FaExchangeAlt} />\n-      <Drawer.Items>\n-        <form onSubmit={handleSubmit} className=\"space-y-4\">\n-          {transactionType === 'ipl' && (\n-            <>\n-              <div className=\"mb-6 mt-3\">\n-                <Label htmlFor=\"houseId\" className=\"mb-2 block\">No Rumah</Label>\n-                <Autocomplete\n-                  value={houseId}\n-                  onChange={handleHouseChange}\n-                  options={houses}\n-                  onSelect={handleHouseSelect}\n-                />\n-                {errors.houseId && <div className=\"text-red-500 text-sm\">{errors.houseId}</div>}\n-              </div>\n-\n-              <div className=\"mb-6 mt-3\">\n-                <Label htmlFor=\"relatedMonths\" className=\"mb-2 block\">Periode</Label>\n-                <Select\n-                 id=\"relatedMonths\"\n-                 isMulti\n-                 options={generateMonthsOptions()}\n-                 value={relatedMonths}\n-                 onChange={handleMonthChange}\n-                 placeholder=\"Pilih bulan\"\n-                 className='bg-gray-50 text-sm'\n-                />\n-                {errors.relatedMonths && <div className=\"text-red-500 text-sm\">{errors.relatedMonths}</div>}\n-              </div>\n-            </>\n-          )}\n-\n-          <div className=\"mb-6 mt-3\">\n-            <Label htmlFor=\"description\" className=\"mb-2 block\">Deskripsi</Label>\n-            <Textarea\n-              id=\"description\"\n-              name=\"description\"\n-              value={description}\n-              onChange={(e) => setDescription(e.target.value)}\n-              placeholder=\"Masukkan deskripsi\"\n-              readOnly={transactionType === 'ipl'} // Make description read-only for IPL transactions\n-            />\n-            {errors.description && <div className=\"text-red-500 text-sm\">{errors.description}</div>}\n-          </div>\n-\n-          <div className=\"mb-6 mt-3\">\n-            <Label htmlFor=\"amount\" className=\"mb-2 block\">Jumlah</Label>\n-            <TextInput\n-              id=\"amount\"\n-              name=\"amount\"\n-              type=\"number\"\n-              value={amount}\n-              onChange={(e) => setAmount(e.target.value)}\n-              placeholder=\"Masukkan jumlah\"\n-            />\n-            {errors.amount && <div className=\"text-red-500 text-sm\">{errors.amount}</div>}\n-          </div>\n-\n-          <div className=\"mb-6 mt-3\">\n-            <Label htmlFor=\"payment_type\" className=\"mb-2 block\">Tipe Pembayaran</Label>\n-              <Select\n-                id=\"payment_type\"\n-                options={optionsType}\n-                value={paymentType}\n-                onChange={handleTypeChange}\n-                placeholder=\"Cash atau Transfer\"\n-                className='bg-gray-50 text-sm'\n-              />\n-            {/* {errors.amount && <div className=\"text-red-500 text-sm\">{errors.amount}</div>} */}\n-          </div>\n-\n-          <div className=\"mb-6 mt-3\">\n-              <Label htmlFor=\"proofOfTransfer\" className=\"mb-2 block\">Lampiran</Label>\n-              <FileInput \n-                id=\"file\" \n-                onChange={handleFileChange} \n-                accept=\".jpg,.png,.pdf\"\n-                ref={fileInputRef}\n-              />\n-              <TextInput\n-                id=\"proofOfTransfer\"\n-                name=\"proofOfTransfer\"\n-                value={proofOfTransfer}\n-                onChange={(e) => setProofOfTransfer(e.target.value)}\n-                placeholder=\"Masukkan URL lampiran\"\n-                className='hidden'\n-              />\n-              {errors.proofOfTransfer && <div className=\"text-red-500 text-sm\">{errors.proofOfTransfer}</div>}\n-            </div>\n-\n-          <div className=\"mb-6 mt-3\">\n-            <Label htmlFor=\"paymentDate\" className=\"mb-2 block\">Tanggal Pembayaran</Label>\n-            <div className='flex items-center w-72 relative border border-gray-300 rounded-md shadow-sm bg-gray-50'>\n-            <FaCalendarAlt className=\"absolute h-5 w-5 left-2 z-50 top-1/2 transform -translate-y-1/2 text-gray-500\" />\n-            <DatePicker\n-              locale={id}\n-              id=\"paymentDate\"\n-              name=\"paymentDate\"\n-              selected={paymentDate}\n-              onChange={(date) => setPaymentDate(date)}\n-              dateFormat=\"dd MMMM yyyy\"\n-              calendarClassName=\"light-blue-stripes\"\n-              placeholderText=\"Pilih tanggal\"\n-              className=\"block w-full pl-8 text-sm text-gray-900  border-gray-300 border-none rounded-md py-2 px-4 focus:ring-0 bg-gray-50\"\n-            />\n-            </div>\n-            {errors.paymentDate && <div className=\"text-red-500 text-sm\">{errors.paymentDate}</div>}\n-            \n-          </div>\n-\n-          <div className='flex gap-2'>\n-            <Button \n-            type=\"submit\" \n-            color={transactionType === 'ipl' ? 'success' : transactionType === 'income' ? 'blue' : 'failure'}\n-            disabled={isProcessing}\n-            >\n-              {isProcessing && <AiOutlineLoading className=\"h-5 w-5 animate-spin mr-2\" />}\n-              {transactionType === 'ipl' && <FaExchangeAlt className=\"mr-2 h-5 w-5\" />}\n-              {transactionType === 'income' && <FaRegArrowAltCircleDown className=\"mr-2 h-5 w-5\" />}\n-              {transactionType === 'expense' && <FaRegArrowAltCircleUp className=\"mr-2 h-5 w-5\" />}\n-              Simpan\n-            </Button>\n-            <Button\n-              type=\"button\"\n-              color=\"gray\"\n-              onClick={() => {\n-                resetForm();\n-                onClose();\n-              }}\n-            >\n-              Batal\n-            </Button>\n-          </div>\n-        </form>\n-      </Drawer.Items>\n-    </Drawer>\n-  );\n-};\n-\n-export default TransactionDrawer;\n-// components/TransactionDrawer.js\n-import { getSession, useSession } from 'next-auth/react';\n-import { useState, useEffect, useRef } from 'react';\n-import { Drawer, Button, Input, FileInput, Textarea, Label, TextInput, Dropdown,Alert } from 'flowbite-react';\n-import {FaCalendarAlt, FaMoneyBill, FaRegArrowAltCircleDown, FaRegArrowAltCircleUp } from 'react-icons/fa';\n-import { FaExchangeAlt } from \"react-icons/fa\";\n-import { AiOutlineLoading } from \"react-icons/ai\";\n-import axios from 'axios';\n-import Autocomplete from '../Autocomplete';\n-import DatePicker from 'react-datepicker';\n-import 'react-datepicker/dist/react-datepicker.css'\n-import Select from 'react-select';\n-import moment from 'moment';\n-import 'moment/locale/id';\n-import id from \"date-fns/locale/id\";\n-moment.locale('id');\n-\n-const TransactionDrawer = ({ isOpen, onClose, onSubmit, transactionType,transactionToEdit }) => {\n-  \n-  const [houseId, setHouseId] = useState('');\n-  const [houseName, setHouseName] = useState('');\n-  const [amount, setAmount] = useState('');\n-  const [description, setDescription] = useState('');\n-  const [proofOfTransfer, setProofOfTransfer] = useState('');\n-  const [relatedMonths, setRelatedMonths] = useState([]);\n-  const [status, setStatus] = useState('berhasil');\n-  const [houses, setHouses] = useState([]);\n-  const [selectedHouse, setSelectedHouse] = useState(null);\n-  const [paymentDate, setPaymentDate] = useState(new Date());\n-  const { data: session } = useSession();\n-  const [errors, setErrors] = useState({});\n-  const [uploadUrl, setUploadUrl] = useState('');\n-  const fileInputRef = useRef(null);\n-  const [isProcessing, setIsProcessing] = useState(false);\n-  const [paymentType, setPaymentType] = useState('');\n-\n-  // Set nilai awal formulir jika ada transactionToEdit\n   useEffect(() => {\n     if (transactionToEdit) {\n-      setHouseId(transactionToEdit.houseId || '');\n-      setHouseName(transactionToEdit.houseName || '');\n-      setAmount(transactionToEdit.amount || '');\n-      setDescription(transactionToEdit.description || '');\n-      setProofOfTransfer(transactionToEdit.proof_of_transfer || '');\n-      setRelatedMonths(transactionToEdit.related_months || []);\n-      setPaymentDate(transactionToEdit.paymentDate || new Date());\n-      setStatus(transactionToEdit.status || 'berhasil');\n-      setPaymentType(transactionToEdit.payment_type || '');\n+      setHouseName(transactionToEdit.houseName);\n     }\n   }, [transactionToEdit]);\n \n-  useEffect(() => {\n-    if (session) {\n-      const fetchHouses = async () => {\n-        try {\n-          const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/houses/all`, {\n-            headers: {\n-              Authorization: `Bearer ${session.accessToken}`,\n-            },\n-          });\n-          setHouses(res.data.map(house => ({\n-            value: house.house_id,\n-            label: house.house_id\n-          })));\n-        } catch (error) {\n-          console.error('Error fetching houses data:', error);\n-        }\n-      };\n \n-      fetchHouses();\n-    }\n-  }, [session]);\n-\n-  useEffect(() => {\n-    if (transactionType === 'ipl') {\n-      if(relatedMonths.length > 0 && houseName ) {\n-        const monthLabels = relatedMonths.map(option => moment(option.value, \"YYYY-MM\").format(\"MMMM YYYY\")).join(', ');\n-        const descriptionText = `IPL ${houseName} periode ${monthLabels}`;\n-        setDescription(descriptionText);\n-      }\n-     \n-    }\n-  }, [houseId, relatedMonths, transactionType]);\n-\n-  const handleFileChange = (e) => {\n-    const file = e.target.files[0];\n-    if (file) {\n-        setProofOfTransfer(file); // Set file for upload\n-    }\n-  };\n-\n-  const handleFileUpload = async (file) => {\n-    const formData = new FormData();\n-    formData.append('file', file);\n-\n-    try {\n-        const response = await axios.post(`${process.env.NEXT_PUBLIC_API_URL}/upload`, formData, {\n-            headers: {\n-                'Content-Type': 'multipart/form-data',\n-            },\n-        });\n-        setUploadUrl(response.data.url);\n-        return response.data.url;\n-    } catch (error) {\n-        //console.error('Error uploading file:', error);\n-        //alert('Failed to upload file.');\n-        return null;\n-    }\n- };\n-\n-  const handleSubmit = async (e) => {\n-    e.preventDefault();\n-    const newErrors = {};\n-\n-    if (!transactionType) newErrors.transactionType = 'Transaction type is required';\n-    if (!amount || amount <= 0) newErrors.amount = 'Amount must be a positive number';\n-    if (!description) newErrors.description = 'Description is required';\n-    if (!paymentDate) newErrors.paymentDate = 'Payment date is required';\n-    if (!relatedMonths) newErrors.relatedMonths = 'Months is required';\n-    if (transactionType === 'ipl' && !houseId) newErrors.houseId = 'House ID is required';\n-    if (paymentType === 'transfer' && !proofOfTransfer) newErrors.proofOfTransfer = 'Proof of transfer is required';\n-\n-    if (Object.keys(newErrors).length > 0) {\n-      setErrors(newErrors);\n-      return;\n-    }\n-\n-    setIsProcessing(true); // Start processing\n-\n-    let proofOfTransferUrl = uploadUrl;\n-    // If proofOfTransfer is a file that needs to be uploaded\n-    if (proofOfTransfer && proofOfTransfer instanceof File) {\n-      proofOfTransferUrl = await handleFileUpload(proofOfTransfer);\n-      if (!proofOfTransferUrl) return; // Abort if upload fails\n-    }\n-\n-    const convertStringToArray = (dateString) => {\n-      // Memisahkan string berdasarkan koma dan spasi\n-      const dateArray = dateString.split(', ').map(date => date.trim());\n-      return dateArray;\n-    };\n-\n-    const dateString = relatedMonths.map(option => option.value).join(', ');\n-    const dateArray = convertStringToArray(dateString);\n-\n-\n-\n-    //console.log(relatedMonths.map(option => option.value))\n-    const newTransaction = {\n-      transaction_type: transactionType,\n-      amount,\n-      description,\n-      proof_of_transfer: proofOfTransferUrl,\n-      houseId,\n-      payment_type: paymentType.value,\n-      related_months: dateArray,\n-      //relatedMonths:relatedMonths.map(option => moment(option.value, \"YYYY-MM\")).join(', '),\n-      paymentDate,\n-      status\n-    };\n-\n-   // console.log(newTransaction)\n-\n-    onSubmit(newTransaction);\n-    setHouseId('');\n-    setAmount('');\n-    setDescription('');\n-    setProofOfTransfer('');\n-    setRelatedMonths([]);\n-    setPaymentDate(new Date());\n-    setStatus('berhasil');\n-    fileInputRef.current.value = '';\n-    setPaymentType('');\n-    setIsProcessing(false); // Stop processing\n-    onClose();\n-  };\n-\n   const handleHouseChange = (newValue) => {\n     setHouseId(newValue);\n   };\n \n"
                },
                {
                    "date": 1722416487184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -196,9 +196,16 @@\n     setHouseId(selectedHouse.value);\n     setHouseName(selectedHouse.label)\n     //setDescription(`IPL rumah ${selectedHouse.value} periode ${relatedMonths.join(', ')}`);\n   };\n+  \n+  useEffect(() => {\n+    if (transactionToEdit) {\n+      setRelatedMonths(transactionToEdit.related_months || []);\n+    }\n+  }, [transactionToEdit]);\n \n+\n   const handleMonthChange = (selectedOptions) => {\n     setRelatedMonths(selectedOptions || []);\n   };\n \n"
                },
                {
                    "date": 1722416503212,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -228,8 +228,14 @@\n     { value: 'cash', label: 'Cash' },\n     { value: 'transfer', label: 'Transfer' },\n   ]\n \n+  useEffect(() => {\n+    if (transactionToEdit) {\n+      setPaymentType(transactionToEdit.payment_type || '');\n+    }\n+  }, [transactionToEdit]);\n+\n   const handleTypeChange = (e) => {\n     setPaymentType(e);\n   };\n \n"
                },
                {
                    "date": 1722416535136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,406 @@\n+// components/TransactionDrawer.js\n+import { getSession, useSession } from 'next-auth/react';\n+import { useState, useEffect, useRef } from 'react';\n+import { Drawer, Button, Input, FileInput, Textarea, Label, TextInput, Dropdown,Alert } from 'flowbite-react';\n+import {FaCalendarAlt, FaMoneyBill, FaRegArrowAltCircleDown, FaRegArrowAltCircleUp } from 'react-icons/fa';\n+import { FaExchangeAlt } from \"react-icons/fa\";\n+import { AiOutlineLoading } from \"react-icons/ai\";\n+import axios from 'axios';\n+import Autocomplete from '../Autocomplete';\n+import DatePicker from 'react-datepicker';\n+import 'react-datepicker/dist/react-datepicker.css'\n+import Select from 'react-select';\n+import moment from 'moment';\n+import 'moment/locale/id';\n+import id from \"date-fns/locale/id\";\n+moment.locale('id');\n+\n+const TransactionDrawer = ({ isOpen, onClose, onSubmit, transactionType,transactionToEdit }) => {\n+  \n+  const [houseId, setHouseId] = useState('');\n+  const [houseName, setHouseName] = useState('');\n+  const [amount, setAmount] = useState('');\n+  const [description, setDescription] = useState('');\n+  const [proofOfTransfer, setProofOfTransfer] = useState('');\n+  const [relatedMonths, setRelatedMonths] = useState([]);\n+  const [status, setStatus] = useState('berhasil');\n+  const [houses, setHouses] = useState([]);\n+  const [selectedHouse, setSelectedHouse] = useState(null);\n+  const [paymentDate, setPaymentDate] = useState(new Date());\n+  const { data: session } = useSession();\n+  const [errors, setErrors] = useState({});\n+  const [uploadUrl, setUploadUrl] = useState('');\n+  const fileInputRef = useRef(null);\n+  const [isProcessing, setIsProcessing] = useState(false);\n+  const [paymentType, setPaymentType] = useState('Cash');\n+\n+  // Set nilai awal formulir jika ada transactionToEdit\n+  useEffect(() => {\n+    if (transactionToEdit) {\n+      setHouseId(transactionToEdit.houseId || '');\n+      setHouseName(transactionToEdit.houseName || '');\n+      setAmount(transactionToEdit.amount || '');\n+      setDescription(transactionToEdit.description || '');\n+      setProofOfTransfer(transactionToEdit.proof_of_transfer || '');\n+      setRelatedMonths(transactionToEdit.related_months || []);\n+      setPaymentDate(transactionToEdit.paymentDate || new Date());\n+      setStatus(transactionToEdit.status || 'berhasil');\n+      setPaymentType(transactionToEdit.payment_type || '');\n+    }\n+  }, [transactionToEdit]);\n+\n+  useEffect(() => {\n+    if (session) {\n+      const fetchHouses = async () => {\n+        try {\n+          const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/houses/all`, {\n+            headers: {\n+              Authorization: `Bearer ${session.accessToken}`,\n+            },\n+          });\n+          setHouses(res.data.map(house => ({\n+            value: house.house_id,\n+            label: house.house_id\n+          })));\n+        } catch (error) {\n+          console.error('Error fetching houses data:', error);\n+        }\n+      };\n+\n+      fetchHouses();\n+    }\n+  }, [session]);\n+\n+  useEffect(() => {\n+    if (transactionType === 'ipl') {\n+      if(relatedMonths.length > 0 && houseName ) {\n+        const monthLabels = relatedMonths.map(option => moment(option.value, \"YYYY-MM\").format(\"MMMM YYYY\")).join(', ');\n+        const descriptionText = `IPL ${houseName} periode ${monthLabels}`;\n+        setDescription(descriptionText);\n+      }\n+     \n+    }\n+  }, [houseId, relatedMonths, transactionType]);\n+\n+  const handleFileChange = (e) => {\n+    const file = e.target.files[0];\n+    if (file) {\n+        setProofOfTransfer(file); // Set file for upload\n+    }\n+  };\n+\n+  const handleFileUpload = async (file) => {\n+    const formData = new FormData();\n+    formData.append('file', file);\n+\n+    try {\n+        const response = await axios.post(`${process.env.NEXT_PUBLIC_API_URL}/upload`, formData, {\n+            headers: {\n+                'Content-Type': 'multipart/form-data',\n+            },\n+        });\n+        setUploadUrl(response.data.url);\n+        return response.data.url;\n+    } catch (error) {\n+        //console.error('Error uploading file:', error);\n+        //alert('Failed to upload file.');\n+        return null;\n+    }\n+  };\n+\n+  useEffect(() => {\n+    if (transactionToEdit) {\n+      setUploadUrl(transactionToEdit.proof_of_transfer);\n+    }\n+  }, [transactionToEdit]);\n+\n+  const handleSubmit = async (e) => {\n+    e.preventDefault();\n+    const newErrors = {};\n+\n+    if (!transactionType) newErrors.transactionType = 'Transaction type is required';\n+    if (!amount || amount <= 0) newErrors.amount = 'Amount must be a positive number';\n+    if (!description) newErrors.description = 'Description is required';\n+    if (!paymentDate) newErrors.paymentDate = 'Payment date is required';\n+    if (!relatedMonths) newErrors.relatedMonths = 'Months is required';\n+    if (transactionType === 'ipl' && !houseId) newErrors.houseId = 'House ID is required';\n+    if (paymentType === 'transfer' && !proofOfTransfer) newErrors.proofOfTransfer = 'Proof of transfer is required';\n+\n+    if (Object.keys(newErrors).length > 0) {\n+      setErrors(newErrors);\n+      return;\n+    }\n+\n+    setIsProcessing(true); // Start processing\n+\n+    let proofOfTransferUrl = uploadUrl;\n+    // If proofOfTransfer is a file that needs to be uploaded\n+    if (proofOfTransfer && proofOfTransfer instanceof File) {\n+      proofOfTransferUrl = await handleFileUpload(proofOfTransfer);\n+      if (!proofOfTransferUrl) return; // Abort if upload fails\n+    }\n+\n+    const convertStringToArray = (dateString) => {\n+      // Memisahkan string berdasarkan koma dan spasi\n+      const dateArray = dateString.split(', ').map(date => date.trim());\n+      return dateArray;\n+    };\n+\n+    const dateString = relatedMonths.map(option => option.value).join(', ');\n+    const dateArray = convertStringToArray(dateString);\n+\n+\n+\n+    //console.log(relatedMonths.map(option => option.value))\n+    const newTransaction = {\n+      transaction_type: transactionType,\n+      amount,\n+      description,\n+      proof_of_transfer: proofOfTransferUrl,\n+      houseId,\n+      payment_type: paymentType.value,\n+      related_months: dateArray,\n+      //relatedMonths:relatedMonths.map(option => moment(option.value, \"YYYY-MM\")).join(', '),\n+      paymentDate,\n+      status\n+    };\n+\n+   // console.log(newTransaction)\n+\n+    onSubmit(newTransaction);\n+    setHouseId('');\n+    setAmount('');\n+    setDescription('');\n+    setProofOfTransfer('');\n+    setRelatedMonths([]);\n+    setPaymentDate(new Date());\n+    setStatus('berhasil');\n+    fileInputRef.current.value = '';\n+    setPaymentType('');\n+    setIsProcessing(false); // Stop processing\n+    onClose();\n+  };\n+\n+  useEffect(() => {\n+    if (transactionToEdit) {\n+      setHouseName(transactionToEdit.houseName);\n+    }\n+  }, [transactionToEdit]);\n+\n+\n+  const handleHouseChange = (newValue) => {\n+    setHouseId(newValue);\n+  };\n+\n+  const handleHouseSelect = (selectedHouse) => {\n+    setHouseId(selectedHouse.value);\n+    setHouseName(selectedHouse.label)\n+    //setDescription(`IPL rumah ${selectedHouse.value} periode ${relatedMonths.join(', ')}`);\n+  };\n+  \n+  useEffect(() => {\n+    if (transactionToEdit) {\n+      setRelatedMonths(transactionToEdit.related_months || []);\n+    }\n+  }, [transactionToEdit]);\n+\n+\n+  const handleMonthChange = (selectedOptions) => {\n+    setRelatedMonths(selectedOptions || []);\n+  };\n+\n+  const generateMonthsOptions = () => {\n+    const options = [];\n+    const startYear = moment().year();\n+    const endYear = startYear + 2; // 2 tahun ke depan\n+\n+    for (let year = startYear; year <= endYear; year++) {\n+      for (let month = 0; month < 12; month++) {\n+        const value = moment().month(month).year(year).format(\"YYYY-MM\");\n+        const label = moment().month(month).year(year).format(\"MMMM YYYY\");\n+        options.push({ value, label });\n+      }\n+    }\n+    return options;\n+  };\n+\n+  const optionsType = [\n+    { value: 'cash', label: 'Cash' },\n+    { value: 'transfer', label: 'Transfer' },\n+  ]\n+\n+  useEffect(() => {\n+    if (transactionToEdit) {\n+      setPaymentType(transactionToEdit.payment_type || '');\n+    }\n+  }, [transactionToEdit]);\n+\n+  const handleTypeChange = (e) => {\n+    setPaymentType(e);\n+  };\n+\n+  const resetForm = () => {\n+    setHouseId('');\n+    setAmount('');\n+    setDescription('');\n+    setProofOfTransfer('');\n+    setRelatedMonths([]);\n+    setPaymentDate(new Date());\n+    setStatus('berhasil');\n+    setPaymentType('');\n+    fileInputRef.current.value = '';\n+    setErrors({});\n+  };\n+\n+ \n+\n+  return (\n+    <Drawer\n+      open={isOpen}\n+      onClose={() => {\n+        resetForm();\n+        onClose();\n+      }}\n+      position=\"right\"\n+      className=\"py-4 px-7 top-0 z-50 w-full md:w-2/4\"\n+    >\n+      <Drawer.Header title={`Transaksi ${transactionType === 'ipl' ? 'IPL' : transactionType === 'income' ? 'Masuk' : 'Keluar'}`} titleIcon={FaExchangeAlt} />\n+      <Drawer.Items>\n+        <form onSubmit={handleSubmit} className=\"space-y-4\">\n+          {transactionType === 'ipl' && (\n+            <>\n+              <div className=\"mb-6 mt-3\">\n+                <Label htmlFor=\"houseId\" className=\"mb-2 block\">No Rumah</Label>\n+                <Autocomplete\n+                  value={houseId}\n+                  onChange={handleHouseChange}\n+                  options={houses}\n+                  onSelect={handleHouseSelect}\n+                />\n+                {errors.houseId && <div className=\"text-red-500 text-sm\">{errors.houseId}</div>}\n+              </div>\n+\n+              <div className=\"mb-6 mt-3\">\n+                <Label htmlFor=\"relatedMonths\" className=\"mb-2 block\">Periode</Label>\n+                <Select\n+                 id=\"relatedMonths\"\n+                 isMulti\n+                 options={generateMonthsOptions()}\n+                 value={relatedMonths}\n+                 onChange={handleMonthChange}\n+                 placeholder=\"Pilih bulan\"\n+                 className='bg-gray-50 text-sm'\n+                />\n+                {errors.relatedMonths && <div className=\"text-red-500 text-sm\">{errors.relatedMonths}</div>}\n+              </div>\n+            </>\n+          )}\n+\n+          <div className=\"mb-6 mt-3\">\n+            <Label htmlFor=\"description\" className=\"mb-2 block\">Deskripsi</Label>\n+            <Textarea\n+              id=\"description\"\n+              name=\"description\"\n+              value={description}\n+              onChange={(e) => setDescription(e.target.value)}\n+              placeholder=\"Masukkan deskripsi\"\n+              readOnly={transactionType === 'ipl'} // Make description read-only for IPL transactions\n+            />\n+            {errors.description && <div className=\"text-red-500 text-sm\">{errors.description}</div>}\n+          </div>\n+\n+          <div className=\"mb-6 mt-3\">\n+            <Label htmlFor=\"amount\" className=\"mb-2 block\">Jumlah</Label>\n+            <TextInput\n+              id=\"amount\"\n+              name=\"amount\"\n+              type=\"number\"\n+              value={amount}\n+              onChange={(e) => setAmount(e.target.value)}\n+              placeholder=\"Masukkan jumlah\"\n+            />\n+            {errors.amount && <div className=\"text-red-500 text-sm\">{errors.amount}</div>}\n+          </div>\n+\n+          <div className=\"mb-6 mt-3\">\n+            <Label htmlFor=\"payment_type\" className=\"mb-2 block\">Tipe Pembayaran</Label>\n+              <Select\n+                id=\"payment_type\"\n+                options={optionsType}\n+                value={paymentType}\n+                onChange={handleTypeChange}\n+                placeholder=\"Cash atau Transfer\"\n+                className='bg-gray-50 text-sm'\n+              />\n+            {/* {errors.amount && <div className=\"text-red-500 text-sm\">{errors.amount}</div>} */}\n+          </div>\n+\n+          <div className=\"mb-6 mt-3\">\n+              <Label htmlFor=\"proofOfTransfer\" className=\"mb-2 block\">Lampiran</Label>\n+              <FileInput \n+                id=\"file\" \n+                onChange={handleFileChange} \n+                accept=\".jpg,.png,.pdf\"\n+                ref={fileInputRef}\n+              />\n+              <TextInput\n+                id=\"proofOfTransfer\"\n+                name=\"proofOfTransfer\"\n+                value={proofOfTransfer}\n+                onChange={(e) => setProofOfTransfer(e.target.value)}\n+                placeholder=\"Masukkan URL lampiran\"\n+                className='hidden'\n+              />\n+              {errors.proofOfTransfer && <div className=\"text-red-500 text-sm\">{errors.proofOfTransfer}</div>}\n+            </div>\n+\n+          <div className=\"mb-6 mt-3\">\n+            <Label htmlFor=\"paymentDate\" className=\"mb-2 block\">Tanggal Pembayaran</Label>\n+            <div className='flex items-center w-72 relative border border-gray-300 rounded-md shadow-sm bg-gray-50'>\n+            <FaCalendarAlt className=\"absolute h-5 w-5 left-2 z-50 top-1/2 transform -translate-y-1/2 text-gray-500\" />\n+            <DatePicker\n+              locale={id}\n+              id=\"paymentDate\"\n+              name=\"paymentDate\"\n+              selected={paymentDate}\n+              onChange={(date) => setPaymentDate(date)}\n+              dateFormat=\"dd MMMM yyyy\"\n+              calendarClassName=\"light-blue-stripes\"\n+              placeholderText=\"Pilih tanggal\"\n+              className=\"block w-full pl-8 text-sm text-gray-900  border-gray-300 border-none rounded-md py-2 px-4 focus:ring-0 bg-gray-50\"\n+            />\n+            </div>\n+            {errors.paymentDate && <div className=\"text-red-500 text-sm\">{errors.paymentDate}</div>}\n+            \n+          </div>\n+\n+          <div className='flex gap-2'>\n+            <Button \n+            type=\"submit\" \n+            color={transactionType === 'ipl' ? 'success' : transactionType === 'income' ? 'blue' : 'failure'}\n+            disabled={isProcessing}\n+            >\n+              {isProcessing && <AiOutlineLoading className=\"h-5 w-5 animate-spin mr-2\" />}\n+              {transactionType === 'ipl' && <FaExchangeAlt className=\"mr-2 h-5 w-5\" />}\n+              {transactionType === 'income' && <FaRegArrowAltCircleDown className=\"mr-2 h-5 w-5\" />}\n+              {transactionType === 'expense' && <FaRegArrowAltCircleUp className=\"mr-2 h-5 w-5\" />}\n+              Simpan\n+            </Button>\n+            <Button\n+              type=\"button\"\n+              color=\"gray\"\n+              onClick={() => {\n+                resetForm();\n+                onClose();\n+              }}\n+            >\n+              Batal\n+            </Button>\n+          </div>\n+        </form>\n+      </Drawer.Items>\n+    </Drawer>\n+  );\n+};\n+\n+export default TransactionDrawer;\n"
                },
                {
                    "date": 1722416540216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,414 +31,8 @@\n   const [errors, setErrors] = useState({});\n   const [uploadUrl, setUploadUrl] = useState('');\n   const fileInputRef = useRef(null);\n   const [isProcessing, setIsProcessing] = useState(false);\n-  const [paymentType, setPaymentType] = useState('Cash');\n-\n-  // Set nilai awal formulir jika ada transactionToEdit\n-  useEffect(() => {\n-    if (transactionToEdit) {\n-      setHouseId(transactionToEdit.houseId || '');\n-      setHouseName(transactionToEdit.houseName || '');\n-      setAmount(transactionToEdit.amount || '');\n-      setDescription(transactionToEdit.description || '');\n-      setProofOfTransfer(transactionToEdit.proof_of_transfer || '');\n-      setRelatedMonths(transactionToEdit.related_months || []);\n-      setPaymentDate(transactionToEdit.paymentDate || new Date());\n-      setStatus(transactionToEdit.status || 'berhasil');\n-      setPaymentType(transactionToEdit.payment_type || '');\n-    }\n-  }, [transactionToEdit]);\n-\n-  useEffect(() => {\n-    if (session) {\n-      const fetchHouses = async () => {\n-        try {\n-          const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/houses/all`, {\n-            headers: {\n-              Authorization: `Bearer ${session.accessToken}`,\n-            },\n-          });\n-          setHouses(res.data.map(house => ({\n-            value: house.house_id,\n-            label: house.house_id\n-          })));\n-        } catch (error) {\n-          console.error('Error fetching houses data:', error);\n-        }\n-      };\n-\n-      fetchHouses();\n-    }\n-  }, [session]);\n-\n-  useEffect(() => {\n-    if (transactionType === 'ipl') {\n-      if(relatedMonths.length > 0 && houseName ) {\n-        const monthLabels = relatedMonths.map(option => moment(option.value, \"YYYY-MM\").format(\"MMMM YYYY\")).join(', ');\n-        const descriptionText = `IPL ${houseName} periode ${monthLabels}`;\n-        setDescription(descriptionText);\n-      }\n-     \n-    }\n-  }, [houseId, relatedMonths, transactionType]);\n-\n-  const handleFileChange = (e) => {\n-    const file = e.target.files[0];\n-    if (file) {\n-        setProofOfTransfer(file); // Set file for upload\n-    }\n-  };\n-\n-  const handleFileUpload = async (file) => {\n-    const formData = new FormData();\n-    formData.append('file', file);\n-\n-    try {\n-        const response = await axios.post(`${process.env.NEXT_PUBLIC_API_URL}/upload`, formData, {\n-            headers: {\n-                'Content-Type': 'multipart/form-data',\n-            },\n-        });\n-        setUploadUrl(response.data.url);\n-        return response.data.url;\n-    } catch (error) {\n-        //console.error('Error uploading file:', error);\n-        //alert('Failed to upload file.');\n-        return null;\n-    }\n-  };\n-\n-  useEffect(() => {\n-    if (transactionToEdit) {\n-      setUploadUrl(transactionToEdit.proof_of_transfer);\n-    }\n-  }, [transactionToEdit]);\n-\n-  const handleSubmit = async (e) => {\n-    e.preventDefault();\n-    const newErrors = {};\n-\n-    if (!transactionType) newErrors.transactionType = 'Transaction type is required';\n-    if (!amount || amount <= 0) newErrors.amount = 'Amount must be a positive number';\n-    if (!description) newErrors.description = 'Description is required';\n-    if (!paymentDate) newErrors.paymentDate = 'Payment date is required';\n-    if (!relatedMonths) newErrors.relatedMonths = 'Months is required';\n-    if (transactionType === 'ipl' && !houseId) newErrors.houseId = 'House ID is required';\n-    if (paymentType === 'transfer' && !proofOfTransfer) newErrors.proofOfTransfer = 'Proof of transfer is required';\n-\n-    if (Object.keys(newErrors).length > 0) {\n-      setErrors(newErrors);\n-      return;\n-    }\n-\n-    setIsProcessing(true); // Start processing\n-\n-    let proofOfTransferUrl = uploadUrl;\n-    // If proofOfTransfer is a file that needs to be uploaded\n-    if (proofOfTransfer && proofOfTransfer instanceof File) {\n-      proofOfTransferUrl = await handleFileUpload(proofOfTransfer);\n-      if (!proofOfTransferUrl) return; // Abort if upload fails\n-    }\n-\n-    const convertStringToArray = (dateString) => {\n-      // Memisahkan string berdasarkan koma dan spasi\n-      const dateArray = dateString.split(', ').map(date => date.trim());\n-      return dateArray;\n-    };\n-\n-    const dateString = relatedMonths.map(option => option.value).join(', ');\n-    const dateArray = convertStringToArray(dateString);\n-\n-\n-\n-    //console.log(relatedMonths.map(option => option.value))\n-    const newTransaction = {\n-      transaction_type: transactionType,\n-      amount,\n-      description,\n-      proof_of_transfer: proofOfTransferUrl,\n-      houseId,\n-      payment_type: paymentType.value,\n-      related_months: dateArray,\n-      //relatedMonths:relatedMonths.map(option => moment(option.value, \"YYYY-MM\")).join(', '),\n-      paymentDate,\n-      status\n-    };\n-\n-   // console.log(newTransaction)\n-\n-    onSubmit(newTransaction);\n-    setHouseId('');\n-    setAmount('');\n-    setDescription('');\n-    setProofOfTransfer('');\n-    setRelatedMonths([]);\n-    setPaymentDate(new Date());\n-    setStatus('berhasil');\n-    fileInputRef.current.value = '';\n-    setPaymentType('');\n-    setIsProcessing(false); // Stop processing\n-    onClose();\n-  };\n-\n-  useEffect(() => {\n-    if (transactionToEdit) {\n-      setHouseName(transactionToEdit.houseName);\n-    }\n-  }, [transactionToEdit]);\n-\n-\n-  const handleHouseChange = (newValue) => {\n-    setHouseId(newValue);\n-  };\n-\n-  const handleHouseSelect = (selectedHouse) => {\n-    setHouseId(selectedHouse.value);\n-    setHouseName(selectedHouse.label)\n-    //setDescription(`IPL rumah ${selectedHouse.value} periode ${relatedMonths.join(', ')}`);\n-  };\n-  \n-  useEffect(() => {\n-    if (transactionToEdit) {\n-      setRelatedMonths(transactionToEdit.related_months || []);\n-    }\n-  }, [transactionToEdit]);\n-\n-\n-  const handleMonthChange = (selectedOptions) => {\n-    setRelatedMonths(selectedOptions || []);\n-  };\n-\n-  const generateMonthsOptions = () => {\n-    const options = [];\n-    const startYear = moment().year();\n-    const endYear = startYear + 2; // 2 tahun ke depan\n-\n-    for (let year = startYear; year <= endYear; year++) {\n-      for (let month = 0; month < 12; month++) {\n-        const value = moment().month(month).year(year).format(\"YYYY-MM\");\n-        const label = moment().month(month).year(year).format(\"MMMM YYYY\");\n-        options.push({ value, label });\n-      }\n-    }\n-    return options;\n-  };\n-\n-  const optionsType = [\n-    { value: 'cash', label: 'Cash' },\n-    { value: 'transfer', label: 'Transfer' },\n-  ]\n-\n-  useEffect(() => {\n-    if (transactionToEdit) {\n-      setPaymentType(transactionToEdit.payment_type || '');\n-    }\n-  }, [transactionToEdit]);\n-\n-  const handleTypeChange = (e) => {\n-    setPaymentType(e);\n-  };\n-\n-  const resetForm = () => {\n-    setHouseId('');\n-    setAmount('');\n-    setDescription('');\n-    setProofOfTransfer('');\n-    setRelatedMonths([]);\n-    setPaymentDate(new Date());\n-    setStatus('berhasil');\n-    setPaymentType('');\n-    fileInputRef.current.value = '';\n-    setErrors({});\n-  };\n-\n- \n-\n-  return (\n-    <Drawer\n-      open={isOpen}\n-      onClose={() => {\n-        resetForm();\n-        onClose();\n-      }}\n-      position=\"right\"\n-      className=\"py-4 px-7 top-0 z-50 w-full md:w-2/4\"\n-    >\n-      <Drawer.Header title={`Transaksi ${transactionType === 'ipl' ? 'IPL' : transactionType === 'income' ? 'Masuk' : 'Keluar'}`} titleIcon={FaExchangeAlt} />\n-      <Drawer.Items>\n-        <form onSubmit={handleSubmit} className=\"space-y-4\">\n-          {transactionType === 'ipl' && (\n-            <>\n-              <div className=\"mb-6 mt-3\">\n-                <Label htmlFor=\"houseId\" className=\"mb-2 block\">No Rumah</Label>\n-                <Autocomplete\n-                  value={houseId}\n-                  onChange={handleHouseChange}\n-                  options={houses}\n-                  onSelect={handleHouseSelect}\n-                />\n-                {errors.houseId && <div className=\"text-red-500 text-sm\">{errors.houseId}</div>}\n-              </div>\n-\n-              <div className=\"mb-6 mt-3\">\n-                <Label htmlFor=\"relatedMonths\" className=\"mb-2 block\">Periode</Label>\n-                <Select\n-                 id=\"relatedMonths\"\n-                 isMulti\n-                 options={generateMonthsOptions()}\n-                 value={relatedMonths}\n-                 onChange={handleMonthChange}\n-                 placeholder=\"Pilih bulan\"\n-                 className='bg-gray-50 text-sm'\n-                />\n-                {errors.relatedMonths && <div className=\"text-red-500 text-sm\">{errors.relatedMonths}</div>}\n-              </div>\n-            </>\n-          )}\n-\n-          <div className=\"mb-6 mt-3\">\n-            <Label htmlFor=\"description\" className=\"mb-2 block\">Deskripsi</Label>\n-            <Textarea\n-              id=\"description\"\n-              name=\"description\"\n-              value={description}\n-              onChange={(e) => setDescription(e.target.value)}\n-              placeholder=\"Masukkan deskripsi\"\n-              readOnly={transactionType === 'ipl'} // Make description read-only for IPL transactions\n-            />\n-            {errors.description && <div className=\"text-red-500 text-sm\">{errors.description}</div>}\n-          </div>\n-\n-          <div className=\"mb-6 mt-3\">\n-            <Label htmlFor=\"amount\" className=\"mb-2 block\">Jumlah</Label>\n-            <TextInput\n-              id=\"amount\"\n-              name=\"amount\"\n-              type=\"number\"\n-              value={amount}\n-              onChange={(e) => setAmount(e.target.value)}\n-              placeholder=\"Masukkan jumlah\"\n-            />\n-            {errors.amount && <div className=\"text-red-500 text-sm\">{errors.amount}</div>}\n-          </div>\n-\n-          <div className=\"mb-6 mt-3\">\n-            <Label htmlFor=\"payment_type\" className=\"mb-2 block\">Tipe Pembayaran</Label>\n-              <Select\n-                id=\"payment_type\"\n-                options={optionsType}\n-                value={paymentType}\n-                onChange={handleTypeChange}\n-                placeholder=\"Cash atau Transfer\"\n-                className='bg-gray-50 text-sm'\n-              />\n-            {/* {errors.amount && <div className=\"text-red-500 text-sm\">{errors.amount}</div>} */}\n-          </div>\n-\n-          <div className=\"mb-6 mt-3\">\n-              <Label htmlFor=\"proofOfTransfer\" className=\"mb-2 block\">Lampiran</Label>\n-              <FileInput \n-                id=\"file\" \n-                onChange={handleFileChange} \n-                accept=\".jpg,.png,.pdf\"\n-                ref={fileInputRef}\n-              />\n-              <TextInput\n-                id=\"proofOfTransfer\"\n-                name=\"proofOfTransfer\"\n-                value={proofOfTransfer}\n-                onChange={(e) => setProofOfTransfer(e.target.value)}\n-                placeholder=\"Masukkan URL lampiran\"\n-                className='hidden'\n-              />\n-              {errors.proofOfTransfer && <div className=\"text-red-500 text-sm\">{errors.proofOfTransfer}</div>}\n-            </div>\n-\n-          <div className=\"mb-6 mt-3\">\n-            <Label htmlFor=\"paymentDate\" className=\"mb-2 block\">Tanggal Pembayaran</Label>\n-            <div className='flex items-center w-72 relative border border-gray-300 rounded-md shadow-sm bg-gray-50'>\n-            <FaCalendarAlt className=\"absolute h-5 w-5 left-2 z-50 top-1/2 transform -translate-y-1/2 text-gray-500\" />\n-            <DatePicker\n-              locale={id}\n-              id=\"paymentDate\"\n-              name=\"paymentDate\"\n-              selected={paymentDate}\n-              onChange={(date) => setPaymentDate(date)}\n-              dateFormat=\"dd MMMM yyyy\"\n-              calendarClassName=\"light-blue-stripes\"\n-              placeholderText=\"Pilih tanggal\"\n-              className=\"block w-full pl-8 text-sm text-gray-900  border-gray-300 border-none rounded-md py-2 px-4 focus:ring-0 bg-gray-50\"\n-            />\n-            </div>\n-            {errors.paymentDate && <div className=\"text-red-500 text-sm\">{errors.paymentDate}</div>}\n-            \n-          </div>\n-\n-          <div className='flex gap-2'>\n-            <Button \n-            type=\"submit\" \n-            color={transactionType === 'ipl' ? 'success' : transactionType === 'income' ? 'blue' : 'failure'}\n-            disabled={isProcessing}\n-            >\n-              {isProcessing && <AiOutlineLoading className=\"h-5 w-5 animate-spin mr-2\" />}\n-              {transactionType === 'ipl' && <FaExchangeAlt className=\"mr-2 h-5 w-5\" />}\n-              {transactionType === 'income' && <FaRegArrowAltCircleDown className=\"mr-2 h-5 w-5\" />}\n-              {transactionType === 'expense' && <FaRegArrowAltCircleUp className=\"mr-2 h-5 w-5\" />}\n-              Simpan\n-            </Button>\n-            <Button\n-              type=\"button\"\n-              color=\"gray\"\n-              onClick={() => {\n-                resetForm();\n-                onClose();\n-              }}\n-            >\n-              Batal\n-            </Button>\n-          </div>\n-        </form>\n-      </Drawer.Items>\n-    </Drawer>\n-  );\n-};\n-\n-export default TransactionDrawer;\n-// components/TransactionDrawer.js\n-import { getSession, useSession } from 'next-auth/react';\n-import { useState, useEffect, useRef } from 'react';\n-import { Drawer, Button, Input, FileInput, Textarea, Label, TextInput, Dropdown,Alert } from 'flowbite-react';\n-import {FaCalendarAlt, FaMoneyBill, FaRegArrowAltCircleDown, FaRegArrowAltCircleUp } from 'react-icons/fa';\n-import { FaExchangeAlt } from \"react-icons/fa\";\n-import { AiOutlineLoading } from \"react-icons/ai\";\n-import axios from 'axios';\n-import Autocomplete from '../Autocomplete';\n-import DatePicker from 'react-datepicker';\n-import 'react-datepicker/dist/react-datepicker.css'\n-import Select from 'react-select';\n-import moment from 'moment';\n-import 'moment/locale/id';\n-import id from \"date-fns/locale/id\";\n-moment.locale('id');\n-\n-const TransactionDrawer = ({ isOpen, onClose, onSubmit, transactionType,transactionToEdit }) => {\n-  \n-  const [houseId, setHouseId] = useState('');\n-  const [houseName, setHouseName] = useState('');\n-  const [amount, setAmount] = useState('');\n-  const [description, setDescription] = useState('');\n-  const [proofOfTransfer, setProofOfTransfer] = useState('');\n-  const [relatedMonths, setRelatedMonths] = useState([]);\n-  const [status, setStatus] = useState('berhasil');\n-  const [houses, setHouses] = useState([]);\n-  const [selectedHouse, setSelectedHouse] = useState(null);\n-  const [paymentDate, setPaymentDate] = useState(new Date());\n-  const { data: session } = useSession();\n-  const [errors, setErrors] = useState({});\n-  const [uploadUrl, setUploadUrl] = useState('');\n-  const fileInputRef = useRef(null);\n-  const [isProcessing, setIsProcessing] = useState(false);\n   const [paymentType, setPaymentType] = useState('');\n \n   // Set nilai awal formulir jika ada transactionToEdit\n   useEffect(() => {\n"
                }
            ],
            "date": 1722398974280,
            "name": "Commit-0",
            "content": "// components/TransactionDrawer.js\nimport { getSession, useSession } from 'next-auth/react';\nimport { useState, useEffect, useRef } from 'react';\nimport { Drawer, Button, Input, FileInput, Textarea, Label, TextInput, Dropdown,Alert } from 'flowbite-react';\nimport {FaCalendarAlt, FaMoneyBill, FaRegArrowAltCircleDown, FaRegArrowAltCircleUp } from 'react-icons/fa';\nimport { FaExchangeAlt } from \"react-icons/fa\";\nimport { AiOutlineLoading } from \"react-icons/ai\";\nimport axios from 'axios';\nimport Autocomplete from '../Autocomplete';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css'\nimport Select from 'react-select';\nimport moment from 'moment';\nimport 'moment/locale/id';\nimport id from \"date-fns/locale/id\";\nmoment.locale('id');\n\nconst TransactionDrawer = ({ isOpen, onClose, onSubmit, transactionType }) => {\n  const [houseId, setHouseId] = useState('');\n  const [houseName, setHouseName] = useState('');\n  const [amount, setAmount] = useState('');\n  const [description, setDescription] = useState('');\n  const [proofOfTransfer, setProofOfTransfer] = useState('');\n  const [relatedMonths, setRelatedMonths] = useState([]);\n  const [status, setStatus] = useState('berhasil');\n  const [houses, setHouses] = useState([]);\n  const [selectedHouse, setSelectedHouse] = useState(null);\n  const [paymentDate, setPaymentDate] = useState(new Date());\n  const { data: session } = useSession();\n  const [errors, setErrors] = useState({});\n  const [uploadUrl, setUploadUrl] = useState('');\n  const fileInputRef = useRef(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  useEffect(() => {\n    if (session) {\n      const fetchHouses = async () => {\n        try {\n          const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/houses/all`, {\n            headers: {\n              Authorization: `Bearer ${session.accessToken}`,\n            },\n          });\n          setHouses(res.data.map(house => ({\n            value: house.house_id,\n            label: house.house_id\n          })));\n        } catch (error) {\n          console.error('Error fetching houses data:', error);\n        }\n      };\n\n      fetchHouses();\n    }\n  }, [session]);\n\n  useEffect(() => {\n    if (transactionType === 'ipl') {\n      if(relatedMonths.length > 0 && houseName ) {\n        const monthLabels = relatedMonths.map(option => moment(option.value, \"YYYY-MM\").format(\"MMMM YYYY\")).join(', ');\n        const descriptionText = `IPL Rumah ${houseName} periode ${monthLabels}`;\n        setDescription(descriptionText);\n      }\n     \n    }\n  }, [houseId, relatedMonths, transactionType]);\n\n  const handleFileChange = (e) => {\n    const file = e.target.files[0];\n    if (file) {\n        setProofOfTransfer(file); // Set file for upload\n    }\n  };\n\n  const handleFileUpload = async (file) => {\n    const formData = new FormData();\n    formData.append('file', file);\n\n    try {\n        const response = await axios.post(`${process.env.NEXT_PUBLIC_API_URL}/upload`, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data',\n            },\n        });\n        setUploadUrl(response.data.url);\n        return response.data.url;\n    } catch (error) {\n        //console.error('Error uploading file:', error);\n        //alert('Failed to upload file.');\n        return null;\n    }\n };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const newErrors = {};\n\n    if (!transactionType) newErrors.transactionType = 'Transaction type is required';\n    if (!amount || amount <= 0) newErrors.amount = 'Amount must be a positive number';\n    if (!description) newErrors.description = 'Description is required';\n    if (!paymentDate) newErrors.paymentDate = 'Payment date is required';\n    if (!relatedMonths) newErrors.relatedMonths = 'Months is required';\n    if (transactionType === 'ipl' && !houseId) newErrors.houseId = 'House ID is required';\n    if (transactionType === 'ipl' && !proofOfTransfer) newErrors.proofOfTransfer = 'Proof of transfer is required';\n\n    if (Object.keys(newErrors).length > 0) {\n      setErrors(newErrors);\n      return;\n    }\n\n    setIsProcessing(true); // Start processing\n\n    let proofOfTransferUrl = uploadUrl;\n    // If proofOfTransfer is a file that needs to be uploaded\n    if (proofOfTransfer && proofOfTransfer instanceof File) {\n      proofOfTransferUrl = await handleFileUpload(proofOfTransfer);\n      if (!proofOfTransferUrl) return; // Abort if upload fails\n    }\n\n    const convertStringToArray = (dateString) => {\n      // Memisahkan string berdasarkan koma dan spasi\n      const dateArray = dateString.split(', ').map(date => date.trim());\n      return dateArray;\n    };\n\n    const dateString = relatedMonths.map(option => option.value).join(', ');\n    const dateArray = convertStringToArray(dateString);\n\n    //console.log(relatedMonths.map(option => option.value))\n    const newTransaction = {\n      transaction_type: transactionType,\n      amount,\n      description,\n      proof_of_transfer: proofOfTransferUrl,\n      houseId,\n      related_months: dateArray,\n      //relatedMonths:relatedMonths.map(option => moment(option.value, \"YYYY-MM\")).join(', '),\n      paymentDate,\n      status\n    };\n\n   // console.log(newTransaction)\n\n    onSubmit(newTransaction);\n    setHouseId('');\n    setAmount('');\n    setDescription('');\n    setProofOfTransfer('');\n    setRelatedMonths([]);\n    setPaymentDate(new Date());\n    setStatus('berhasil');\n    fileInputRef.current.value = '';\n    setIsProcessing(false); // Stop processing\n    onClose();\n  };\n\n  const handleHouseChange = (newValue) => {\n    setHouseId(newValue);\n  };\n\n  const handleHouseSelect = (selectedHouse) => {\n    setHouseId(selectedHouse.value);\n    setHouseName(selectedHouse.label)\n    //setDescription(`IPL rumah ${selectedHouse.value} periode ${relatedMonths.join(', ')}`);\n  };\n\n  const handleMonthChange = (selectedOptions) => {\n    setRelatedMonths(selectedOptions || []);\n  };\n\n  const generateMonthsOptions = () => {\n    const options = [];\n    const startYear = moment().year();\n    const endYear = startYear + 2; // 2 tahun ke depan\n\n    for (let year = startYear; year <= endYear; year++) {\n      for (let month = 0; month < 12; month++) {\n        const value = moment().month(month).year(year).format(\"YYYY-MM\");\n        const label = moment().month(month).year(year).format(\"MMMM YYYY\");\n        options.push({ value, label });\n      }\n    }\n    return options;\n  };\n\n  const resetForm = () => {\n    setHouseId('');\n    setAmount('');\n    setDescription('');\n    setProofOfTransfer('');\n    setRelatedMonths([]);\n    setPaymentDate(new Date());\n    setStatus('berhasil');\n    fileInputRef.current.value = '';\n    setErrors({});\n  };\n\n \n\n  return (\n    <Drawer\n      open={isOpen}\n      onClose={() => {\n        resetForm();\n        onClose();\n      }}\n      position=\"right\"\n      className=\"py-4 px-7 top-0 z-50 w-full md:w-2/4\"\n    >\n      <Drawer.Header title={`Transaksi ${transactionType === 'ipl' ? 'IPL' : transactionType === 'income' ? 'Masuk' : 'Keluar'}`} titleIcon={FaExchangeAlt} />\n      <Drawer.Items>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          {transactionType === 'ipl' && (\n            <>\n              <div className=\"mb-6 mt-3\">\n                <Label htmlFor=\"houseId\" className=\"mb-2 block\">No Rumah</Label>\n                <Autocomplete\n                  value={houseId}\n                  onChange={handleHouseChange}\n                  options={houses}\n                  onSelect={handleHouseSelect}\n                />\n                {errors.houseId && <div className=\"text-red-500 text-sm\">{errors.houseId}</div>}\n              </div>\n\n              <div className=\"mb-6 mt-3\">\n                <Label htmlFor=\"relatedMonths\" className=\"mb-2 block\">Periode</Label>\n                <Select\n                 id=\"relatedMonths\"\n                 isMulti\n                 options={generateMonthsOptions()}\n                 value={relatedMonths}\n                 onChange={handleMonthChange}\n                 placeholder=\"Pilih bulan\"\n                 className='bg-gray-50'\n                />\n                {errors.relatedMonths && <div className=\"text-red-500 text-sm\">{errors.relatedMonths}</div>}\n              </div>\n            </>\n          )}\n\n          <div className=\"mb-6 mt-3\">\n            <Label htmlFor=\"description\" className=\"mb-2 block\">Deskripsi</Label>\n            <Textarea\n              id=\"description\"\n              name=\"description\"\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n              placeholder=\"Masukkan deskripsi\"\n              readOnly={transactionType === 'ipl'} // Make description read-only for IPL transactions\n            />\n            {errors.description && <div className=\"text-red-500 text-sm\">{errors.description}</div>}\n          </div>\n\n          <div className=\"mb-6 mt-3\">\n            <Label htmlFor=\"amount\" className=\"mb-2 block\">Jumlah</Label>\n            <TextInput\n              id=\"amount\"\n              name=\"amount\"\n              type=\"number\"\n              value={amount}\n              onChange={(e) => setAmount(e.target.value)}\n              placeholder=\"Masukkan jumlah\"\n            />\n            {errors.amount && <div className=\"text-red-500 text-sm\">{errors.amount}</div>}\n          </div>\n\n          <div className=\"mb-6 mt-3\">\n            <Label htmlFor=\"payment_type\" className=\"mb-2 block\">Tipe Pembayaran</Label>\n            <Select id=\"payment_type\" required>\n              <option>Transfer</option>\n              <option>Cash</option>\n            </Select>\n            {errors.amount && <div className=\"text-red-500 text-sm\">{errors.amount}</div>}\n          </div>\n\n          <div className=\"mb-6 mt-3\">\n              <Label htmlFor=\"proofOfTransfer\" className=\"mb-2 block\">Lampiran</Label>\n              <FileInput \n                id=\"file\" \n                onChange={handleFileChange} \n                accept=\".jpg,.png,.pdf\"\n                ref={fileInputRef}\n              />\n              <TextInput\n                id=\"proofOfTransfer\"\n                name=\"proofOfTransfer\"\n                value={proofOfTransfer}\n                onChange={(e) => setProofOfTransfer(e.target.value)}\n                placeholder=\"Masukkan URL lampiran\"\n                className='hidden'\n              />\n              {errors.proofOfTransfer && <div className=\"text-red-500 text-sm\">{errors.proofOfTransfer}</div>}\n            </div>\n\n          <div className=\"mb-6 mt-3\">\n            <Label htmlFor=\"paymentDate\" className=\"mb-2 block\">Tanggal Pembayaran</Label>\n            <div className='flex items-center w-72 relative border border-gray-300 rounded-md shadow-sm bg-gray-50'>\n            <FaCalendarAlt className=\"absolute h-5 w-5 left-2 z-50 top-1/2 transform -translate-y-1/2 text-gray-500\" />\n            <DatePicker\n              locale={id}\n              id=\"paymentDate\"\n              name=\"paymentDate\"\n              selected={paymentDate}\n              onChange={(date) => setPaymentDate(date)}\n              dateFormat=\"dd MMMM yyyy\"\n              calendarClassName=\"light-blue-stripes\"\n              placeholderText=\"Pilih tanggal\"\n              className=\"block w-full pl-8 text-sm text-gray-900  border-gray-300 border-none rounded-md py-2 px-4 focus:ring-0 bg-gray-50\"\n            />\n            </div>\n            {errors.paymentDate && <div className=\"text-red-500 text-sm\">{errors.paymentDate}</div>}\n            \n          </div>\n\n          <div className='flex gap-2'>\n            <Button \n            type=\"submit\" \n            color={transactionType === 'ipl' ? 'success' : transactionType === 'income' ? 'blue' : 'failure'}\n            disabled={isProcessing}\n            >\n              {isProcessing && <AiOutlineLoading className=\"h-5 w-5 animate-spin mr-2\" />}\n              {transactionType === 'ipl' && <FaExchangeAlt className=\"mr-2 h-5 w-5\" />}\n              {transactionType === 'income' && <FaRegArrowAltCircleDown className=\"mr-2 h-5 w-5\" />}\n              {transactionType === 'expense' && <FaRegArrowAltCircleUp className=\"mr-2 h-5 w-5\" />}\n              Simpan\n            </Button>\n            <Button\n              type=\"button\"\n              color=\"gray\"\n              onClick={() => {\n                resetForm();\n                onClose();\n              }}\n            >\n              Batal\n            </Button>\n          </div>\n        </form>\n      </Drawer.Items>\n    </Drawer>\n  );\n};\n\nexport default TransactionDrawer;\n"
        }
    ]
}