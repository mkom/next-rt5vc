{
    "sourceFile": "components/IplReport.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1722343746506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1722343861908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,8 +29,9 @@\n   const [totalHousesPaid, setTotalHousesPaid] = useState(0);\n   const [totalHouses, setTotalHouses] = useState(0);\n   const [totalPaid, setTotalPaid] = useState(0);\n   const [monthly ,setMonthly] = useState([]);\n+  const [percentage, setPercentage] = useState(0);\n \n   const offset = 0;\n   const formatCurrency = (amount) => {\n     return new Intl.NumberFormat('id-ID', {\n"
                },
                {
                    "date": 1722343889049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,8 +54,9 @@\n      setTotalPaid(res.data.total_paid);\n      setTotalHousesPaid(res.data.total_houses_paid);\n      setTotalHouses(res.data.total);\n      setMonthly(res.data.data);\n+     setPercentage(res.data.percentage_paid);\n \n      setLoading(false);\n     } catch (error) {\n         console.error('Error fetching houses data:', error);\n"
                },
                {
                    "date": 1722344024546,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,10 +156,16 @@\n \n             <div className='flex gap-1 md:gap-4 justify-start flex-row mb-4'>\n             \n                 <Card className='bg-green-700 text-white w-1/2'>\n-                <h3 className='font-bold text-sm md:text-xl flex items-start'><span><HiHome className=\"h-5 w-5  md:h-7 md:w-7 mr-2\" /></span><span>IPL</span></h3>\n-                <span className='font-semibold text-sm md:text-lg'>{`${totalHousesPaid} / ${totalHouses} Rumah`}</span>\n+                <h3 className='font-bold text-sm md:text-xl flex flex-col lg:flex-row  items-start lg:items-center content-center'>\n+                  <span className='flex'>\n+                    <span><HiHome className=\"h-5 w-5  md:h-7 md:w-7 mr-1 lg:mr-2\" /></span>\n+                    <span>IPL</span>\n+                  </span>\n+                  <span className='text-xs lg:text-sm font-normal lg:ml-3'>{`${totalHousesPaid} / ${totalHouses} Rumah`}</span>\n+                  </h3>\n+                <span className='font-semibold text-sm md:text-lg'>{percentage}</span>\n                 </Card>\n                 <Card className='bg-blue-700 text-white w-1/2'>\n                 <h3 className='font-bold text-sm md:text-xl flex items-start'><span><GrMoney className=\"h-5 w-5  md:h-7 md:w-7 mr-2\" /></span><span>Nominal</span></h3>\n                 <span className='font-semibold text-xs md:text-lg'>{formatCurrency(totalPaid)}</span>\n"
                }
            ],
            "date": 1722343746506,
            "name": "Commit-0",
            "content": "// pages/home.js\nimport { signIn, signOut, useSession ,getSession} from 'next-auth/react';\nimport { useEffect,useState,useCallback } from 'react';\nimport axios from 'axios';\nimport { useRequireAuth } from '../utils/authUtils'; \nimport Spinner from './Spinner';\nimport CustomThemeProviderSecond from './CustomThemeSecond';\nimport { Card, Button, Table } from 'flowbite-react';\nimport { IoCloseCircle } from \"react-icons/io5\";\nimport { IoCheckmarkDoneCircleSharp } from \"react-icons/io5\";\nimport { IoBookmark } from \"react-icons/io5\";\nimport { IoPrism } from \"react-icons/io5\";\nimport { HiHome } from \"react-icons/hi\";\nimport { GrMoney } from \"react-icons/gr\";\n\nimport Select from 'react-select';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport moment from 'moment';\nimport 'moment/locale/id';\nmoment.locale('id');\n\nimport MonthOptions from './MonthOptions';\n\nconst IplReport = ({ initialHousesPaid }) =>  {\n  const [loading, setLoading] = useState(true);\n  const { data: session, status } = useSession();\n  const [selectedPeriod, setSelectedPeriod] = useState(moment().format('YYYY-MM')); // Format YYYY-MM moment().format('YYYY-MM')\n  const [monthlyPaid, setMonthlyPain] = useState([initialHousesPaid]);\n  const [totalHousesPaid, setTotalHousesPaid] = useState(0);\n  const [totalHouses, setTotalHouses] = useState(0);\n  const [totalPaid, setTotalPaid] = useState(0);\n  const [monthly ,setMonthly] = useState([]);\n\n  const offset = 0;\n  const formatCurrency = (amount) => {\n    return new Intl.NumberFormat('id-ID', {\n        style: 'currency',\n        currency: 'IDR',\n        minimumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const fetchMonthlyPaid = async () => {\n    try {\n      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/houses/fee`, {\n          \n          params: {\n            period: selectedPeriod\n        }\n      });\n     // console.log(res.data)\n     setMonthlyPain(res.data.data);\n     setTotalPaid(res.data.total_paid);\n     setTotalHousesPaid(res.data.total_houses_paid);\n     setTotalHouses(res.data.total);\n     setMonthly(res.data.data);\n\n     setLoading(false);\n    } catch (error) {\n        console.error('Error fetching houses data:', error);\n        setLoading(false);\n    }\n  };\n\n  const fetchMonthly = async () => {\n    try {\n      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/houses/fee`, {\n          \n      });\n   // console.log(res.data.data)\n     setMonthly(res.data.data);\n\n     setLoading(false);\n    } catch (error) {\n        console.error('Error fetching houses data:', error);\n        setLoading(false);\n    }\n  };\n\n\n  const [relatedMonths, setRelatedMonths] = useState({\n    value: moment().format('YYYY-MM'),\n    label: moment().format('MMMM YYYY')\n  });\n  \n  const handleMonthChange = (selectedOption) => {\n    setSelectedPeriod(selectedOption.value);\n  };\n\n \n  useEffect(() => {\n    // Set nilai bulan saat ini saat komponen pertama kali dimuat\n    const currentMonthOption = MonthOptions().find(\n      (option) => option.value === moment().format('YYYY-MM')\n    );\n    setRelatedMonths(currentMonthOption);\n  }, []);\n\n  useEffect(() => {\n    fetchMonthlyPaid();\n    fetchMonthly();\n\n  }, [selectedPeriod]);\n\n\n  const getTypeIcon = (status) => {\n    switch (status) {\n      case 'Lunas':\n        return <IoCheckmarkDoneCircleSharp  className=\"text-green-700 h-6 w-6 \" />;\n      case 'Belum Bayar':\n        return <IoCloseCircle  className=\"text-red-700 h-6 w-6 \" />;\n      case 'Bayar Sebagian':\n      return <IoPrism  className=\"text-orange-700 h-6 w-6 \" />;  \n      case 'TBD':\n        return <IoBookmark  className=\"text-yellow-700  h-6 w-6 \" />;\n      default:\n        return null;\n    }\n  };\n\n // console.log(monthlyPaid)\n  \n\n  if (loading) {\n    return <Spinner />;\n  }\n\n  return (\n    <>\n    <CustomThemeProviderSecond>\n        <Card>\n            <div className='flex items-center justify-start gap-4 mb-2 mt-3 bg-cyan-700 rounded-md p-3 '>\n                <div>\n                    <span className='font-semibold text-white'>PERIODE</span>\n                </div>\n                <Select\n                    id=\"relatedMonths\"\n                    options={MonthOptions(monthly)}\n                    value={MonthOptions(monthly).find(option => option.value === selectedPeriod)}\n                    onChange={handleMonthChange}\n                    placeholder=\"Pilih bulan\"\n                    className='bg-gray-50 rounded w-full md:w-1/3'\n                    styles={{\n                      control: (baseStyles, state) => ({\n                        ...baseStyles,\n                        backgroundColor: '#0e7490',\n                      }),\n                      input: (styles) => ({ ...styles, color: '#fff' }),\n                      placeholder: (styles) => ({ ...styles, color: '#fff' }),\n                      singleValue: (styles, { data }) => ({ ...styles, color: '#fff' }),\n                    }}\n                />\n            </div>\n\n            <div className='flex gap-1 md:gap-4 justify-start flex-row mb-4'>\n            \n                <Card className='bg-green-700 text-white w-1/2'>\n                <h3 className='font-bold text-sm md:text-xl flex items-start'><span><HiHome className=\"h-5 w-5  md:h-7 md:w-7 mr-2\" /></span><span>IPL</span></h3>\n                <span className='font-semibold text-sm md:text-lg'>{`${totalHousesPaid} / ${totalHouses} Rumah`}</span>\n                </Card>\n                <Card className='bg-blue-700 text-white w-1/2'>\n                <h3 className='font-bold text-sm md:text-xl flex items-start'><span><GrMoney className=\"h-5 w-5  md:h-7 md:w-7 mr-2\" /></span><span>Nominal</span></h3>\n                <span className='font-semibold text-xs md:text-lg'>{formatCurrency(totalPaid)}</span>\n                </Card>\n              \n            </div>\n           \n            <div className=\"overflow-x-auto\">\n                <Table striped>\n                    <Table.Head className='' >\n                        <Table.HeadCell className='py-2 px-4 md:py-3 md:px-3 bg-cyan-600 text-white w-8'>No</Table.HeadCell>\n                        <Table.HeadCell className='py-2 px-4 md:py-3 md:px-3 bg-cyan-600 text-white'>No Rumah</Table.HeadCell>\n                        <Table.HeadCell className='py-2 px-4 md:py-3 md:px-3 bg-cyan-600 text-white'>Status</Table.HeadCell>\n                        <Table.HeadCell className='py-2 px-4 md:py-3 md:px-3 bg-cyan-600 text-white'>Tanggal</Table.HeadCell>\n                    </Table.Head>\n                    <Table.Body className=\"divide-y\">\n                    {monthlyPaid && monthlyPaid.length > 0 && monthlyPaid[0] !== undefined ? (\n                        monthlyPaid.map((monthly, index) => (\n                            <Table.Row key={index} className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n                               <Table.Cell className={` py-2 px-4 md:py-3 md:px-3 text-xs md:text-base`}>\n                               {offset + index + 1}\n                                </Table.Cell>\n\n                                <Table.Cell className={` py-2 px-4 md:py-3 md:px-3 text-xs md:text-base`}>\n                                  <span className=\"\">{monthly.house_id}</span>\n                                </Table.Cell>\n                                <Table.Cell className={` py-2 px-4 md:py-3 md:px-3 text-xs md:text-base`}>\n                                  <span>{getTypeIcon(monthly.monthly_fees[0].status)} </span>\n                                </Table.Cell>\n\n                                <Table.Cell className={` py-2 px-4 md:py-3 md:px-3 text-xs md:text-base`}>\n                                  {(monthly.monthly_fees[0].transaction_date ? moment(monthly.monthly_fees[0].transaction_date).format('DD/MM/YY') : '-')}\n                                </Table.Cell>\n                                \n                            </Table.Row>\n                        ))\n                        ) : (\n                        <Table.Row>\n                            <Table.Cell colSpan=\"4\" className=\"text-center\">Data tidak tersedia</Table.Cell>\n                        </Table.Row>\n                    )}\n\n                    \n                    \n                    </Table.Body>\n                </Table>\n            </div>\n        </Card>\n    </CustomThemeProviderSecond>\n    </>\n  );\n}\n\nexport const getServerSideProps = async (context) => {\n    const session = await getSession(context);\n    \n    if (!session) {\n        return {\n            redirect: {\n                destination: '/',\n                permanent: false,\n            },\n        };\n    }\n  \n    try {\n        const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/houses/fee`, {\n            headers: {\n                Authorization: `Bearer ${session.accessToken}`,\n            },\n        });\n        return {\n            props: {\n              initialHousesPaid: res.data.data,\n            },\n        };\n    } catch (error) {\n        console.error('Error fetching tra data:', error);\n        return {\n            props: {\n              initialHousesPaid: [],\n            },\n        };\n    }\n  };\n\nexport default IplReport;"
        }
    ]
}